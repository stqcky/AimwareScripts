// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steammessages.proto

#include "steammessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CMsgProtoBufHeader::CMsgProtoBufHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : target_job_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_steam_id_(uint64_t{0u})
  , client_session_id_(0)
  , source_app_id_(0u)
  , gc_dir_index_source_(0u)
  , ip_(0u)
  , gc_msg_src_(0)

  , eresult_(2)
  , job_id_source_(uint64_t{18446744073709551615u})
  , job_id_target_(uint64_t{18446744073709551615u}){}
struct CMsgProtoBufHeaderDefaultTypeInternal {
  constexpr CMsgProtoBufHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgProtoBufHeaderDefaultTypeInternal() {}
  union {
    CMsgProtoBufHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgProtoBufHeaderDefaultTypeInternal _CMsgProtoBufHeader_default_instance_;
constexpr CMsgWebAPIKey::CMsgWebAPIKey(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : domain_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_id_(0u)
  , publisher_group_id_(0u)
  , key_id_(0u)
  , status_(255u){}
struct CMsgWebAPIKeyDefaultTypeInternal {
  constexpr CMsgWebAPIKeyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWebAPIKeyDefaultTypeInternal() {}
  union {
    CMsgWebAPIKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWebAPIKeyDefaultTypeInternal _CMsgWebAPIKey_default_instance_;
constexpr CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgHttpRequest_RequestHeaderDefaultTypeInternal {
  constexpr CMsgHttpRequest_RequestHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHttpRequest_RequestHeaderDefaultTypeInternal() {}
  union {
    CMsgHttpRequest_RequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHttpRequest_RequestHeaderDefaultTypeInternal _CMsgHttpRequest_RequestHeader_default_instance_;
constexpr CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgHttpRequest_QueryParamDefaultTypeInternal {
  constexpr CMsgHttpRequest_QueryParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHttpRequest_QueryParamDefaultTypeInternal() {}
  union {
    CMsgHttpRequest_QueryParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHttpRequest_QueryParamDefaultTypeInternal _CMsgHttpRequest_QueryParam_default_instance_;
constexpr CMsgHttpRequest::CMsgHttpRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , get_params_()
  , post_params_()
  , hostname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , request_method_(0u)
  , absolute_timeout_(0u){}
struct CMsgHttpRequestDefaultTypeInternal {
  constexpr CMsgHttpRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHttpRequestDefaultTypeInternal() {}
  union {
    CMsgHttpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHttpRequestDefaultTypeInternal _CMsgHttpRequest_default_instance_;
constexpr CMsgWebAPIRequest::CMsgWebAPIRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unused_job_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , interface_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , method_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , api_key_(nullptr)
  , request_(nullptr)
  , version_(0u)
  , routing_app_id_(0u){}
struct CMsgWebAPIRequestDefaultTypeInternal {
  constexpr CMsgWebAPIRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgWebAPIRequestDefaultTypeInternal() {}
  union {
    CMsgWebAPIRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgWebAPIRequestDefaultTypeInternal _CMsgWebAPIRequest_default_instance_;
constexpr CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgHttpResponse_ResponseHeaderDefaultTypeInternal {
  constexpr CMsgHttpResponse_ResponseHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHttpResponse_ResponseHeaderDefaultTypeInternal() {}
  union {
    CMsgHttpResponse_ResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHttpResponse_ResponseHeaderDefaultTypeInternal _CMsgHttpResponse_ResponseHeader_default_instance_;
constexpr CMsgHttpResponse::CMsgHttpResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_code_(0u){}
struct CMsgHttpResponseDefaultTypeInternal {
  constexpr CMsgHttpResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgHttpResponseDefaultTypeInternal() {}
  union {
    CMsgHttpResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgHttpResponseDefaultTypeInternal _CMsgHttpResponse_default_instance_;
constexpr CMsgAMFindAccounts::CMsgAMFindAccounts(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : search_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , search_type_(0u){}
struct CMsgAMFindAccountsDefaultTypeInternal {
  constexpr CMsgAMFindAccountsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMFindAccountsDefaultTypeInternal() {}
  union {
    CMsgAMFindAccounts _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMFindAccountsDefaultTypeInternal _CMsgAMFindAccounts_default_instance_;
constexpr CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(){}
struct CMsgAMFindAccountsResponseDefaultTypeInternal {
  constexpr CMsgAMFindAccountsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMFindAccountsResponseDefaultTypeInternal() {}
  union {
    CMsgAMFindAccountsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMFindAccountsResponseDefaultTypeInternal _CMsgAMFindAccountsResponse_default_instance_;
constexpr CMsgNotifyWatchdog::CMsgNotifyWatchdog(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : text_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , source_(0u)
  , alert_type_(0u)
  , alert_destination_(0u)
  , critical_(false)
  , time_(0u)
  , appid_(0u){}
struct CMsgNotifyWatchdogDefaultTypeInternal {
  constexpr CMsgNotifyWatchdogDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNotifyWatchdogDefaultTypeInternal() {}
  union {
    CMsgNotifyWatchdog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNotifyWatchdogDefaultTypeInternal _CMsgNotifyWatchdog_default_instance_;
constexpr CMsgAMGetLicenses::CMsgAMGetLicenses(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CMsgAMGetLicensesDefaultTypeInternal {
  constexpr CMsgAMGetLicensesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGetLicensesDefaultTypeInternal() {}
  union {
    CMsgAMGetLicenses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGetLicensesDefaultTypeInternal _CMsgAMGetLicenses_default_instance_;
constexpr CMsgPackageLicense::CMsgPackageLicense(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : package_id_(0u)
  , time_created_(0u)
  , owner_id_(0u){}
struct CMsgPackageLicenseDefaultTypeInternal {
  constexpr CMsgPackageLicenseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgPackageLicenseDefaultTypeInternal() {}
  union {
    CMsgPackageLicense _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgPackageLicenseDefaultTypeInternal _CMsgPackageLicense_default_instance_;
constexpr CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : license_()
  , result_(0u){}
struct CMsgAMGetLicensesResponseDefaultTypeInternal {
  constexpr CMsgAMGetLicensesResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGetLicensesResponseDefaultTypeInternal() {}
  union {
    CMsgAMGetLicensesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGetLicensesResponseDefaultTypeInternal _CMsgAMGetLicensesResponse_default_instance_;
constexpr CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , steam_id_(uint64_t{0u})
  , game_id_(uint64_t{0u}){}
struct CMsgAMGetUserGameStatsDefaultTypeInternal {
  constexpr CMsgAMGetUserGameStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGetUserGameStatsDefaultTypeInternal _CMsgAMGetUserGameStats_default_instance_;
constexpr CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stat_id_(0u)
  , stat_value_(0u){}
struct CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal {
  constexpr CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStatsResponse_Stats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGetUserGameStatsResponse_StatsDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_Stats_default_instance_;
constexpr CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : achievement_id_(0u)
  , achievement_bit_id_(0u)
  , unlock_time_(0u){}
struct CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal {
  constexpr CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStatsResponse_Achievement_Blocks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGetUserGameStatsResponse_Achievement_BlocksDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_;
constexpr CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_()
  , achievement_blocks_()
  , steam_id_(uint64_t{0u})
  , game_id_(uint64_t{0u})
  , eresult_(2){}
struct CMsgAMGetUserGameStatsResponseDefaultTypeInternal {
  constexpr CMsgAMGetUserGameStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGetUserGameStatsResponseDefaultTypeInternal() {}
  union {
    CMsgAMGetUserGameStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGetUserGameStatsResponseDefaultTypeInternal _CMsgAMGetUserGameStatsResponse_default_instance_;
constexpr CMsgGCGetCommandList::CMsgGCGetCommandList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_prefix_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_id_(0u){}
struct CMsgGCGetCommandListDefaultTypeInternal {
  constexpr CMsgGCGetCommandListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetCommandListDefaultTypeInternal() {}
  union {
    CMsgGCGetCommandList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetCommandListDefaultTypeInternal _CMsgGCGetCommandList_default_instance_;
constexpr CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : command_name_(){}
struct CMsgGCGetCommandListResponseDefaultTypeInternal {
  constexpr CMsgGCGetCommandListResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetCommandListResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetCommandListResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetCommandListResponseDefaultTypeInternal _CMsgGCGetCommandListResponse_default_instance_;
constexpr CGCMsgMemCachedGet::CGCMsgMemCachedGet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_(){}
struct CGCMsgMemCachedGetDefaultTypeInternal {
  constexpr CGCMsgMemCachedGetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedGetDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedGet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedGetDefaultTypeInternal _CGCMsgMemCachedGet_default_instance_;
constexpr CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , found_(false){}
struct CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal {
  constexpr CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedGetResponse_ValueTag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedGetResponse_ValueTagDefaultTypeInternal _CGCMsgMemCachedGetResponse_ValueTag_default_instance_;
constexpr CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct CGCMsgMemCachedGetResponseDefaultTypeInternal {
  constexpr CGCMsgMemCachedGetResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedGetResponseDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedGetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedGetResponseDefaultTypeInternal _CGCMsgMemCachedGetResponse_default_instance_;
constexpr CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CGCMsgMemCachedSet_KeyPairDefaultTypeInternal {
  constexpr CGCMsgMemCachedSet_KeyPairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedSet_KeyPairDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedSet_KeyPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedSet_KeyPairDefaultTypeInternal _CGCMsgMemCachedSet_KeyPair_default_instance_;
constexpr CGCMsgMemCachedSet::CGCMsgMemCachedSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_(){}
struct CGCMsgMemCachedSetDefaultTypeInternal {
  constexpr CGCMsgMemCachedSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedSetDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedSetDefaultTypeInternal _CGCMsgMemCachedSet_default_instance_;
constexpr CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : keys_(){}
struct CGCMsgMemCachedDeleteDefaultTypeInternal {
  constexpr CGCMsgMemCachedDeleteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedDeleteDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedDelete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedDeleteDefaultTypeInternal _CGCMsgMemCachedDelete_default_instance_;
constexpr CGCMsgMemCachedStats::CGCMsgMemCachedStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGCMsgMemCachedStatsDefaultTypeInternal {
  constexpr CGCMsgMemCachedStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedStatsDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedStatsDefaultTypeInternal _CGCMsgMemCachedStats_default_instance_;
constexpr CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curr_connections_(uint64_t{0u})
  , cmd_get_(uint64_t{0u})
  , cmd_set_(uint64_t{0u})
  , cmd_flush_(uint64_t{0u})
  , get_hits_(uint64_t{0u})
  , get_misses_(uint64_t{0u})
  , delete_hits_(uint64_t{0u})
  , delete_misses_(uint64_t{0u})
  , bytes_read_(uint64_t{0u})
  , bytes_written_(uint64_t{0u})
  , limit_maxbytes_(uint64_t{0u})
  , curr_items_(uint64_t{0u})
  , evictions_(uint64_t{0u})
  , bytes_(uint64_t{0u}){}
struct CGCMsgMemCachedStatsResponseDefaultTypeInternal {
  constexpr CGCMsgMemCachedStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgMemCachedStatsResponseDefaultTypeInternal() {}
  union {
    CGCMsgMemCachedStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgMemCachedStatsResponseDefaultTypeInternal _CGCMsgMemCachedStatsResponse_default_instance_;
constexpr CGCMsgSQLStats::CGCMsgSQLStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schema_catalog_(0u){}
struct CGCMsgSQLStatsDefaultTypeInternal {
  constexpr CGCMsgSQLStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgSQLStatsDefaultTypeInternal() {}
  union {
    CGCMsgSQLStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgSQLStatsDefaultTypeInternal _CGCMsgSQLStats_default_instance_;
constexpr CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : threads_(0u)
  , threads_connected_(0u)
  , threads_active_(0u)
  , operations_submitted_(0u)
  , prepared_statements_executed_(0u)
  , non_prepared_statements_executed_(0u)
  , deadlock_retries_(0u)
  , operations_timed_out_in_queue_(0u)
  , errors_(0u){}
struct CGCMsgSQLStatsResponseDefaultTypeInternal {
  constexpr CGCMsgSQLStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgSQLStatsResponseDefaultTypeInternal() {}
  union {
    CGCMsgSQLStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgSQLStatsResponseDefaultTypeInternal _CGCMsgSQLStatsResponse_default_instance_;
constexpr CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : store_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , ip_public_(0u)
  , packageid_(0u){}
struct CMsgAMAddFreeLicenseDefaultTypeInternal {
  constexpr CMsgAMAddFreeLicenseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMAddFreeLicenseDefaultTypeInternal() {}
  union {
    CMsgAMAddFreeLicense _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMAddFreeLicenseDefaultTypeInternal _CMsgAMAddFreeLicense_default_instance_;
constexpr CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transid_(uint64_t{0u})
  , purchase_result_detail_(0)
  , eresult_(2){}
struct CMsgAMAddFreeLicenseResponseDefaultTypeInternal {
  constexpr CMsgAMAddFreeLicenseResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMAddFreeLicenseResponseDefaultTypeInternal() {}
  union {
    CMsgAMAddFreeLicenseResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMAddFreeLicenseResponseDefaultTypeInternal _CMsgAMAddFreeLicenseResponse_default_instance_;
constexpr CGCMsgGetIPLocation::CGCMsgGetIPLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ips_(){}
struct CGCMsgGetIPLocationDefaultTypeInternal {
  constexpr CGCMsgGetIPLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGetIPLocationDefaultTypeInternal() {}
  union {
    CGCMsgGetIPLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGetIPLocationDefaultTypeInternal _CGCMsgGetIPLocation_default_instance_;
constexpr CIPLocationInfo::CIPLocationInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , state_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , city_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(0u)
  , latitude_(0)
  , longitude_(0){}
struct CIPLocationInfoDefaultTypeInternal {
  constexpr CIPLocationInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CIPLocationInfoDefaultTypeInternal() {}
  union {
    CIPLocationInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CIPLocationInfoDefaultTypeInternal _CIPLocationInfo_default_instance_;
constexpr CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_(){}
struct CGCMsgGetIPLocationResponseDefaultTypeInternal {
  constexpr CGCMsgGetIPLocationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGetIPLocationResponseDefaultTypeInternal() {}
  union {
    CGCMsgGetIPLocationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGetIPLocationResponseDefaultTypeInternal _CGCMsgGetIPLocationResponse_default_instance_;
constexpr CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : schema_kv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gc_app_id_(0u){}
struct CGCMsgSystemStatsSchemaDefaultTypeInternal {
  constexpr CGCMsgSystemStatsSchemaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgSystemStatsSchemaDefaultTypeInternal() {}
  union {
    CGCMsgSystemStatsSchema _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgSystemStatsSchemaDefaultTypeInternal _CGCMsgSystemStatsSchema_default_instance_;
constexpr CGCMsgGetSystemStats::CGCMsgGetSystemStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CGCMsgGetSystemStatsDefaultTypeInternal {
  constexpr CGCMsgGetSystemStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGetSystemStatsDefaultTypeInternal() {}
  union {
    CGCMsgGetSystemStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGetSystemStatsDefaultTypeInternal _CGCMsgGetSystemStats_default_instance_;
constexpr CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stats_kv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gc_app_id_(0u)
  , active_jobs_(0u)
  , yielding_jobs_(0u)
  , user_sessions_(0u)
  , game_server_sessions_(0u)
  , socaches_(0u)
  , socaches_to_unload_(0u)
  , socaches_loading_(0u)
  , writeback_queue_(0u)
  , steamid_locks_(0u)
  , logon_queue_(0u)
  , logon_jobs_(0u){}
struct CGCMsgGetSystemStatsResponseDefaultTypeInternal {
  constexpr CGCMsgGetSystemStatsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCMsgGetSystemStatsResponseDefaultTypeInternal() {}
  union {
    CGCMsgGetSystemStatsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCMsgGetSystemStatsResponseDefaultTypeInternal _CGCMsgGetSystemStatsResponse_default_instance_;
constexpr CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , token_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal {
  constexpr CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal() {}
  union {
    CMsgAMSendEmail_ReplacementToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMSendEmail_ReplacementTokenDefaultTypeInternal _CMsgAMSendEmail_ReplacementToken_default_instance_;
constexpr CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : token_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal {
  constexpr CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal() {}
  union {
    CMsgAMSendEmail_PersonaNameReplacementToken _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMSendEmail_PersonaNameReplacementTokenDefaultTypeInternal _CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_;
constexpr CMsgAMSendEmail::CMsgAMSendEmail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_tokens_()
  , tokens_()
  , steamid_(uint64_t{0u})
  , email_msg_type_(0u)
  , email_format_(0u)
  , source_gc_(0u){}
struct CMsgAMSendEmailDefaultTypeInternal {
  constexpr CMsgAMSendEmailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMSendEmailDefaultTypeInternal() {}
  union {
    CMsgAMSendEmail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMSendEmailDefaultTypeInternal _CMsgAMSendEmail_default_instance_;
constexpr CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2u){}
struct CMsgAMSendEmailResponseDefaultTypeInternal {
  constexpr CMsgAMSendEmailResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMSendEmailResponseDefaultTypeInternal() {}
  union {
    CMsgAMSendEmailResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMSendEmailResponseDefaultTypeInternal _CMsgAMSendEmailResponse_default_instance_;
constexpr CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(0u)
  , email_msg_type_(0u)
  , email_lang_(0)
  , email_format_(0){}
struct CMsgGCGetEmailTemplateDefaultTypeInternal {
  constexpr CMsgGCGetEmailTemplateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetEmailTemplateDefaultTypeInternal() {}
  union {
    CMsgGCGetEmailTemplate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetEmailTemplateDefaultTypeInternal _CMsgGCGetEmailTemplate_default_instance_;
constexpr CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : template__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , template_exists_(false)
  , eresult_(2u){}
struct CMsgGCGetEmailTemplateResponseDefaultTypeInternal {
  constexpr CMsgGCGetEmailTemplateResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetEmailTemplateResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetEmailTemplateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetEmailTemplateResponseDefaultTypeInternal _CMsgGCGetEmailTemplateResponse_default_instance_;
constexpr CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , package_id_(0u)
  , passes_to_grant_(0)
  , days_to_expiration_(0)
  , action_(0){}
struct CMsgAMGrantGuestPasses2DefaultTypeInternal {
  constexpr CMsgAMGrantGuestPasses2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGrantGuestPasses2DefaultTypeInternal() {}
  union {
    CMsgAMGrantGuestPasses2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGrantGuestPasses2DefaultTypeInternal _CMsgAMGrantGuestPasses2_default_instance_;
constexpr CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : passes_granted_(0)
  , eresult_(2){}
struct CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal {
  constexpr CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal() {}
  union {
    CMsgAMGrantGuestPasses2Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgAMGrantGuestPasses2ResponseDefaultTypeInternal _CMsgAMGrantGuestPasses2Response_default_instance_;
constexpr CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u})
  , appid_(0u){}
struct CGCSystemMsg_GetAccountDetailsDefaultTypeInternal {
  constexpr CGCSystemMsg_GetAccountDetailsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetAccountDetailsDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetAccountDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCSystemMsg_GetAccountDetailsDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_default_instance_;
constexpr CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , txn_country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , is_profile_public_(false)
  , is_inventory_public_(false)
  , is_vac_banned_(false)
  , is_cyber_cafe_(false)
  , is_school_account_(false)
  , is_limited_(false)
  , is_subscribed_(false)
  , is_free_trial_account_(false)
  , package_(0u)
  , free_trial_expiration_(0u)
  , is_low_violence_(false)
  , is_account_locked_down_(false)
  , is_community_banned_(false)
  , is_trade_banned_(false)
  , trade_ban_expiration_(0u)
  , accountid_(0u)
  , suspension_end_time_(0u)
  , steam_level_(0u)
  , friend_count_(0u)
  , account_creation_time_(0u)
  , is_steamguard_enabled_(false)
  , is_phone_verified_(false)
  , is_two_factor_auth_enabled_(false)
  , is_phone_identifying_(false)
  , two_factor_enabled_time_(0u)
  , phone_verification_time_(0u)
  , phone_id_(uint64_t{0u})
  , rt_identity_linked_(0u)
  , rt_birth_date_(0u)
  , has_accepted_china_ssa_(false)
  , is_banned_steam_china_(false)
  , eresult_deprecated_(2u){}
struct CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal {
  constexpr CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetAccountDetails_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCSystemMsg_GetAccountDetails_ResponseDefaultTypeInternal _CGCSystemMsg_GetAccountDetails_Response_default_instance_;
constexpr CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamids_(){}
struct CMsgGCGetPersonaNamesDefaultTypeInternal {
  constexpr CMsgGCGetPersonaNamesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPersonaNamesDefaultTypeInternal() {}
  union {
    CMsgGCGetPersonaNames _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPersonaNamesDefaultTypeInternal _CMsgGCGetPersonaNames_default_instance_;
constexpr CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : persona_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u}){}
struct CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal {
  constexpr CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal() {}
  union {
    CMsgGCGetPersonaNames_Response_PersonaName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPersonaNames_Response_PersonaNameDefaultTypeInternal _CMsgGCGetPersonaNames_Response_PersonaName_default_instance_;
constexpr CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : succeeded_lookups_()
  , failed_lookup_steamids_(){}
struct CMsgGCGetPersonaNames_ResponseDefaultTypeInternal {
  constexpr CMsgGCGetPersonaNames_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPersonaNames_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetPersonaNames_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPersonaNames_ResponseDefaultTypeInternal _CMsgGCGetPersonaNames_Response_default_instance_;
constexpr CMsgGCCheckFriendship::CMsgGCCheckFriendship(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_left_(uint64_t{0u})
  , steamid_right_(uint64_t{0u}){}
struct CMsgGCCheckFriendshipDefaultTypeInternal {
  constexpr CMsgGCCheckFriendshipDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCCheckFriendshipDefaultTypeInternal() {}
  union {
    CMsgGCCheckFriendship _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCCheckFriendshipDefaultTypeInternal _CMsgGCCheckFriendship_default_instance_;
constexpr CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false)
  , found_friendship_(false){}
struct CMsgGCCheckFriendship_ResponseDefaultTypeInternal {
  constexpr CMsgGCCheckFriendship_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCCheckFriendship_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCCheckFriendship_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCCheckFriendship_ResponseDefaultTypeInternal _CMsgGCCheckFriendship_Response_default_instance_;
constexpr CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , box_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_line_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , gc_binary_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dir_index_(0u){}
struct CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetDirectory_SubGC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetDirectory_SubGCDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_SubGC_default_instance_;
constexpr CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dir_()
  , master_dir_index_(0u){}
struct CMsgGCMsgMasterSetDirectoryDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetDirectoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetDirectoryDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetDirectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetDirectoryDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_default_instance_;
constexpr CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , eresult_(2){}
struct CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetDirectory_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetDirectory_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetDirectory_Response_default_instance_;
constexpr CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dir_index_(0u){}
struct CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal {
  constexpr CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgWebAPIJobRequestForwardResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgWebAPIJobRequestForwardResponseDefaultTypeInternal _CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_;
constexpr CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal {
  constexpr CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetPurchaseTrust_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCSystemMsg_GetPurchaseTrust_RequestDefaultTypeInternal _CGCSystemMsg_GetPurchaseTrust_Request_default_instance_;
constexpr CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : has_prior_purchase_history_(false)
  , has_no_recent_password_resets_(false)
  , is_wallet_cash_trusted_(false)
  , time_all_trusted_(0u){}
struct CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal {
  constexpr CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal() {}
  union {
    CGCSystemMsg_GetPurchaseTrust_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CGCSystemMsg_GetPurchaseTrust_ResponseDefaultTypeInternal _CGCSystemMsg_GetPurchaseTrust_Response_default_instance_;
constexpr CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steam_id_(uint64_t{0u})
  , app_id_(0u)
  , rtime_vacban_starts_(0u)
  , is_banned_now_(false)
  , is_banned_future_(false){}
struct CMsgGCHAccountVacStatusChangeDefaultTypeInternal {
  constexpr CMsgGCHAccountVacStatusChangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCHAccountVacStatusChangeDefaultTypeInternal() {}
  union {
    CMsgGCHAccountVacStatusChange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCHAccountVacStatusChangeDefaultTypeInternal _CMsgGCHAccountVacStatusChange_default_instance_;
constexpr CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steamid_(uint64_t{0u}){}
struct CMsgGCGetPartnerAccountLinkDefaultTypeInternal {
  constexpr CMsgGCGetPartnerAccountLinkDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPartnerAccountLinkDefaultTypeInternal() {}
  union {
    CMsgGCGetPartnerAccountLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPartnerAccountLinkDefaultTypeInternal _CMsgGCGetPartnerAccountLink_default_instance_;
constexpr CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pwid_(0u)
  , nexonid_(0u)
  , ageclass_(0)
  , is_adult_(false)
  , id_verified_(true){}
struct CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal {
  constexpr CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCGetPartnerAccountLink_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCGetPartnerAccountLink_ResponseDefaultTypeInternal _CMsgGCGetPartnerAccountLink_Response_default_instance_;
constexpr CMsgGCRoutingInfo::CMsgGCRoutingInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dir_index_()
  , webapi_param_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , method_(0)

  , protobuf_field_(0u)
  , fallback_(1)
{}
struct CMsgGCRoutingInfoDefaultTypeInternal {
  constexpr CMsgGCRoutingInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCRoutingInfoDefaultTypeInternal() {}
  union {
    CMsgGCRoutingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCRoutingInfoDefaultTypeInternal _CMsgGCRoutingInfo_default_instance_;
constexpr CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interface_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , method_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , routing_(nullptr){}
struct CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetWebAPIRouting_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetWebAPIRouting_EntryDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_;
constexpr CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetWebAPIRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetWebAPIRoutingDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_default_instance_;
constexpr CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : routing_(nullptr)
  , msg_type_(0u){}
struct CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetClientMsgRouting_Entry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetClientMsgRouting_EntryDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_;
constexpr CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : entries_(){}
struct CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetClientMsgRouting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetClientMsgRoutingDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_default_instance_;
constexpr CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetWebAPIRouting_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetWebAPIRouting_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_;
constexpr CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eresult_(2){}
struct CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal {
  constexpr CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal() {}
  union {
    CMsgGCMsgMasterSetClientMsgRouting_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgMasterSetClientMsgRouting_ResponseDefaultTypeInternal _CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_;
constexpr CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : low_(0u)
  , high_(0u){}
struct CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal {
  constexpr CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal() {}
  union {
    CMsgGCMsgSetOptions_MessageRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgSetOptions_MessageRangeDefaultTypeInternal _CMsgGCMsgSetOptions_MessageRange_default_instance_;
constexpr CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : options_()
  , client_msg_ranges_(){}
struct CMsgGCMsgSetOptionsDefaultTypeInternal {
  constexpr CMsgGCMsgSetOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCMsgSetOptionsDefaultTypeInternal() {}
  union {
    CMsgGCMsgSetOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCMsgSetOptionsDefaultTypeInternal _CMsgGCMsgSetOptions_default_instance_;
constexpr CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal {
  constexpr CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal() {}
  union {
    CMsgGCHUpdateSession_ExtraField _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCHUpdateSession_ExtraFieldDefaultTypeInternal _CMsgGCHUpdateSession_ExtraField_default_instance_;
constexpr CMsgGCHUpdateSession::CMsgGCHUpdateSession(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : extra_fields_()
  , depot_ids_()
  , steam_id_(uint64_t{0u})
  , app_id_(0u)
  , online_(false)
  , server_steam_id_(uint64_t{0u})
  , server_addr_(0u)
  , server_port_(0u)
  , os_type_(0u)
  , client_addr_(0u)
  , owner_id_(uint64_t{0u})
  , cm_session_sysid_(0u)
  , cm_session_identifier_(0u){}
struct CMsgGCHUpdateSessionDefaultTypeInternal {
  constexpr CMsgGCHUpdateSessionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgGCHUpdateSessionDefaultTypeInternal() {}
  union {
    CMsgGCHUpdateSession _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgGCHUpdateSessionDefaultTypeInternal _CMsgGCHUpdateSession_default_instance_;
constexpr CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : other_steamids_()
  , app_instance_count_(0u){}
struct CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal {
  constexpr CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal() {}
  union {
    CMsgNotificationOfSuspiciousActivity_MultipleGameInstances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNotificationOfSuspiciousActivity_MultipleGameInstancesDefaultTypeInternal _CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_;
constexpr CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multiple_instances_(nullptr)
  , steamid_(uint64_t{0u})
  , appid_(0u){}
struct CMsgNotificationOfSuspiciousActivityDefaultTypeInternal {
  constexpr CMsgNotificationOfSuspiciousActivityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgNotificationOfSuspiciousActivityDefaultTypeInternal() {}
  union {
    CMsgNotificationOfSuspiciousActivity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgNotificationOfSuspiciousActivityDefaultTypeInternal _CMsgNotificationOfSuspiciousActivity_default_instance_;
constexpr CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : country_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , region_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , init_time_(0u)
  , last_update_time_(0u)
  , txn_id_(uint64_t{0u})
  , account_id_(0u)
  , line_item_(0u)
  , item_id_(uint64_t{0u})
  , price_(uint64_t{0u})
  , tax_(uint64_t{0u})
  , def_index_(0u)
  , purchase_type_(0u)
  , price_usd_(uint64_t{0u})
  , tax_usd_(uint64_t{0u})
  , steam_txn_type_(0u)
  , quantity_(0)
  , ref_trans_id_(uint64_t{0u}){}
struct CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal {
  constexpr CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxns_PartnerMicroTxn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDPPartnerMicroTxns_PartnerMicroTxnDefaultTypeInternal _CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_;
constexpr CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : partner_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_code_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , currency_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partner_id_(0u){}
struct CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal {
  constexpr CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxns_PartnerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDPPartnerMicroTxns_PartnerInfoDefaultTypeInternal _CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_;
constexpr CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_()
  , gc_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , partner_(nullptr)
  , appid_(0u){}
struct CMsgDPPartnerMicroTxnsDefaultTypeInternal {
  constexpr CMsgDPPartnerMicroTxnsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxnsDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxns _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDPPartnerMicroTxnsDefaultTypeInternal _CMsgDPPartnerMicroTxns_default_instance_;
constexpr CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : eerrorcode_(0)

  , eresult_(2u){}
struct CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal {
  constexpr CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal() {}
  union {
    CMsgDPPartnerMicroTxnsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CMsgDPPartnerMicroTxnsResponseDefaultTypeInternal _CMsgDPPartnerMicroTxnsResponse_default_instance_;
constexpr CChinaAgreementSessions_StartAgreementSessionInGame_Request::CChinaAgreementSessions_StartAgreementSessionInGame_Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_ipaddress_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , steamid_(uint64_t{0u})
  , appid_(0u){}
struct CChinaAgreementSessions_StartAgreementSessionInGame_RequestDefaultTypeInternal {
  constexpr CChinaAgreementSessions_StartAgreementSessionInGame_RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChinaAgreementSessions_StartAgreementSessionInGame_RequestDefaultTypeInternal() {}
  union {
    CChinaAgreementSessions_StartAgreementSessionInGame_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChinaAgreementSessions_StartAgreementSessionInGame_RequestDefaultTypeInternal _CChinaAgreementSessions_StartAgreementSessionInGame_Request_default_instance_;
constexpr CChinaAgreementSessions_StartAgreementSessionInGame_Response::CChinaAgreementSessions_StartAgreementSessionInGame_Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agreement_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CChinaAgreementSessions_StartAgreementSessionInGame_ResponseDefaultTypeInternal {
  constexpr CChinaAgreementSessions_StartAgreementSessionInGame_ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CChinaAgreementSessions_StartAgreementSessionInGame_ResponseDefaultTypeInternal() {}
  union {
    CChinaAgreementSessions_StartAgreementSessionInGame_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CChinaAgreementSessions_StartAgreementSessionInGame_ResponseDefaultTypeInternal _CChinaAgreementSessions_StartAgreementSessionInGame_Response_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steammessages_2eproto[81];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steammessages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steammessages_2eproto = nullptr;

const uint32_t TableStruct_steammessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, client_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, client_session_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, source_app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, job_id_source_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, job_id_target_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, target_job_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, error_message_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, ip_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, gc_msg_src_),
  PROTOBUF_FIELD_OFFSET(::CMsgProtoBufHeader, gc_dir_index_source_),
  2,
  3,
  4,
  9,
  10,
  0,
  8,
  1,
  6,
  7,
  5,
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, status_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, publisher_group_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, key_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIKey, domain_),
  4,
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_RequestHeader, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest_QueryParam, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, request_method_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, hostname_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, url_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, headers_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, get_params_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, post_params_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, body_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpRequest, absolute_timeout_),
  3,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  2,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, unused_job_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, interface_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, method_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, version_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, api_key_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, request_),
  PROTOBUF_FIELD_OFFSET(::CMsgWebAPIRequest, routing_app_id_),
  0,
  1,
  2,
  5,
  3,
  4,
  6,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse_ResponseHeader, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, status_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, headers_),
  PROTOBUF_FIELD_OFFSET(::CMsgHttpResponse, body_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, search_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccounts, search_string_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMFindAccountsResponse, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, source_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, alert_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, alert_destination_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, critical_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, time_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotifyWatchdog, text_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicenses, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicenses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicenses, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, package_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgPackageLicense, owner_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, license_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetLicensesResponse, result_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStats, stats_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, stat_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Stats, stat_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_bit_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks, unlock_time_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, game_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, stats_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGetUserGameStatsResponse, achievement_blocks_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandList, command_prefix_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetCommandListResponse, command_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGet, keys_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, found_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse_ValueTag, value_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedGetResponse, values_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, name_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet_KeyPair, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedSet, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedDelete, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedDelete, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, curr_connections_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, cmd_get_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, cmd_set_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, cmd_flush_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, get_hits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, get_misses_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, delete_hits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, delete_misses_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, bytes_read_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, bytes_written_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, limit_maxbytes_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, curr_items_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, evictions_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgMemCachedStatsResponse, bytes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStats, schema_catalog_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, threads_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, threads_connected_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, threads_active_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, operations_submitted_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, prepared_statements_executed_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, non_prepared_statements_executed_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, deadlock_retries_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, operations_timed_out_in_queue_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSQLStatsResponse, errors_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, ip_public_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, packageid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicense, store_country_code_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, purchase_result_detail_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMAddFreeLicenseResponse, transid_),
  2,
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocation, ips_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, latitude_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, longitude_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, country_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, state_),
  PROTOBUF_FIELD_OFFSET(::CIPLocationInfo, city_),
  3,
  4,
  5,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetIPLocationResponse, infos_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, gc_app_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgSystemStatsSchema, schema_kv_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, gc_app_id_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, stats_kv_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, active_jobs_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, yielding_jobs_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, user_sessions_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, game_server_sessions_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, socaches_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, socaches_to_unload_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, socaches_loading_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, writeback_queue_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, steamid_locks_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, logon_queue_),
  PROTOBUF_FIELD_OFFSET(::CGCMsgGetSystemStatsResponse, logon_jobs_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, token_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_ReplacementToken, token_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail_PersonaNameReplacementToken, token_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, email_msg_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, email_format_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, persona_name_tokens_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, source_gc_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmail, tokens_),
  0,
  1,
  2,
  ~0u,
  3,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmailResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmailResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMSendEmailResponse, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, email_msg_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, email_lang_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplate, email_format_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, template_exists_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetEmailTemplateResponse, template__),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, package_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, passes_to_grant_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, days_to_expiration_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2, action_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgAMGrantGuestPasses2Response, passes_granted_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, steamid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails, appid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, eresult_deprecated_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, account_name_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, persona_name_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_profile_public_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_inventory_public_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_vac_banned_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_cyber_cafe_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_school_account_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_limited_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_subscribed_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, package_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_free_trial_account_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, free_trial_expiration_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_low_violence_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_account_locked_down_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_community_banned_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_trade_banned_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, trade_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, accountid_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, suspension_end_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, currency_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, steam_level_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, friend_count_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, account_creation_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_steamguard_enabled_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_phone_verified_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_two_factor_auth_enabled_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, two_factor_enabled_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, phone_verification_time_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, phone_id_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_phone_identifying_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, rt_identity_linked_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, rt_birth_date_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, txn_country_code_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, has_accepted_china_ssa_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetAccountDetails_Response, is_banned_steam_china_),
  35,
  0,
  1,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  12,
  11,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  2,
  21,
  22,
  23,
  24,
  25,
  26,
  28,
  29,
  30,
  27,
  31,
  32,
  3,
  33,
  34,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames, steamids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response_PersonaName, persona_name_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response, succeeded_lookups_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPersonaNames_Response, failed_lookup_steamids_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, steamid_left_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship, steamid_right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, success_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCCheckFriendship_Response, found_friendship_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, dir_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, box_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, command_line_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_SubGC, gc_binary_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, master_dir_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory, dir_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetDirectory_Response, message_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgWebAPIJobRequestForwardResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgWebAPIJobRequestForwardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgWebAPIJobRequestForwardResponse, dir_index_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Request, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, has_prior_purchase_history_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, has_no_recent_password_resets_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, is_wallet_cash_trusted_),
  PROTOBUF_FIELD_OFFSET(::CGCSystemMsg_GetPurchaseTrust_Response, time_all_trusted_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, rtime_vacban_starts_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, is_banned_now_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHAccountVacStatusChange, is_banned_future_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink, steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, pwid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, nexonid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, ageclass_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, id_verified_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCGetPartnerAccountLink_Response, is_adult_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, dir_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, method_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, fallback_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, protobuf_field_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCRoutingInfo, webapi_param_),
  ~0u,
  1,
  3,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, interface_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, method_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Entry, routing_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting, entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, msg_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Entry, routing_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting, entries_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetWebAPIRouting_Response, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgMasterSetClientMsgRouting_Response, eresult_),
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, low_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions_MessageRange, high_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, options_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCMsgSetOptions, client_msg_ranges_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, name_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession_ExtraField, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, app_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, online_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, server_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, server_port_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, os_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, client_addr_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, extra_fields_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, owner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, cm_session_sysid_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, cm_session_identifier_),
  PROTOBUF_FIELD_OFFSET(::CMsgGCHUpdateSession, depot_ids_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  8,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, app_instance_count_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances, other_steamids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, steamid_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgNotificationOfSuspiciousActivity, multiple_instances_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, init_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, last_update_time_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, txn_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, account_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, line_item_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, item_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, def_index_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, price_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, tax_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, price_usd_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, tax_usd_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, purchase_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, steam_txn_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, country_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, region_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, quantity_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerMicroTxn, ref_trans_id_),
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  8,
  9,
  12,
  13,
  11,
  14,
  0,
  1,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, partner_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, partner_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, currency_code_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns_PartnerInfo, currency_name_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, appid_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, gc_name_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, partner_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxns, transactions_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, eresult_),
  PROTOBUF_FIELD_OFFSET(::CMsgDPPartnerMicroTxnsResponse, eerrorcode_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Request, appid_),
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Request, steamid_),
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Request, client_ipaddress_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CChinaAgreementSessions_StartAgreementSessionInGame_Response, agreement_url_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 17, -1, sizeof(::CMsgProtoBufHeader)},
  { 28, 39, -1, sizeof(::CMsgWebAPIKey)},
  { 44, 52, -1, sizeof(::CMsgHttpRequest_RequestHeader)},
  { 54, 62, -1, sizeof(::CMsgHttpRequest_QueryParam)},
  { 64, 78, -1, sizeof(::CMsgHttpRequest)},
  { 86, 99, -1, sizeof(::CMsgWebAPIRequest)},
  { 106, 114, -1, sizeof(::CMsgHttpResponse_ResponseHeader)},
  { 116, 125, -1, sizeof(::CMsgHttpResponse)},
  { 128, 136, -1, sizeof(::CMsgAMFindAccounts)},
  { 138, -1, -1, sizeof(::CMsgAMFindAccountsResponse)},
  { 145, 158, -1, sizeof(::CMsgNotifyWatchdog)},
  { 165, 172, -1, sizeof(::CMsgAMGetLicenses)},
  { 173, 182, -1, sizeof(::CMsgPackageLicense)},
  { 185, 193, -1, sizeof(::CMsgAMGetLicensesResponse)},
  { 195, 204, -1, sizeof(::CMsgAMGetUserGameStats)},
  { 207, 215, -1, sizeof(::CMsgAMGetUserGameStatsResponse_Stats)},
  { 217, 226, -1, sizeof(::CMsgAMGetUserGameStatsResponse_Achievement_Blocks)},
  { 229, 240, -1, sizeof(::CMsgAMGetUserGameStatsResponse)},
  { 245, 253, -1, sizeof(::CMsgGCGetCommandList)},
  { 255, -1, -1, sizeof(::CMsgGCGetCommandListResponse)},
  { 262, -1, -1, sizeof(::CGCMsgMemCachedGet)},
  { 269, 277, -1, sizeof(::CGCMsgMemCachedGetResponse_ValueTag)},
  { 279, -1, -1, sizeof(::CGCMsgMemCachedGetResponse)},
  { 286, 294, -1, sizeof(::CGCMsgMemCachedSet_KeyPair)},
  { 296, -1, -1, sizeof(::CGCMsgMemCachedSet)},
  { 303, -1, -1, sizeof(::CGCMsgMemCachedDelete)},
  { 310, -1, -1, sizeof(::CGCMsgMemCachedStats)},
  { 316, 336, -1, sizeof(::CGCMsgMemCachedStatsResponse)},
  { 350, 357, -1, sizeof(::CGCMsgSQLStats)},
  { 358, 373, -1, sizeof(::CGCMsgSQLStatsResponse)},
  { 382, 392, -1, sizeof(::CMsgAMAddFreeLicense)},
  { 396, 405, -1, sizeof(::CMsgAMAddFreeLicenseResponse)},
  { 408, -1, -1, sizeof(::CGCMsgGetIPLocation)},
  { 415, 427, -1, sizeof(::CIPLocationInfo)},
  { 433, -1, -1, sizeof(::CGCMsgGetIPLocationResponse)},
  { 440, 448, -1, sizeof(::CGCMsgSystemStatsSchema)},
  { 450, -1, -1, sizeof(::CGCMsgGetSystemStats)},
  { 456, 475, -1, sizeof(::CGCMsgGetSystemStatsResponse)},
  { 488, 496, -1, sizeof(::CMsgAMSendEmail_ReplacementToken)},
  { 498, 506, -1, sizeof(::CMsgAMSendEmail_PersonaNameReplacementToken)},
  { 508, 520, -1, sizeof(::CMsgAMSendEmail)},
  { 526, 533, -1, sizeof(::CMsgAMSendEmailResponse)},
  { 534, 544, -1, sizeof(::CMsgGCGetEmailTemplate)},
  { 548, 557, -1, sizeof(::CMsgGCGetEmailTemplateResponse)},
  { 560, 571, -1, sizeof(::CMsgAMGrantGuestPasses2)},
  { 576, 584, -1, sizeof(::CMsgAMGrantGuestPasses2Response)},
  { 586, 594, -1, sizeof(::CGCSystemMsg_GetAccountDetails)},
  { 596, 638, -1, sizeof(::CGCSystemMsg_GetAccountDetails_Response)},
  { 674, -1, -1, sizeof(::CMsgGCGetPersonaNames)},
  { 681, 689, -1, sizeof(::CMsgGCGetPersonaNames_Response_PersonaName)},
  { 691, -1, -1, sizeof(::CMsgGCGetPersonaNames_Response)},
  { 699, 707, -1, sizeof(::CMsgGCCheckFriendship)},
  { 709, 717, -1, sizeof(::CMsgGCCheckFriendship_Response)},
  { 719, 730, -1, sizeof(::CMsgGCMsgMasterSetDirectory_SubGC)},
  { 735, 743, -1, sizeof(::CMsgGCMsgMasterSetDirectory)},
  { 745, 753, -1, sizeof(::CMsgGCMsgMasterSetDirectory_Response)},
  { 755, 762, -1, sizeof(::CMsgGCMsgWebAPIJobRequestForwardResponse)},
  { 763, 770, -1, sizeof(::CGCSystemMsg_GetPurchaseTrust_Request)},
  { 771, 781, -1, sizeof(::CGCSystemMsg_GetPurchaseTrust_Response)},
  { 785, 796, -1, sizeof(::CMsgGCHAccountVacStatusChange)},
  { 801, 808, -1, sizeof(::CMsgGCGetPartnerAccountLink)},
  { 809, 820, -1, sizeof(::CMsgGCGetPartnerAccountLink_Response)},
  { 825, 836, -1, sizeof(::CMsgGCRoutingInfo)},
  { 841, 850, -1, sizeof(::CMsgGCMsgMasterSetWebAPIRouting_Entry)},
  { 853, -1, -1, sizeof(::CMsgGCMsgMasterSetWebAPIRouting)},
  { 860, 868, -1, sizeof(::CMsgGCMsgMasterSetClientMsgRouting_Entry)},
  { 870, -1, -1, sizeof(::CMsgGCMsgMasterSetClientMsgRouting)},
  { 877, 884, -1, sizeof(::CMsgGCMsgMasterSetWebAPIRouting_Response)},
  { 885, 892, -1, sizeof(::CMsgGCMsgMasterSetClientMsgRouting_Response)},
  { 893, 901, -1, sizeof(::CMsgGCMsgSetOptions_MessageRange)},
  { 903, -1, -1, sizeof(::CMsgGCMsgSetOptions)},
  { 911, 919, -1, sizeof(::CMsgGCHUpdateSession_ExtraField)},
  { 921, 940, -1, sizeof(::CMsgGCHUpdateSession)},
  { 953, 961, -1, sizeof(::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances)},
  { 963, 972, -1, sizeof(::CMsgNotificationOfSuspiciousActivity)},
  { 975, 998, -1, sizeof(::CMsgDPPartnerMicroTxns_PartnerMicroTxn)},
  { 1015, 1025, -1, sizeof(::CMsgDPPartnerMicroTxns_PartnerInfo)},
  { 1029, 1039, -1, sizeof(::CMsgDPPartnerMicroTxns)},
  { 1043, 1051, -1, sizeof(::CMsgDPPartnerMicroTxnsResponse)},
  { 1053, 1062, -1, sizeof(::CChinaAgreementSessions_StartAgreementSessionInGame_Request)},
  { 1065, 1072, -1, sizeof(::CChinaAgreementSessions_StartAgreementSessionInGame_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgProtoBufHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWebAPIKey_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHttpRequest_RequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHttpRequest_QueryParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHttpRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgWebAPIRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHttpResponse_ResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgHttpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMFindAccounts_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMFindAccountsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNotifyWatchdog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGetLicenses_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgPackageLicense_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGetLicensesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGetUserGameStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGetUserGameStatsResponse_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGetUserGameStatsResponse_Achievement_Blocks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGetUserGameStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetCommandList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetCommandListResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedGet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedGetResponse_ValueTag_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedGetResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedSet_KeyPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedDelete_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgMemCachedStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgSQLStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgSQLStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMAddFreeLicense_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMAddFreeLicenseResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGetIPLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CIPLocationInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGetIPLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgSystemStatsSchema_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGetSystemStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCMsgGetSystemStatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMSendEmail_ReplacementToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMSendEmail_PersonaNameReplacementToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMSendEmail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMSendEmailResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetEmailTemplate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetEmailTemplateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGrantGuestPasses2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgAMGrantGuestPasses2Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCSystemMsg_GetAccountDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCSystemMsg_GetAccountDetails_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPersonaNames_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPersonaNames_Response_PersonaName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPersonaNames_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCheckFriendship_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCCheckFriendship_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetDirectory_SubGC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetDirectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetDirectory_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgWebAPIJobRequestForwardResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCSystemMsg_GetPurchaseTrust_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CGCSystemMsg_GetPurchaseTrust_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCHAccountVacStatusChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPartnerAccountLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCGetPartnerAccountLink_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCRoutingInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetWebAPIRouting_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetWebAPIRouting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetClientMsgRouting_Entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetClientMsgRouting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetWebAPIRouting_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgMasterSetClientMsgRouting_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgSetOptions_MessageRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCMsgSetOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCHUpdateSession_ExtraField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgGCHUpdateSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNotificationOfSuspiciousActivity_MultipleGameInstances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgNotificationOfSuspiciousActivity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDPPartnerMicroTxns_PartnerMicroTxn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDPPartnerMicroTxns_PartnerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDPPartnerMicroTxns_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgDPPartnerMicroTxnsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChinaAgreementSessions_StartAgreementSessionInGame_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CChinaAgreementSessions_StartAgreementSessionInGame_Response_default_instance_),
};

const char descriptor_table_protodef_steammessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023steammessages.proto\032 google/protobuf/d"
  "escriptor.proto\"\371\002\n\022CMsgProtoBufHeader\022\027"
  "\n\017client_steam_id\030\001 \001(\006\022\031\n\021client_sessio"
  "n_id\030\002 \001(\005\022\025\n\rsource_app_id\030\003 \001(\r\022+\n\rjob"
  "_id_source\030\n \001(\006:\02418446744073709551615\022+"
  "\n\rjob_id_target\030\013 \001(\006:\02418446744073709551"
  "615\022\027\n\017target_job_name\030\014 \001(\t\022\022\n\007eresult\030"
  "\r \001(\005:\0012\022\025\n\rerror_message\030\016 \001(\t\022\n\n\002ip\030\017 "
  "\001(\r\022D\n\ngc_msg_src\030\310\001 \001(\0162\021.GCProtoBufMsg"
  "Src:\034GCProtoBufMsgSrc_Unspecified\022\034\n\023gc_"
  "dir_index_source\030\311\001 \001(\r:\n\200\246\035\200\002\210\246\035\200\010\"z\n\rC"
  "MsgWebAPIKey\022\023\n\006status\030\001 \001(\r:\003255\022\025\n\nacc"
  "ount_id\030\002 \001(\r:\0010\022\035\n\022publisher_group_id\030\003"
  " \001(\r:\0010\022\016\n\006key_id\030\004 \001(\r\022\016\n\006domain\030\005 \001(\t\""
  "\335\002\n\017CMsgHttpRequest\022\026\n\016request_method\030\001 "
  "\001(\r\022\020\n\010hostname\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022/\n\007he"
  "aders\030\004 \003(\0132\036.CMsgHttpRequest.RequestHea"
  "der\022/\n\nget_params\030\005 \003(\0132\033.CMsgHttpReques"
  "t.QueryParam\0220\n\013post_params\030\006 \003(\0132\033.CMsg"
  "HttpRequest.QueryParam\022\014\n\004body\030\007 \001(\014\022\030\n\020"
  "absolute_timeout\030\010 \001(\r\032,\n\rRequestHeader\022"
  "\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\032)\n\nQueryPar"
  "am\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"\306\001\n\021CMsg"
  "WebAPIRequest\022\027\n\017UNUSED_job_name\030\001 \001(\t\022\026"
  "\n\016interface_name\030\002 \001(\t\022\023\n\013method_name\030\003 "
  "\001(\t\022\017\n\007version\030\004 \001(\r\022\037\n\007api_key\030\005 \001(\0132\016."
  "CMsgWebAPIKey\022!\n\007request\030\006 \001(\0132\020.CMsgHtt"
  "pRequest\022\026\n\016routing_app_id\030\007 \001(\r\"\227\001\n\020CMs"
  "gHttpResponse\022\023\n\013status_code\030\001 \001(\r\0221\n\007he"
  "aders\030\002 \003(\0132 .CMsgHttpResponse.ResponseH"
  "eader\022\014\n\004body\030\003 \001(\014\032-\n\016ResponseHeader\022\014\n"
  "\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022CMsgAMFind"
  "Accounts\022\023\n\013search_type\030\001 \001(\r\022\025\n\rsearch_"
  "string\030\002 \001(\t\".\n\032CMsgAMFindAccountsRespon"
  "se\022\020\n\010steam_id\030\001 \003(\006\"\220\001\n\022CMsgNotifyWatch"
  "dog\022\016\n\006source\030\001 \001(\r\022\022\n\nalert_type\030\002 \001(\r\022"
  "\031\n\021alert_destination\030\003 \001(\r\022\020\n\010critical\030\004"
  " \001(\010\022\014\n\004time\030\005 \001(\r\022\r\n\005appid\030\006 \001(\r\022\014\n\004tex"
  "t\030\007 \001(\t\"$\n\021CMsgAMGetLicenses\022\017\n\007steamid\030"
  "\001 \001(\006\"P\n\022CMsgPackageLicense\022\022\n\npackage_i"
  "d\030\001 \001(\r\022\024\n\014time_created\030\002 \001(\r\022\020\n\010owner_i"
  "d\030\003 \001(\r\"Q\n\031CMsgAMGetLicensesResponse\022$\n\007"
  "license\030\001 \003(\0132\023.CMsgPackageLicense\022\016\n\006re"
  "sult\030\002 \001(\r\"J\n\026CMsgAMGetUserGameStats\022\020\n\010"
  "steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\r\n\005stats"
  "\030\003 \003(\r\"\352\002\n\036CMsgAMGetUserGameStatsRespons"
  "e\022\020\n\010steam_id\030\001 \001(\006\022\017\n\007game_id\030\002 \001(\006\022\022\n\007"
  "eresult\030\003 \001(\005:\0012\0224\n\005stats\030\004 \003(\0132%.CMsgAM"
  "GetUserGameStatsResponse.Stats\022N\n\022achiev"
  "ement_blocks\030\005 \003(\01322.CMsgAMGetUserGameSt"
  "atsResponse.Achievement_Blocks\032,\n\005Stats\022"
  "\017\n\007stat_id\030\001 \001(\r\022\022\n\nstat_value\030\002 \001(\r\032]\n\022"
  "Achievement_Blocks\022\026\n\016achievement_id\030\001 \001"
  "(\r\022\032\n\022achievement_bit_id\030\002 \001(\r\022\023\n\013unlock"
  "_time\030\003 \001(\007\">\n\024CMsgGCGetCommandList\022\016\n\006a"
  "pp_id\030\001 \001(\r\022\026\n\016command_prefix\030\002 \001(\t\"4\n\034C"
  "MsgGCGetCommandListResponse\022\024\n\014command_n"
  "ame\030\001 \003(\t\"\"\n\022CGCMsgMemCachedGet\022\014\n\004keys\030"
  "\001 \003(\t\"|\n\032CGCMsgMemCachedGetResponse\0224\n\006v"
  "alues\030\001 \003(\0132$.CGCMsgMemCachedGetResponse"
  ".ValueTag\032(\n\010ValueTag\022\r\n\005found\030\001 \001(\010\022\r\n\005"
  "value\030\002 \001(\014\"g\n\022CGCMsgMemCachedSet\022)\n\004key"
  "s\030\001 \003(\0132\033.CGCMsgMemCachedSet.KeyPair\032&\n\007"
  "KeyPair\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"%\n\025"
  "CGCMsgMemCachedDelete\022\014\n\004keys\030\001 \003(\t\"\026\n\024C"
  "GCMsgMemCachedStats\"\270\002\n\034CGCMsgMemCachedS"
  "tatsResponse\022\030\n\020curr_connections\030\001 \001(\004\022\017"
  "\n\007cmd_get\030\002 \001(\004\022\017\n\007cmd_set\030\003 \001(\004\022\021\n\tcmd_"
  "flush\030\004 \001(\004\022\020\n\010get_hits\030\005 \001(\004\022\022\n\nget_mis"
  "ses\030\006 \001(\004\022\023\n\013delete_hits\030\007 \001(\004\022\025\n\rdelete"
  "_misses\030\010 \001(\004\022\022\n\nbytes_read\030\t \001(\004\022\025\n\rbyt"
  "es_written\030\n \001(\004\022\026\n\016limit_maxbytes\030\013 \001(\004"
  "\022\022\n\ncurr_items\030\014 \001(\004\022\021\n\tevictions\030\r \001(\004\022"
  "\r\n\005bytes\030\016 \001(\004\"(\n\016CGCMsgSQLStats\022\026\n\016sche"
  "ma_catalog\030\001 \001(\r\"\233\002\n\026CGCMsgSQLStatsRespo"
  "nse\022\017\n\007threads\030\001 \001(\r\022\031\n\021threads_connecte"
  "d\030\002 \001(\r\022\026\n\016threads_active\030\003 \001(\r\022\034\n\024opera"
  "tions_submitted\030\004 \001(\r\022$\n\034prepared_statem"
  "ents_executed\030\005 \001(\r\022(\n non_prepared_stat"
  "ements_executed\030\006 \001(\r\022\030\n\020deadlock_retrie"
  "s\030\007 \001(\r\022%\n\035operations_timed_out_in_queue"
  "\030\010 \001(\r\022\016\n\006errors\030\t \001(\r\"i\n\024CMsgAMAddFreeL"
  "icense\022\017\n\007steamid\030\001 \001(\006\022\021\n\tip_public\030\002 \001"
  "(\r\022\021\n\tpackageid\030\003 \001(\r\022\032\n\022store_country_c"
  "ode\030\004 \001(\t\"c\n\034CMsgAMAddFreeLicenseRespons"
  "e\022\022\n\007eresult\030\001 \001(\005:\0012\022\036\n\026purchase_result"
  "_detail\030\002 \001(\005\022\017\n\007transid\030\003 \001(\006\"\"\n\023CGCMsg"
  "GetIPLocation\022\013\n\003ips\030\001 \003(\007\"p\n\017CIPLocatio"
  "nInfo\022\n\n\002ip\030\001 \001(\r\022\020\n\010latitude\030\002 \001(\002\022\021\n\tl"
  "ongitude\030\003 \001(\002\022\017\n\007country\030\004 \001(\t\022\r\n\005state"
  "\030\005 \001(\t\022\014\n\004city\030\006 \001(\t\">\n\033CGCMsgGetIPLocat"
  "ionResponse\022\037\n\005infos\030\001 \003(\0132\020.CIPLocation"
  "Info\"\?\n\027CGCMsgSystemStatsSchema\022\021\n\tgc_ap"
  "p_id\030\001 \001(\r\022\021\n\tschema_kv\030\002 \001(\014\"\026\n\024CGCMsgG"
  "etSystemStats\"\305\002\n\034CGCMsgGetSystemStatsRe"
  "sponse\022\021\n\tgc_app_id\030\001 \001(\r\022\020\n\010stats_kv\030\002 "
  "\001(\014\022\023\n\013active_jobs\030\003 \001(\r\022\025\n\ryielding_job"
  "s\030\004 \001(\r\022\025\n\ruser_sessions\030\005 \001(\r\022\034\n\024game_s"
  "erver_sessions\030\006 \001(\r\022\020\n\010socaches\030\007 \001(\r\022\032"
  "\n\022socaches_to_unload\030\010 \001(\r\022\030\n\020socaches_l"
  "oading\030\t \001(\r\022\027\n\017writeback_queue\030\n \001(\r\022\025\n"
  "\rsteamid_locks\030\013 \001(\r\022\023\n\013logon_queue\030\014 \001("
  "\r\022\022\n\nlogon_jobs\030\r \001(\r\"\342\002\n\017CMsgAMSendEmai"
  "l\022\017\n\007steamid\030\001 \001(\006\022\026\n\016email_msg_type\030\002 \001"
  "(\r\022\024\n\014email_format\030\003 \001(\r\022I\n\023persona_name"
  "_tokens\030\005 \003(\0132,.CMsgAMSendEmail.PersonaN"
  "ameReplacementToken\022\021\n\tsource_gc\030\006 \001(\r\0221"
  "\n\006tokens\030\007 \003(\0132!.CMsgAMSendEmail.Replace"
  "mentToken\032;\n\020ReplacementToken\022\022\n\ntoken_n"
  "ame\030\001 \001(\t\022\023\n\013token_value\030\002 \001(\t\032B\n\033Person"
  "aNameReplacementToken\022\017\n\007steamid\030\001 \001(\006\022\022"
  "\n\ntoken_name\030\002 \001(\t\"-\n\027CMsgAMSendEmailRes"
  "ponse\022\022\n\007eresult\030\001 \001(\r:\0012\"j\n\026CMsgGCGetEm"
  "ailTemplate\022\016\n\006app_id\030\001 \001(\r\022\026\n\016email_msg"
  "_type\030\002 \001(\r\022\022\n\nemail_lang\030\003 \001(\005\022\024\n\014email"
  "_format\030\004 \001(\005\"_\n\036CMsgGCGetEmailTemplateR"
  "esponse\022\022\n\007eresult\030\001 \001(\r:\0012\022\027\n\017template_"
  "exists\030\002 \001(\010\022\020\n\010template\030\003 \001(\t\"\204\001\n\027CMsgA"
  "MGrantGuestPasses2\022\020\n\010steam_id\030\001 \001(\006\022\022\n\n"
  "package_id\030\002 \001(\r\022\027\n\017passes_to_grant\030\003 \001("
  "\005\022\032\n\022days_to_expiration\030\004 \001(\005\022\016\n\006action\030"
  "\005 \001(\005\"P\n\037CMsgAMGrantGuestPasses2Response"
  "\022\022\n\007eresult\030\001 \001(\005:\0012\022\031\n\016passes_granted\030\002"
  " \001(\005:\0010\"L\n\036CGCSystemMsg_GetAccountDetail"
  "s\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r:\n\200\246\035\200\001"
  "\210\246\035\200\004\"\360\007\n\'CGCSystemMsg_GetAccountDetails"
  "_Response\022\035\n\022eresult_deprecated\030\001 \001(\r:\0012"
  "\022\024\n\014account_name\030\002 \001(\t\022\024\n\014persona_name\030\003"
  " \001(\t\022\031\n\021is_profile_public\030\004 \001(\010\022\033\n\023is_in"
  "ventory_public\030\005 \001(\010\022\025\n\ris_vac_banned\030\007 "
  "\001(\010\022\025\n\ris_cyber_cafe\030\010 \001(\010\022\031\n\021is_school_"
  "account\030\t \001(\010\022\022\n\nis_limited\030\n \001(\010\022\025\n\ris_"
  "subscribed\030\013 \001(\010\022\017\n\007package\030\014 \001(\r\022\035\n\025is_"
  "free_trial_account\030\r \001(\010\022\035\n\025free_trial_e"
  "xpiration\030\016 \001(\r\022\027\n\017is_low_violence\030\017 \001(\010"
  "\022\036\n\026is_account_locked_down\030\020 \001(\010\022\033\n\023is_c"
  "ommunity_banned\030\021 \001(\010\022\027\n\017is_trade_banned"
  "\030\022 \001(\010\022\034\n\024trade_ban_expiration\030\023 \001(\r\022\021\n\t"
  "accountid\030\024 \001(\r\022\033\n\023suspension_end_time\030\025"
  " \001(\r\022\020\n\010currency\030\026 \001(\t\022\023\n\013steam_level\030\027 "
  "\001(\r\022\024\n\014friend_count\030\030 \001(\r\022\035\n\025account_cre"
  "ation_time\030\031 \001(\r\022\035\n\025is_steamguard_enable"
  "d\030\033 \001(\010\022\031\n\021is_phone_verified\030\034 \001(\010\022\"\n\032is"
  "_two_factor_auth_enabled\030\035 \001(\010\022\037\n\027two_fa"
  "ctor_enabled_time\030\036 \001(\r\022\037\n\027phone_verific"
  "ation_time\030\037 \001(\r\022\020\n\010phone_id\030! \001(\004\022\034\n\024is"
  "_phone_identifying\030\" \001(\010\022\032\n\022rt_identity_"
  "linked\030# \001(\r\022\025\n\rrt_birth_date\030$ \001(\r\022\030\n\020t"
  "xn_country_code\030% \001(\t\022\036\n\026has_accepted_ch"
  "ina_ssa\030& \001(\010\022\035\n\025is_banned_steam_china\030\'"
  " \001(\010:\n\200\246\035\200\001\210\246\035\200\004\")\n\025CMsgGCGetPersonaName"
  "s\022\020\n\010steamids\030\001 \003(\006\"\276\001\n\036CMsgGCGetPersona"
  "Names_Response\022F\n\021succeeded_lookups\030\001 \003("
  "\0132+.CMsgGCGetPersonaNames_Response.Perso"
  "naName\022\036\n\026failed_lookup_steamids\030\002 \003(\006\0324"
  "\n\013PersonaName\022\017\n\007steamid\030\001 \001(\006\022\024\n\014person"
  "a_name\030\002 \001(\t\"D\n\025CMsgGCCheckFriendship\022\024\n"
  "\014steamid_left\030\001 \001(\006\022\025\n\rsteamid_right\030\002 \001"
  "(\006\"K\n\036CMsgGCCheckFriendship_Response\022\017\n\007"
  "success\030\001 \001(\010\022\030\n\020found_friendship\030\002 \001(\010\""
  "\310\001\n\033CMsgGCMsgMasterSetDirectory\022\030\n\020maste"
  "r_dir_index\030\001 \001(\r\022/\n\003dir\030\002 \003(\0132\".CMsgGCM"
  "sgMasterSetDirectory.SubGC\032^\n\005SubGC\022\021\n\td"
  "ir_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003box\030\003 \001("
  "\t\022\024\n\014command_line\030\004 \001(\t\022\021\n\tgc_binary\030\005 \001"
  "(\t\"K\n$CMsgGCMsgMasterSetDirectory_Respon"
  "se\022\022\n\007eresult\030\001 \001(\005:\0012\022\017\n\007message\030\002 \001(\t\""
  "=\n(CMsgGCMsgWebAPIJobRequestForwardRespo"
  "nse\022\021\n\tdir_index\030\001 \001(\r\"8\n%CGCSystemMsg_G"
  "etPurchaseTrust_Request\022\017\n\007steamid\030\001 \001(\006"
  "\"\255\001\n&CGCSystemMsg_GetPurchaseTrust_Respo"
  "nse\022\"\n\032has_prior_purchase_history\030\001 \001(\010\022"
  "%\n\035has_no_recent_password_resets\030\002 \001(\010\022\036"
  "\n\026is_wallet_cash_trusted\030\003 \001(\010\022\030\n\020time_a"
  "ll_trusted\030\004 \001(\r\"\217\001\n\035CMsgGCHAccountVacSt"
  "atusChange\022\020\n\010steam_id\030\001 \001(\006\022\016\n\006app_id\030\002"
  " \001(\r\022\033\n\023rtime_vacban_starts\030\003 \001(\r\022\025\n\ris_"
  "banned_now\030\004 \001(\010\022\030\n\020is_banned_future\030\005 \001"
  "(\010\".\n\033CMsgGCGetPartnerAccountLink\022\017\n\007ste"
  "amid\030\001 \001(\006\"\204\001\n$CMsgGCGetPartnerAccountLi"
  "nk_Response\022\014\n\004pwid\030\001 \001(\r\022\017\n\007nexonid\030\002 \001"
  "(\r\022\020\n\010ageclass\030\003 \001(\005\022\031\n\013id_verified\030\004 \001("
  "\010:\004true\022\020\n\010is_adult\030\005 \001(\010\"\275\002\n\021CMsgGCRout"
  "ingInfo\022\021\n\tdir_index\030\001 \003(\r\0228\n\006method\030\002 \001"
  "(\0162 .CMsgGCRoutingInfo.RoutingMethod:\006RA"
  "NDOM\022;\n\010fallback\030\003 \001(\0162 .CMsgGCRoutingIn"
  "fo.RoutingMethod:\007DISCARD\022\026\n\016protobuf_fi"
  "eld\030\004 \001(\r\022\024\n\014webapi_param\030\005 \001(\t\"p\n\rRouti"
  "ngMethod\022\n\n\006RANDOM\020\000\022\013\n\007DISCARD\020\001\022\022\n\016CLI"
  "ENT_STEAMID\020\002\022\031\n\025PROTOBUF_FIELD_UINT64\020\003"
  "\022\027\n\023WEBAPI_PARAM_UINT64\020\004\"\265\001\n\037CMsgGCMsgM"
  "asterSetWebAPIRouting\0227\n\007entries\030\001 \003(\0132&"
  ".CMsgGCMsgMasterSetWebAPIRouting.Entry\032Y"
  "\n\005Entry\022\026\n\016interface_name\030\001 \001(\t\022\023\n\013metho"
  "d_name\030\002 \001(\t\022#\n\007routing\030\003 \001(\0132\022.CMsgGCRo"
  "utingInfo\"\240\001\n\"CMsgGCMsgMasterSetClientMs"
  "gRouting\022:\n\007entries\030\001 \003(\0132).CMsgGCMsgMas"
  "terSetClientMsgRouting.Entry\032>\n\005Entry\022\020\n"
  "\010msg_type\030\001 \001(\r\022#\n\007routing\030\002 \001(\0132\022.CMsgG"
  "CRoutingInfo\">\n(CMsgGCMsgMasterSetWebAPI"
  "Routing_Response\022\022\n\007eresult\030\001 \001(\005:\0012\"A\n+"
  "CMsgGCMsgMasterSetClientMsgRouting_Respo"
  "nse\022\022\n\007eresult\030\001 \001(\005:\0012\"\234\002\n\023CMsgGCMsgSet"
  "Options\022,\n\007options\030\001 \003(\0162\033.CMsgGCMsgSetO"
  "ptions.Option\022<\n\021client_msg_ranges\030\002 \003(\013"
  "2!.CMsgGCMsgSetOptions.MessageRange\032)\n\014M"
  "essageRange\022\013\n\003low\030\001 \002(\r\022\014\n\004high\030\002 \002(\r\"n"
  "\n\006Option\022\030\n\024NOTIFY_USER_SESSIONS\020\000\022\032\n\026NO"
  "TIFY_SERVER_SESSIONS\020\001\022\027\n\023NOTIFY_ACHIEVE"
  "MENTS\020\002\022\025\n\021NOTIFY_VAC_ACTION\020\003\"\362\002\n\024CMsgG"
  "CHUpdateSession\022\020\n\010steam_id\030\001 \001(\006\022\016\n\006app"
  "_id\030\002 \001(\r\022\016\n\006online\030\003 \001(\010\022\027\n\017server_stea"
  "m_id\030\004 \001(\006\022\023\n\013server_addr\030\005 \001(\r\022\023\n\013serve"
  "r_port\030\006 \001(\r\022\017\n\007os_type\030\007 \001(\r\022\023\n\013client_"
  "addr\030\010 \001(\r\0226\n\014extra_fields\030\t \003(\0132 .CMsgG"
  "CHUpdateSession.ExtraField\022\020\n\010owner_id\030\n"
  " \001(\006\022\030\n\020cm_session_sysid\030\013 \001(\r\022\035\n\025cm_ses"
  "sion_identifier\030\014 \001(\r\022\021\n\tdepot_ids\030\r \003(\r"
  "\032)\n\nExtraField\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t\"\354\001\n$CMsgNotificationOfSuspiciousActi"
  "vity\022\017\n\007steamid\030\001 \001(\006\022\r\n\005appid\030\002 \001(\r\022W\n\022"
  "multiple_instances\030\003 \001(\0132;.CMsgNotificat"
  "ionOfSuspiciousActivity.MultipleGameInst"
  "ances\032K\n\025MultipleGameInstances\022\032\n\022app_in"
  "stance_count\030\001 \001(\r\022\026\n\016other_steamids\030\002 \003"
  "(\006\"\362\004\n\026CMsgDPPartnerMicroTxns\022\r\n\005appid\030\001"
  " \001(\r\022\017\n\007gc_name\030\002 \001(\t\0224\n\007partner\030\003 \001(\0132#"
  ".CMsgDPPartnerMicroTxns.PartnerInfo\022=\n\014t"
  "ransactions\030\004 \003(\0132\'.CMsgDPPartnerMicroTx"
  "ns.PartnerMicroTxn\032\333\002\n\017PartnerMicroTxn\022\021"
  "\n\tinit_time\030\001 \001(\r\022\030\n\020last_update_time\030\002 "
  "\001(\r\022\016\n\006txn_id\030\003 \001(\004\022\022\n\naccount_id\030\004 \001(\r\022"
  "\021\n\tline_item\030\005 \001(\r\022\017\n\007item_id\030\006 \001(\004\022\021\n\td"
  "ef_index\030\007 \001(\r\022\r\n\005price\030\010 \001(\004\022\013\n\003tax\030\t \001"
  "(\004\022\021\n\tprice_usd\030\n \001(\004\022\017\n\007tax_usd\030\013 \001(\004\022\025"
  "\n\rpurchase_type\030\014 \001(\r\022\026\n\016steam_txn_type\030"
  "\r \001(\r\022\024\n\014country_code\030\016 \001(\t\022\023\n\013region_co"
  "de\030\017 \001(\t\022\020\n\010quantity\030\020 \001(\005\022\024\n\014ref_trans_"
  "id\030\021 \001(\004\032e\n\013PartnerInfo\022\022\n\npartner_id\030\001 "
  "\001(\r\022\024\n\014partner_name\030\002 \001(\t\022\025\n\rcurrency_co"
  "de\030\003 \001(\t\022\025\n\rcurrency_name\030\004 \001(\t\"\376\002\n\036CMsg"
  "DPPartnerMicroTxnsResponse\022\022\n\007eresult\030\001 "
  "\001(\r:\0012\022J\n\neerrorcode\030\002 \001(\0162*.CMsgDPPartn"
  "erMicroTxnsResponse.EErrorCode:\nk_MsgVal"
  "id\"\373\001\n\nEErrorCode\022\016\n\nk_MsgValid\020\000\022\025\n\021k_M"
  "sgInvalidAppID\020\001\022\033\n\027k_MsgInvalidPartnerI"
  "nfo\020\002\022\027\n\023k_MsgNoTransactions\020\003\022\023\n\017k_MsgS"
  "QLFailure\020\004\022\037\n\033k_MsgPartnerInfoDiscrepan"
  "cy\020\005\022 \n\034k_MsgTransactionInsertFailed\020\007\022\027"
  "\n\023k_MsgAlreadyRunning\020\010\022\037\n\033k_MsgInvalidT"
  "ransactionData\020\t\"w\n;CChinaAgreementSessi"
  "ons_StartAgreementSessionInGame_Request\022"
  "\r\n\005appid\030\001 \001(\r\022\017\n\007steamid\030\002 \001(\006\022\030\n\020clien"
  "t_ipaddress\030\003 \001(\t\"U\n<CChinaAgreementSess"
  "ions_StartAgreementSessionInGame_Respons"
  "e\022\025\n\ragreement_url\030\001 \001(\t*\266\001\n\020GCProtoBufM"
  "sgSrc\022 \n\034GCProtoBufMsgSrc_Unspecified\020\000\022"
  "\037\n\033GCProtoBufMsgSrc_FromSystem\020\001\022 \n\034GCPr"
  "otoBufMsgSrc_FromSteamID\020\002\022\033\n\027GCProtoBuf"
  "MsgSrc_FromGC\020\003\022 \n\034GCProtoBufMsgSrc_Repl"
  "ySystem\020\004:9\n\tkey_field\022\035.google.protobuf"
  ".FieldOptions\030\340\324\003 \001(\010:\005false:A\n\022msgpool_"
  "soft_limit\022\037.google.protobuf.MessageOpti"
  "ons\030\340\324\003 \001(\005:\00232:B\n\022msgpool_hard_limit\022\037."
  "google.protobuf.MessageOptions\030\341\324\003 \001(\005:\003"
  "384B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steammessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steammessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steammessages_2eproto = {
  false, false, 10610, descriptor_table_protodef_steammessages_2eproto, "steammessages.proto", 
  &descriptor_table_steammessages_2eproto_once, descriptor_table_steammessages_2eproto_deps, 1, 81,
  schemas, file_default_instances, TableStruct_steammessages_2eproto::offsets,
  file_level_metadata_steammessages_2eproto, file_level_enum_descriptors_steammessages_2eproto, file_level_service_descriptors_steammessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_steammessages_2eproto_getter() {
  return &descriptor_table_steammessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_steammessages_2eproto(&descriptor_table_steammessages_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCRoutingInfo_RoutingMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[0];
}
bool CMsgGCRoutingInfo_RoutingMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RANDOM;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::DISCARD;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::CLIENT_STEAMID;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::PROTOBUF_FIELD_UINT64;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::WEBAPI_PARAM_UINT64;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MIN;
constexpr CMsgGCRoutingInfo_RoutingMethod CMsgGCRoutingInfo::RoutingMethod_MAX;
constexpr int CMsgGCRoutingInfo::RoutingMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgGCMsgSetOptions_Option_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[1];
}
bool CMsgGCMsgSetOptions_Option_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_USER_SESSIONS;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_SERVER_SESSIONS;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_ACHIEVEMENTS;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::NOTIFY_VAC_ACTION;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MIN;
constexpr CMsgGCMsgSetOptions_Option CMsgGCMsgSetOptions::Option_MAX;
constexpr int CMsgGCMsgSetOptions::Option_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgDPPartnerMicroTxnsResponse_EErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[2];
}
bool CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgValid;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidAppID;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidPartnerInfo;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgNoTransactions;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgSQLFailure;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgPartnerInfoDiscrepancy;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgTransactionInsertFailed;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgAlreadyRunning;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::k_MsgInvalidTransactionData;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MIN;
constexpr CMsgDPPartnerMicroTxnsResponse_EErrorCode CMsgDPPartnerMicroTxnsResponse::EErrorCode_MAX;
constexpr int CMsgDPPartnerMicroTxnsResponse::EErrorCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GCProtoBufMsgSrc_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steammessages_2eproto);
  return file_level_enum_descriptors_steammessages_2eproto[3];
}
bool GCProtoBufMsgSrc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CMsgProtoBufHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgProtoBufHeader>()._has_bits_);
  static void set_has_client_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_source_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_job_id_source(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_job_id_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_target_job_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_gc_msg_src(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_gc_dir_index_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CMsgProtoBufHeader::CMsgProtoBufHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgProtoBufHeader)
}
CMsgProtoBufHeader::CMsgProtoBufHeader(const CMsgProtoBufHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_target_job_name()) {
    target_job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target_job_name(), 
      GetArenaForAllocation());
  }
  error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error_message()) {
    error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error_message(), 
      GetArenaForAllocation());
  }
  ::memcpy(&client_steam_id_, &from.client_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_id_target_) -
    reinterpret_cast<char*>(&client_steam_id_)) + sizeof(job_id_target_));
  // @@protoc_insertion_point(copy_constructor:CMsgProtoBufHeader)
}

inline void CMsgProtoBufHeader::SharedCtor() {
target_job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
error_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gc_msg_src_) -
    reinterpret_cast<char*>(&client_steam_id_)) + sizeof(gc_msg_src_));
eresult_ = 2;
job_id_source_ = uint64_t{18446744073709551615u};
job_id_target_ = uint64_t{18446744073709551615u};
}

CMsgProtoBufHeader::~CMsgProtoBufHeader() {
  // @@protoc_insertion_point(destructor:CMsgProtoBufHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgProtoBufHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  target_job_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgProtoBufHeader::ArenaDtor(void* object) {
  CMsgProtoBufHeader* _this = reinterpret_cast< CMsgProtoBufHeader* >(object);
  (void)_this;
}
void CMsgProtoBufHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgProtoBufHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgProtoBufHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgProtoBufHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      target_job_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      error_message_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&client_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gc_msg_src_) -
        reinterpret_cast<char*>(&client_steam_id_)) + sizeof(gc_msg_src_));
  }
  if (cached_has_bits & 0x00000700u) {
    eresult_ = 2;
    job_id_source_ = uint64_t{18446744073709551615u};
    job_id_target_ = uint64_t{18446744073709551615u};
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgProtoBufHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 client_steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_client_steam_id(&has_bits);
          client_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 client_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_client_session_id(&has_bits);
          client_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_app_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_source_app_id(&has_bits);
          source_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_job_id_source(&has_bits);
          job_id_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_job_id_target(&has_bits);
          job_id_target_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string target_job_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_target_job_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgProtoBufHeader.target_job_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eresult = 13 [default = 2];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string error_message = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_error_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgProtoBufHeader.error_message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ip = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::GCProtoBufMsgSrc_IsValid(val))) {
            _internal_set_gc_msg_src(static_cast<::GCProtoBufMsgSrc>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(200, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gc_dir_index_source = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_gc_dir_index_source(&has_bits);
          gc_dir_index_source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgProtoBufHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgProtoBufHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 client_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_client_steam_id(), target);
  }

  // optional int32 client_session_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_client_session_id(), target);
  }

  // optional uint32 source_app_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_source_app_id(), target);
  }

  // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_job_id_source(), target);
  }

  // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_job_id_target(), target);
  }

  // optional string target_job_name = 12;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_target_job_name().data(), static_cast<int>(this->_internal_target_job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.target_job_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_target_job_name(), target);
  }

  // optional int32 eresult = 13 [default = 2];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_eresult(), target);
  }

  // optional string error_message = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgProtoBufHeader.error_message");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_error_message(), target);
  }

  // optional uint32 ip = 15;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_ip(), target);
  }

  // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      200, this->_internal_gc_msg_src(), target);
  }

  // optional uint32 gc_dir_index_source = 201;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(201, this->_internal_gc_dir_index_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgProtoBufHeader)
  return target;
}

size_t CMsgProtoBufHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgProtoBufHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string target_job_name = 12;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_target_job_name());
    }

    // optional string error_message = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error_message());
    }

    // optional fixed64 client_steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 client_session_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_client_session_id());
    }

    // optional uint32 source_app_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_app_id());
    }

    // optional uint32 gc_dir_index_source = 201;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_gc_dir_index_source());
    }

    // optional uint32 ip = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
    }

    // optional .GCProtoBufMsgSrc gc_msg_src = 200 [default = GCProtoBufMsgSrc_Unspecified];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gc_msg_src());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 eresult = 13 [default = 2];
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

    // optional fixed64 job_id_source = 10 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional fixed64 job_id_target = 11 [default = 18446744073709551615];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgProtoBufHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgProtoBufHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgProtoBufHeader::GetClassData() const { return &_class_data_; }

void CMsgProtoBufHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgProtoBufHeader *>(to)->MergeFrom(
      static_cast<const CMsgProtoBufHeader &>(from));
}


void CMsgProtoBufHeader::MergeFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgProtoBufHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_target_job_name(from._internal_target_job_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000004u) {
      client_steam_id_ = from.client_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_session_id_ = from.client_session_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_app_id_ = from.source_app_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      gc_dir_index_source_ = from.gc_dir_index_source_;
    }
    if (cached_has_bits & 0x00000040u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000080u) {
      gc_msg_src_ = from.gc_msg_src_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      eresult_ = from.eresult_;
    }
    if (cached_has_bits & 0x00000200u) {
      job_id_source_ = from.job_id_source_;
    }
    if (cached_has_bits & 0x00000400u) {
      job_id_target_ = from.job_id_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgProtoBufHeader::CopyFrom(const CMsgProtoBufHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgProtoBufHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgProtoBufHeader::IsInitialized() const {
  return true;
}

void CMsgProtoBufHeader::InternalSwap(CMsgProtoBufHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_job_name_, lhs_arena,
      &other->target_job_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_message_, lhs_arena,
      &other->error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, gc_msg_src_)
      + sizeof(CMsgProtoBufHeader::gc_msg_src_)
      - PROTOBUF_FIELD_OFFSET(CMsgProtoBufHeader, client_steam_id_)>(
          reinterpret_cast<char*>(&client_steam_id_),
          reinterpret_cast<char*>(&other->client_steam_id_));
  swap(eresult_, other->eresult_);
  swap(job_id_source_, other->job_id_source_);
  swap(job_id_target_, other->job_id_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgProtoBufHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[0]);
}

// ===================================================================

class CMsgWebAPIKey::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWebAPIKey>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_publisher_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgWebAPIKey::CMsgWebAPIKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgWebAPIKey)
}
CMsgWebAPIKey::CMsgWebAPIKey(const CMsgWebAPIKey& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    domain_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_domain(), 
      GetArenaForAllocation());
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:CMsgWebAPIKey)
}

inline void CMsgWebAPIKey::SharedCtor() {
domain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&account_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&key_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(key_id_));
status_ = 255u;
}

CMsgWebAPIKey::~CMsgWebAPIKey() {
  // @@protoc_insertion_point(destructor:CMsgWebAPIKey)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgWebAPIKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgWebAPIKey::ArenaDtor(void* object) {
  CMsgWebAPIKey* _this = reinterpret_cast< CMsgWebAPIKey* >(object);
  (void)_this;
}
void CMsgWebAPIKey::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWebAPIKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWebAPIKey::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWebAPIKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    domain_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&key_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(key_id_));
    status_ = 255u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWebAPIKey::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status = 1 [default = 255];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 publisher_group_id = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_publisher_group_id(&has_bits);
          publisher_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 key_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_key_id(&has_bits);
          key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string domain = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_domain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgWebAPIKey.domain");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgWebAPIKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWebAPIKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status = 1 [default = 255];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // optional uint32 account_id = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_account_id(), target);
  }

  // optional uint32 publisher_group_id = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_publisher_group_id(), target);
  }

  // optional uint32 key_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_key_id(), target);
  }

  // optional string domain = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_domain().data(), static_cast<int>(this->_internal_domain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWebAPIKey.domain");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_domain(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWebAPIKey)
  return target;
}

size_t CMsgWebAPIKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWebAPIKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string domain = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional uint32 account_id = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 publisher_group_id = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_publisher_group_id());
    }

    // optional uint32 key_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_key_id());
    }

    // optional uint32 status = 1 [default = 255];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgWebAPIKey::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgWebAPIKey::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgWebAPIKey::GetClassData() const { return &_class_data_; }

void CMsgWebAPIKey::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgWebAPIKey *>(to)->MergeFrom(
      static_cast<const CMsgWebAPIKey &>(from));
}


void CMsgWebAPIKey::MergeFrom(const CMsgWebAPIKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWebAPIKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      publisher_group_id_ = from.publisher_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_id_ = from.key_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgWebAPIKey::CopyFrom(const CMsgWebAPIKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWebAPIKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIKey::IsInitialized() const {
  return true;
}

void CMsgWebAPIKey::InternalSwap(CMsgWebAPIKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &domain_, lhs_arena,
      &other->domain_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWebAPIKey, key_id_)
      + sizeof(CMsgWebAPIKey::key_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgWebAPIKey, account_id_)>(
          reinterpret_cast<char*>(&account_id_),
          reinterpret_cast<char*>(&other->account_id_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWebAPIKey::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[1]);
}

// ===================================================================

class CMsgHttpRequest_RequestHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpRequest_RequestHeader>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgHttpRequest.RequestHeader)
}
CMsgHttpRequest_RequestHeader::CMsgHttpRequest_RequestHeader(const CMsgHttpRequest_RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgHttpRequest.RequestHeader)
}

inline void CMsgHttpRequest_RequestHeader::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpRequest_RequestHeader::~CMsgHttpRequest_RequestHeader() {
  // @@protoc_insertion_point(destructor:CMsgHttpRequest.RequestHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgHttpRequest_RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest_RequestHeader::ArenaDtor(void* object) {
  CMsgHttpRequest_RequestHeader* _this = reinterpret_cast< CMsgHttpRequest_RequestHeader* >(object);
  (void)_this;
}
void CMsgHttpRequest_RequestHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHttpRequest_RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHttpRequest_RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpRequest.RequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpRequest_RequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHttpRequest.RequestHeader.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHttpRequest.RequestHeader.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpRequest_RequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpRequest.RequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.RequestHeader.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.RequestHeader.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpRequest.RequestHeader)
  return target;
}

size_t CMsgHttpRequest_RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpRequest.RequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpRequest_RequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgHttpRequest_RequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpRequest_RequestHeader::GetClassData() const { return &_class_data_; }

void CMsgHttpRequest_RequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgHttpRequest_RequestHeader *>(to)->MergeFrom(
      static_cast<const CMsgHttpRequest_RequestHeader &>(from));
}


void CMsgHttpRequest_RequestHeader::MergeFrom(const CMsgHttpRequest_RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpRequest.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpRequest_RequestHeader::CopyFrom(const CMsgHttpRequest_RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpRequest.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_RequestHeader::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_RequestHeader::InternalSwap(CMsgHttpRequest_RequestHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpRequest_RequestHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[2]);
}

// ===================================================================

class CMsgHttpRequest_QueryParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpRequest_QueryParam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgHttpRequest.QueryParam)
}
CMsgHttpRequest_QueryParam::CMsgHttpRequest_QueryParam(const CMsgHttpRequest_QueryParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgHttpRequest.QueryParam)
}

inline void CMsgHttpRequest_QueryParam::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpRequest_QueryParam::~CMsgHttpRequest_QueryParam() {
  // @@protoc_insertion_point(destructor:CMsgHttpRequest.QueryParam)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgHttpRequest_QueryParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest_QueryParam::ArenaDtor(void* object) {
  CMsgHttpRequest_QueryParam* _this = reinterpret_cast< CMsgHttpRequest_QueryParam* >(object);
  (void)_this;
}
void CMsgHttpRequest_QueryParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHttpRequest_QueryParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHttpRequest_QueryParam::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpRequest.QueryParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpRequest_QueryParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHttpRequest.QueryParam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpRequest_QueryParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpRequest.QueryParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.QueryParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpRequest.QueryParam)
  return target;
}

size_t CMsgHttpRequest_QueryParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpRequest.QueryParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpRequest_QueryParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgHttpRequest_QueryParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpRequest_QueryParam::GetClassData() const { return &_class_data_; }

void CMsgHttpRequest_QueryParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgHttpRequest_QueryParam *>(to)->MergeFrom(
      static_cast<const CMsgHttpRequest_QueryParam &>(from));
}


void CMsgHttpRequest_QueryParam::MergeFrom(const CMsgHttpRequest_QueryParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpRequest.QueryParam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpRequest_QueryParam::CopyFrom(const CMsgHttpRequest_QueryParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpRequest.QueryParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest_QueryParam::IsInitialized() const {
  return true;
}

void CMsgHttpRequest_QueryParam::InternalSwap(CMsgHttpRequest_QueryParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpRequest_QueryParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[3]);
}

// ===================================================================

class CMsgHttpRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpRequest>()._has_bits_);
  static void set_has_request_method(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hostname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_absolute_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgHttpRequest::CMsgHttpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena),
  get_params_(arena),
  post_params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgHttpRequest)
}
CMsgHttpRequest::CMsgHttpRequest(const CMsgHttpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_),
      get_params_(from.get_params_),
      post_params_(from.post_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hostname()) {
    hostname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hostname(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_method_, &from.request_method_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_timeout_) -
    reinterpret_cast<char*>(&request_method_)) + sizeof(absolute_timeout_));
  // @@protoc_insertion_point(copy_constructor:CMsgHttpRequest)
}

inline void CMsgHttpRequest::SharedCtor() {
hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_method_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&absolute_timeout_) -
    reinterpret_cast<char*>(&request_method_)) + sizeof(absolute_timeout_));
}

CMsgHttpRequest::~CMsgHttpRequest() {
  // @@protoc_insertion_point(destructor:CMsgHttpRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgHttpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpRequest::ArenaDtor(void* object) {
  CMsgHttpRequest* _this = reinterpret_cast< CMsgHttpRequest* >(object);
  (void)_this;
}
void CMsgHttpRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  get_params_.Clear();
  post_params_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hostname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      body_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&request_method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&absolute_timeout_) -
        reinterpret_cast<char*>(&request_method_)) + sizeof(absolute_timeout_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 request_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_request_method(&has_bits);
          request_method_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string hostname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHttpRequest.hostname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHttpRequest.url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpRequest.RequestHeader headers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpRequest.QueryParam get_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_get_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpRequest.QueryParam post_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_post_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 absolute_timeout = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_absolute_timeout(&has_bits);
          absolute_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 request_method = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_method(), target);
  }

  // optional string hostname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.hostname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hostname(), target);
  }

  // optional string url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpRequest.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_headers(i), target, stream);
  }

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_get_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_get_params(i), target, stream);
  }

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_post_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_post_params(i), target, stream);
  }

  // optional bytes body = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_body(), target);
  }

  // optional uint32 absolute_timeout = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_absolute_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpRequest)
  return target;
}

size_t CMsgHttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgHttpRequest.RequestHeader headers = 4;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgHttpRequest.QueryParam get_params = 5;
  total_size += 1UL * this->_internal_get_params_size();
  for (const auto& msg : this->get_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgHttpRequest.QueryParam post_params = 6;
  total_size += 1UL * this->_internal_post_params_size();
  for (const auto& msg : this->post_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string hostname = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hostname());
    }

    // optional string url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional bytes body = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional uint32 request_method = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_request_method());
    }

    // optional uint32 absolute_timeout = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_absolute_timeout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgHttpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpRequest::GetClassData() const { return &_class_data_; }

void CMsgHttpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgHttpRequest *>(to)->MergeFrom(
      static_cast<const CMsgHttpRequest &>(from));
}


void CMsgHttpRequest::MergeFrom(const CMsgHttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  get_params_.MergeFrom(from.get_params_);
  post_params_.MergeFrom(from.post_params_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hostname(from._internal_hostname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000008u) {
      request_method_ = from.request_method_;
    }
    if (cached_has_bits & 0x00000010u) {
      absolute_timeout_ = from.absolute_timeout_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpRequest::CopyFrom(const CMsgHttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpRequest::IsInitialized() const {
  return true;
}

void CMsgHttpRequest::InternalSwap(CMsgHttpRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  get_params_.InternalSwap(&other->get_params_);
  post_params_.InternalSwap(&other->post_params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgHttpRequest, absolute_timeout_)
      + sizeof(CMsgHttpRequest::absolute_timeout_)
      - PROTOBUF_FIELD_OFFSET(CMsgHttpRequest, request_method_)>(
          reinterpret_cast<char*>(&request_method_),
          reinterpret_cast<char*>(&other->request_method_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[4]);
}

// ===================================================================

class CMsgWebAPIRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgWebAPIRequest>()._has_bits_);
  static void set_has_unused_job_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_interface_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::CMsgWebAPIKey& api_key(const CMsgWebAPIRequest* msg);
  static void set_has_api_key(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::CMsgHttpRequest& request(const CMsgWebAPIRequest* msg);
  static void set_has_request(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_routing_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::CMsgWebAPIKey&
CMsgWebAPIRequest::_Internal::api_key(const CMsgWebAPIRequest* msg) {
  return *msg->api_key_;
}
const ::CMsgHttpRequest&
CMsgWebAPIRequest::_Internal::request(const CMsgWebAPIRequest* msg) {
  return *msg->request_;
}
CMsgWebAPIRequest::CMsgWebAPIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgWebAPIRequest)
}
CMsgWebAPIRequest::CMsgWebAPIRequest(const CMsgWebAPIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unused_job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unused_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unused_job_name()) {
    unused_job_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unused_job_name(), 
      GetArenaForAllocation());
  }
  interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_interface_name()) {
    interface_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interface_name(), 
      GetArenaForAllocation());
  }
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_api_key()) {
    api_key_ = new ::CMsgWebAPIKey(*from.api_key_);
  } else {
    api_key_ = nullptr;
  }
  if (from._internal_has_request()) {
    request_ = new ::CMsgHttpRequest(*from.request_);
  } else {
    request_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&routing_app_id_) -
    reinterpret_cast<char*>(&version_)) + sizeof(routing_app_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgWebAPIRequest)
}

inline void CMsgWebAPIRequest::SharedCtor() {
unused_job_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unused_job_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&api_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&routing_app_id_) -
    reinterpret_cast<char*>(&api_key_)) + sizeof(routing_app_id_));
}

CMsgWebAPIRequest::~CMsgWebAPIRequest() {
  // @@protoc_insertion_point(destructor:CMsgWebAPIRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgWebAPIRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unused_job_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete api_key_;
  if (this != internal_default_instance()) delete request_;
}

void CMsgWebAPIRequest::ArenaDtor(void* object) {
  CMsgWebAPIRequest* _this = reinterpret_cast< CMsgWebAPIRequest* >(object);
  (void)_this;
}
void CMsgWebAPIRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgWebAPIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgWebAPIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgWebAPIRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      unused_job_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      interface_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(api_key_ != nullptr);
      api_key_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(request_ != nullptr);
      request_->Clear();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&routing_app_id_) -
        reinterpret_cast<char*>(&version_)) + sizeof(routing_app_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgWebAPIRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string UNUSED_job_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unused_job_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgWebAPIRequest.UNUSED_job_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string interface_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgWebAPIRequest.interface_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string method_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgWebAPIRequest.method_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgWebAPIKey api_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_api_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgHttpRequest request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 routing_app_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_routing_app_id(&has_bits);
          routing_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgWebAPIRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgWebAPIRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string UNUSED_job_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unused_job_name().data(), static_cast<int>(this->_internal_unused_job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWebAPIRequest.UNUSED_job_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unused_job_name(), target);
  }

  // optional string interface_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWebAPIRequest.interface_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_interface_name(), target);
  }

  // optional string method_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgWebAPIRequest.method_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method_name(), target);
  }

  // optional uint32 version = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_version(), target);
  }

  // optional .CMsgWebAPIKey api_key = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::api_key(this), target, stream);
  }

  // optional .CMsgHttpRequest request = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::request(this), target, stream);
  }

  // optional uint32 routing_app_id = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_routing_app_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgWebAPIRequest)
  return target;
}

size_t CMsgWebAPIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgWebAPIRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string UNUSED_job_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unused_job_name());
    }

    // optional string interface_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_interface_name());
    }

    // optional string method_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional .CMsgWebAPIKey api_key = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *api_key_);
    }

    // optional .CMsgHttpRequest request = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_);
    }

    // optional uint32 version = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
    }

    // optional uint32 routing_app_id = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_routing_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgWebAPIRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgWebAPIRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgWebAPIRequest::GetClassData() const { return &_class_data_; }

void CMsgWebAPIRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgWebAPIRequest *>(to)->MergeFrom(
      static_cast<const CMsgWebAPIRequest &>(from));
}


void CMsgWebAPIRequest::MergeFrom(const CMsgWebAPIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgWebAPIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unused_job_name(from._internal_unused_job_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_interface_name(from._internal_interface_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_api_key()->::CMsgWebAPIKey::MergeFrom(from._internal_api_key());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_request()->::CMsgHttpRequest::MergeFrom(from._internal_request());
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      routing_app_id_ = from.routing_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgWebAPIRequest::CopyFrom(const CMsgWebAPIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgWebAPIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWebAPIRequest::IsInitialized() const {
  return true;
}

void CMsgWebAPIRequest::InternalSwap(CMsgWebAPIRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unused_job_name_, lhs_arena,
      &other->unused_job_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &interface_name_, lhs_arena,
      &other->interface_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgWebAPIRequest, routing_app_id_)
      + sizeof(CMsgWebAPIRequest::routing_app_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgWebAPIRequest, api_key_)>(
          reinterpret_cast<char*>(&api_key_),
          reinterpret_cast<char*>(&other->api_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgWebAPIRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[5]);
}

// ===================================================================

class CMsgHttpResponse_ResponseHeader::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpResponse_ResponseHeader>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgHttpResponse.ResponseHeader)
}
CMsgHttpResponse_ResponseHeader::CMsgHttpResponse_ResponseHeader(const CMsgHttpResponse_ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgHttpResponse.ResponseHeader)
}

inline void CMsgHttpResponse_ResponseHeader::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgHttpResponse_ResponseHeader::~CMsgHttpResponse_ResponseHeader() {
  // @@protoc_insertion_point(destructor:CMsgHttpResponse.ResponseHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgHttpResponse_ResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpResponse_ResponseHeader::ArenaDtor(void* object) {
  CMsgHttpResponse_ResponseHeader* _this = reinterpret_cast< CMsgHttpResponse_ResponseHeader* >(object);
  (void)_this;
}
void CMsgHttpResponse_ResponseHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHttpResponse_ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHttpResponse_ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpResponse.ResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpResponse_ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHttpResponse.ResponseHeader.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgHttpResponse.ResponseHeader.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpResponse_ResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpResponse.ResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpResponse.ResponseHeader.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgHttpResponse.ResponseHeader.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpResponse.ResponseHeader)
  return target;
}

size_t CMsgHttpResponse_ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpResponse.ResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpResponse_ResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgHttpResponse_ResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpResponse_ResponseHeader::GetClassData() const { return &_class_data_; }

void CMsgHttpResponse_ResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgHttpResponse_ResponseHeader *>(to)->MergeFrom(
      static_cast<const CMsgHttpResponse_ResponseHeader &>(from));
}


void CMsgHttpResponse_ResponseHeader::MergeFrom(const CMsgHttpResponse_ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpResponse.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpResponse_ResponseHeader::CopyFrom(const CMsgHttpResponse_ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpResponse.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse_ResponseHeader::IsInitialized() const {
  return true;
}

void CMsgHttpResponse_ResponseHeader::InternalSwap(CMsgHttpResponse_ResponseHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpResponse_ResponseHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[6]);
}

// ===================================================================

class CMsgHttpResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgHttpResponse>()._has_bits_);
  static void set_has_status_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgHttpResponse::CMsgHttpResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  headers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgHttpResponse)
}
CMsgHttpResponse::CMsgHttpResponse(const CMsgHttpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:CMsgHttpResponse)
}

inline void CMsgHttpResponse::SharedCtor() {
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_code_ = 0u;
}

CMsgHttpResponse::~CMsgHttpResponse() {
  // @@protoc_insertion_point(destructor:CMsgHttpResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgHttpResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgHttpResponse::ArenaDtor(void* object) {
  CMsgHttpResponse* _this = reinterpret_cast< CMsgHttpResponse* >(object);
  (void)_this;
}
void CMsgHttpResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgHttpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgHttpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgHttpResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    body_.ClearNonDefaultToEmpty();
  }
  status_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgHttpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_status_code(&has_bits);
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes body = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgHttpResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgHttpResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 status_code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status_code(), target);
  }

  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_headers(i), target, stream);
  }

  // optional bytes body = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_body(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgHttpResponse)
  return target;
}

size_t CMsgHttpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgHttpResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgHttpResponse.ResponseHeader headers = 2;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes body = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_body());
    }

    // optional uint32 status_code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_status_code());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgHttpResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgHttpResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgHttpResponse::GetClassData() const { return &_class_data_; }

void CMsgHttpResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgHttpResponse *>(to)->MergeFrom(
      static_cast<const CMsgHttpResponse &>(from));
}


void CMsgHttpResponse::MergeFrom(const CMsgHttpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgHttpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      status_code_ = from.status_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgHttpResponse::CopyFrom(const CMsgHttpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgHttpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgHttpResponse::IsInitialized() const {
  return true;
}

void CMsgHttpResponse::InternalSwap(CMsgHttpResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgHttpResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[7]);
}

// ===================================================================

class CMsgAMFindAccounts::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMFindAccounts>()._has_bits_);
  static void set_has_search_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_search_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMFindAccounts::CMsgAMFindAccounts(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMFindAccounts)
}
CMsgAMFindAccounts::CMsgAMFindAccounts(const CMsgAMFindAccounts& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    search_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_search_string()) {
    search_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_search_string(), 
      GetArenaForAllocation());
  }
  search_type_ = from.search_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMFindAccounts)
}

inline void CMsgAMFindAccounts::SharedCtor() {
search_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  search_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
search_type_ = 0u;
}

CMsgAMFindAccounts::~CMsgAMFindAccounts() {
  // @@protoc_insertion_point(destructor:CMsgAMFindAccounts)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMFindAccounts::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  search_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMFindAccounts::ArenaDtor(void* object) {
  CMsgAMFindAccounts* _this = reinterpret_cast< CMsgAMFindAccounts* >(object);
  (void)_this;
}
void CMsgAMFindAccounts::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMFindAccounts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMFindAccounts::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMFindAccounts)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_string_.ClearNonDefaultToEmpty();
  }
  search_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMFindAccounts::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 search_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_search_type(&has_bits);
          search_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string search_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_search_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAMFindAccounts.search_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMFindAccounts::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMFindAccounts)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 search_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_search_type(), target);
  }

  // optional string search_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_search_string().data(), static_cast<int>(this->_internal_search_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMFindAccounts.search_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_search_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMFindAccounts)
  return target;
}

size_t CMsgAMFindAccounts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMFindAccounts)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string search_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_search_string());
    }

    // optional uint32 search_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_search_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMFindAccounts::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMFindAccounts::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMFindAccounts::GetClassData() const { return &_class_data_; }

void CMsgAMFindAccounts::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMFindAccounts *>(to)->MergeFrom(
      static_cast<const CMsgAMFindAccounts &>(from));
}


void CMsgAMFindAccounts::MergeFrom(const CMsgAMFindAccounts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMFindAccounts)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_search_string(from._internal_search_string());
    }
    if (cached_has_bits & 0x00000002u) {
      search_type_ = from.search_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMFindAccounts::CopyFrom(const CMsgAMFindAccounts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMFindAccounts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccounts::IsInitialized() const {
  return true;
}

void CMsgAMFindAccounts::InternalSwap(CMsgAMFindAccounts* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &search_string_, lhs_arena,
      &other->search_string_, rhs_arena
  );
  swap(search_type_, other->search_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMFindAccounts::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[8]);
}

// ===================================================================

class CMsgAMFindAccountsResponse::_Internal {
 public:
};

CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steam_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMFindAccountsResponse)
}
CMsgAMFindAccountsResponse::CMsgAMFindAccountsResponse(const CMsgAMFindAccountsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steam_id_(from.steam_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgAMFindAccountsResponse)
}

inline void CMsgAMFindAccountsResponse::SharedCtor() {
}

CMsgAMFindAccountsResponse::~CMsgAMFindAccountsResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMFindAccountsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMFindAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMFindAccountsResponse::ArenaDtor(void* object) {
  CMsgAMFindAccountsResponse* _this = reinterpret_cast< CMsgAMFindAccountsResponse* >(object);
  (void)_this;
}
void CMsgAMFindAccountsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMFindAccountsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMFindAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMFindAccountsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMFindAccountsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steam_id(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steam_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMFindAccountsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMFindAccountsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  for (int i = 0, n = this->_internal_steam_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMFindAccountsResponse)
  return target;
}

size_t CMsgAMFindAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMFindAccountsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steam_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steam_id_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steam_id_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMFindAccountsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMFindAccountsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMFindAccountsResponse::GetClassData() const { return &_class_data_; }

void CMsgAMFindAccountsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMFindAccountsResponse *>(to)->MergeFrom(
      static_cast<const CMsgAMFindAccountsResponse &>(from));
}


void CMsgAMFindAccountsResponse::MergeFrom(const CMsgAMFindAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMFindAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steam_id_.MergeFrom(from.steam_id_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMFindAccountsResponse::CopyFrom(const CMsgAMFindAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMFindAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMFindAccountsResponse::IsInitialized() const {
  return true;
}

void CMsgAMFindAccountsResponse::InternalSwap(CMsgAMFindAccountsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  steam_id_.InternalSwap(&other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMFindAccountsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[9]);
}

// ===================================================================

class CMsgNotifyWatchdog::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotifyWatchdog>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_alert_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alert_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_critical(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_text(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgNotifyWatchdog::CMsgNotifyWatchdog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgNotifyWatchdog)
}
CMsgNotifyWatchdog::CMsgNotifyWatchdog(const CMsgNotifyWatchdog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_text()) {
    text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_text(), 
      GetArenaForAllocation());
  }
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&source_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgNotifyWatchdog)
}

inline void CMsgNotifyWatchdog::SharedCtor() {
text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&source_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&source_)) + sizeof(appid_));
}

CMsgNotifyWatchdog::~CMsgNotifyWatchdog() {
  // @@protoc_insertion_point(destructor:CMsgNotifyWatchdog)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgNotifyWatchdog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgNotifyWatchdog::ArenaDtor(void* object) {
  CMsgNotifyWatchdog* _this = reinterpret_cast< CMsgNotifyWatchdog* >(object);
  (void)_this;
}
void CMsgNotifyWatchdog::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNotifyWatchdog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNotifyWatchdog::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotifyWatchdog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&source_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotifyWatchdog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_source(&has_bits);
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 alert_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_alert_type(&has_bits);
          alert_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 alert_destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_alert_destination(&has_bits);
          alert_destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool critical = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_critical(&has_bits);
          critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string text = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgNotifyWatchdog.text");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNotifyWatchdog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotifyWatchdog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 source = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_source(), target);
  }

  // optional uint32 alert_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_alert_type(), target);
  }

  // optional uint32 alert_destination = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_alert_destination(), target);
  }

  // optional bool critical = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_critical(), target);
  }

  // optional uint32 time = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time(), target);
  }

  // optional uint32 appid = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_appid(), target);
  }

  // optional string text = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgNotifyWatchdog.text");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotifyWatchdog)
  return target;
}

size_t CMsgNotifyWatchdog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotifyWatchdog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string text = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
    }

    // optional uint32 source = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source());
    }

    // optional uint32 alert_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_alert_type());
    }

    // optional uint32 alert_destination = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_alert_destination());
    }

    // optional bool critical = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional uint32 time = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time());
    }

    // optional uint32 appid = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNotifyWatchdog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgNotifyWatchdog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNotifyWatchdog::GetClassData() const { return &_class_data_; }

void CMsgNotifyWatchdog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgNotifyWatchdog *>(to)->MergeFrom(
      static_cast<const CMsgNotifyWatchdog &>(from));
}


void CMsgNotifyWatchdog::MergeFrom(const CMsgNotifyWatchdog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotifyWatchdog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_text(from._internal_text());
    }
    if (cached_has_bits & 0x00000002u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000004u) {
      alert_type_ = from.alert_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      alert_destination_ = from.alert_destination_;
    }
    if (cached_has_bits & 0x00000010u) {
      critical_ = from.critical_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNotifyWatchdog::CopyFrom(const CMsgNotifyWatchdog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotifyWatchdog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotifyWatchdog::IsInitialized() const {
  return true;
}

void CMsgNotifyWatchdog::InternalSwap(CMsgNotifyWatchdog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNotifyWatchdog, appid_)
      + sizeof(CMsgNotifyWatchdog::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgNotifyWatchdog, source_)>(
          reinterpret_cast<char*>(&source_),
          reinterpret_cast<char*>(&other->source_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotifyWatchdog::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[10]);
}

// ===================================================================

class CMsgAMGetLicenses::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetLicenses>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMGetLicenses::CMsgAMGetLicenses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetLicenses)
}
CMsgAMGetLicenses::CMsgAMGetLicenses(const CMsgAMGetLicenses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetLicenses)
}

inline void CMsgAMGetLicenses::SharedCtor() {
steamid_ = uint64_t{0u};
}

CMsgAMGetLicenses::~CMsgAMGetLicenses() {
  // @@protoc_insertion_point(destructor:CMsgAMGetLicenses)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGetLicenses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetLicenses::ArenaDtor(void* object) {
  CMsgAMGetLicenses* _this = reinterpret_cast< CMsgAMGetLicenses* >(object);
  (void)_this;
}
void CMsgAMGetLicenses::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGetLicenses::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGetLicenses::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetLicenses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetLicenses::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetLicenses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetLicenses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetLicenses)
  return target;
}

size_t CMsgAMGetLicenses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetLicenses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetLicenses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGetLicenses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetLicenses::GetClassData() const { return &_class_data_; }

void CMsgAMGetLicenses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGetLicenses *>(to)->MergeFrom(
      static_cast<const CMsgAMGetLicenses &>(from));
}


void CMsgAMGetLicenses::MergeFrom(const CMsgAMGetLicenses& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetLicenses)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetLicenses::CopyFrom(const CMsgAMGetLicenses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetLicenses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicenses::IsInitialized() const {
  return true;
}

void CMsgAMGetLicenses::InternalSwap(CMsgAMGetLicenses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetLicenses::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[11]);
}

// ===================================================================

class CMsgPackageLicense::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgPackageLicense>()._has_bits_);
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgPackageLicense::CMsgPackageLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgPackageLicense)
}
CMsgPackageLicense::CMsgPackageLicense(const CMsgPackageLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&package_id_, &from.package_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgPackageLicense)
}

inline void CMsgPackageLicense::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&package_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&package_id_)) + sizeof(owner_id_));
}

CMsgPackageLicense::~CMsgPackageLicense() {
  // @@protoc_insertion_point(destructor:CMsgPackageLicense)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgPackageLicense::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgPackageLicense::ArenaDtor(void* object) {
  CMsgPackageLicense* _this = reinterpret_cast< CMsgPackageLicense* >(object);
  (void)_this;
}
void CMsgPackageLicense::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgPackageLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgPackageLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgPackageLicense)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&package_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_id_) -
        reinterpret_cast<char*>(&package_id_)) + sizeof(owner_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgPackageLicense::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 package_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_package_id(&has_bits);
          package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgPackageLicense::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgPackageLicense)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 package_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_package_id(), target);
  }

  // optional uint32 time_created = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_created(), target);
  }

  // optional uint32 owner_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgPackageLicense)
  return target;
}

size_t CMsgPackageLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgPackageLicense)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 package_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_package_id());
    }

    // optional uint32 time_created = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_created());
    }

    // optional uint32 owner_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgPackageLicense::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgPackageLicense::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgPackageLicense::GetClassData() const { return &_class_data_; }

void CMsgPackageLicense::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgPackageLicense *>(to)->MergeFrom(
      static_cast<const CMsgPackageLicense &>(from));
}


void CMsgPackageLicense::MergeFrom(const CMsgPackageLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgPackageLicense)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_id_ = from.owner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgPackageLicense::CopyFrom(const CMsgPackageLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgPackageLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPackageLicense::IsInitialized() const {
  return true;
}

void CMsgPackageLicense::InternalSwap(CMsgPackageLicense* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgPackageLicense, owner_id_)
      + sizeof(CMsgPackageLicense::owner_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgPackageLicense, package_id_)>(
          reinterpret_cast<char*>(&package_id_),
          reinterpret_cast<char*>(&other->package_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgPackageLicense::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[12]);
}

// ===================================================================

class CMsgAMGetLicensesResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetLicensesResponse>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  license_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetLicensesResponse)
}
CMsgAMGetLicensesResponse::CMsgAMGetLicensesResponse(const CMsgAMGetLicensesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      license_(from.license_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetLicensesResponse)
}

inline void CMsgAMGetLicensesResponse::SharedCtor() {
result_ = 0u;
}

CMsgAMGetLicensesResponse::~CMsgAMGetLicensesResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMGetLicensesResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGetLicensesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetLicensesResponse::ArenaDtor(void* object) {
  CMsgAMGetLicensesResponse* _this = reinterpret_cast< CMsgAMGetLicensesResponse* >(object);
  (void)_this;
}
void CMsgAMGetLicensesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGetLicensesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGetLicensesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetLicensesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  license_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetLicensesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgPackageLicense license = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_license(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_result(&has_bits);
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetLicensesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetLicensesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgPackageLicense license = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_license_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_license(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetLicensesResponse)
  return target;
}

size_t CMsgAMGetLicensesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetLicensesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgPackageLicense license = 1;
  total_size += 1UL * this->_internal_license_size();
  for (const auto& msg : this->license_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 result = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetLicensesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGetLicensesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetLicensesResponse::GetClassData() const { return &_class_data_; }

void CMsgAMGetLicensesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGetLicensesResponse *>(to)->MergeFrom(
      static_cast<const CMsgAMGetLicensesResponse &>(from));
}


void CMsgAMGetLicensesResponse::MergeFrom(const CMsgAMGetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetLicensesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  license_.MergeFrom(from.license_);
  if (from._internal_has_result()) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetLicensesResponse::CopyFrom(const CMsgAMGetLicensesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetLicensesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetLicensesResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetLicensesResponse::InternalSwap(CMsgAMGetLicensesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  license_.InternalSwap(&other->license_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetLicensesResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[13]);
}

// ===================================================================

class CMsgAMGetUserGameStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStats>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStats)
}
CMsgAMGetUserGameStats::CMsgAMGetUserGameStats(const CMsgAMGetUserGameStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStats)
}

inline void CMsgAMGetUserGameStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
}

CMsgAMGetUserGameStats::~CMsgAMGetUserGameStats() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGetUserGameStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetUserGameStats::ArenaDtor(void* object) {
  CMsgAMGetUserGameStats* _this = reinterpret_cast< CMsgAMGetUserGameStats* >(object);
  (void)_this;
}
void CMsgAMGetUserGameStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGetUserGameStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGetUserGameStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 stats = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_stats(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_stats(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  // repeated uint32 stats = 3;
  for (int i = 0, n = this->_internal_stats_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stats(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStats)
  return target;
}

size_t CMsgAMGetUserGameStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 stats = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->stats_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stats_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGetUserGameStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStats::GetClassData() const { return &_class_data_; }

void CMsgAMGetUserGameStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGetUserGameStats *>(to)->MergeFrom(
      static_cast<const CMsgAMGetUserGameStats &>(from));
}


void CMsgAMGetUserGameStats::MergeFrom(const CMsgAMGetUserGameStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStats::CopyFrom(const CMsgAMGetUserGameStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStats::InternalSwap(CMsgAMGetUserGameStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStats, game_id_)
      + sizeof(CMsgAMGetUserGameStats::game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStats, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[14]);
}

// ===================================================================

class CMsgAMGetUserGameStatsResponse_Stats::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStatsResponse_Stats>()._has_bits_);
  static void set_has_stat_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stat_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStatsResponse.Stats)
}
CMsgAMGetUserGameStatsResponse_Stats::CMsgAMGetUserGameStatsResponse_Stats(const CMsgAMGetUserGameStatsResponse_Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&stat_id_, &from.stat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStatsResponse.Stats)
}

inline void CMsgAMGetUserGameStatsResponse_Stats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stat_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stat_value_) -
    reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
}

CMsgAMGetUserGameStatsResponse_Stats::~CMsgAMGetUserGameStatsResponse_Stats() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStatsResponse.Stats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGetUserGameStatsResponse_Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetUserGameStatsResponse_Stats::ArenaDtor(void* object) {
  CMsgAMGetUserGameStatsResponse_Stats* _this = reinterpret_cast< CMsgAMGetUserGameStatsResponse_Stats* >(object);
  (void)_this;
}
void CMsgAMGetUserGameStatsResponse_Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGetUserGameStatsResponse_Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGetUserGameStatsResponse_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStatsResponse.Stats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stat_value_) -
        reinterpret_cast<char*>(&stat_id_)) + sizeof(stat_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStatsResponse_Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 stat_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_stat_id(&has_bits);
          stat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 stat_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_stat_value(&has_bits);
          stat_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStatsResponse_Stats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStatsResponse.Stats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stat_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stat_id(), target);
  }

  // optional uint32 stat_value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stat_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStatsResponse.Stats)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStatsResponse.Stats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 stat_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_id());
    }

    // optional uint32 stat_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_stat_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStatsResponse_Stats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGetUserGameStatsResponse_Stats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStatsResponse_Stats::GetClassData() const { return &_class_data_; }

void CMsgAMGetUserGameStatsResponse_Stats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGetUserGameStatsResponse_Stats *>(to)->MergeFrom(
      static_cast<const CMsgAMGetUserGameStatsResponse_Stats &>(from));
}


void CMsgAMGetUserGameStatsResponse_Stats::MergeFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStatsResponse.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stat_id_ = from.stat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      stat_value_ = from.stat_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStatsResponse_Stats::CopyFrom(const CMsgAMGetUserGameStatsResponse_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStatsResponse.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Stats::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Stats::InternalSwap(CMsgAMGetUserGameStatsResponse_Stats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, stat_value_)
      + sizeof(CMsgAMGetUserGameStatsResponse_Stats::stat_value_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Stats, stat_id_)>(
          reinterpret_cast<char*>(&stat_id_),
          reinterpret_cast<char*>(&other->stat_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStatsResponse_Stats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[15]);
}

// ===================================================================

class CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStatsResponse_Achievement_Blocks>()._has_bits_);
  static void set_has_achievement_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_achievement_bit_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unlock_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}
CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CMsgAMGetUserGameStatsResponse_Achievement_Blocks(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&achievement_id_, &from.achievement_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unlock_time_) -
    reinterpret_cast<char*>(&achievement_id_)) + sizeof(unlock_time_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
}

inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&achievement_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unlock_time_) -
    reinterpret_cast<char*>(&achievement_id_)) + sizeof(unlock_time_));
}

CMsgAMGetUserGameStatsResponse_Achievement_Blocks::~CMsgAMGetUserGameStatsResponse_Achievement_Blocks() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::ArenaDtor(void* object) {
  CMsgAMGetUserGameStatsResponse_Achievement_Blocks* _this = reinterpret_cast< CMsgAMGetUserGameStatsResponse_Achievement_Blocks* >(object);
  (void)_this;
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&achievement_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unlock_time_) -
        reinterpret_cast<char*>(&achievement_id_)) + sizeof(unlock_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 achievement_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_achievement_id(&has_bits);
          achievement_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 achievement_bit_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_achievement_bit_id(&has_bits);
          achievement_bit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 unlock_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_unlock_time(&has_bits);
          unlock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_achievement_id(), target);
  }

  // optional uint32 achievement_bit_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_achievement_bit_id(), target);
  }

  // optional fixed32 unlock_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(3, this->_internal_unlock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse_Achievement_Blocks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 achievement_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_achievement_id());
    }

    // optional uint32 achievement_bit_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_achievement_bit_id());
    }

    // optional fixed32 unlock_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStatsResponse_Achievement_Blocks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetClassData() const { return &_class_data_; }

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGetUserGameStatsResponse_Achievement_Blocks *>(to)->MergeFrom(
      static_cast<const CMsgAMGetUserGameStatsResponse_Achievement_Blocks &>(from));
}


void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::MergeFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      achievement_id_ = from.achievement_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      achievement_bit_id_ = from.achievement_bit_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unlock_time_ = from.unlock_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::CopyFrom(const CMsgAMGetUserGameStatsResponse_Achievement_Blocks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStatsResponse.Achievement_Blocks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse_Achievement_Blocks::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse_Achievement_Blocks::InternalSwap(CMsgAMGetUserGameStatsResponse_Achievement_Blocks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, unlock_time_)
      + sizeof(CMsgAMGetUserGameStatsResponse_Achievement_Blocks::unlock_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse_Achievement_Blocks, achievement_id_)>(
          reinterpret_cast<char*>(&achievement_id_),
          reinterpret_cast<char*>(&other->achievement_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStatsResponse_Achievement_Blocks::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[16]);
}

// ===================================================================

class CMsgAMGetUserGameStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGetUserGameStatsResponse>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_game_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  stats_(arena),
  achievement_blocks_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGetUserGameStatsResponse)
}
CMsgAMGetUserGameStatsResponse::CMsgAMGetUserGameStatsResponse(const CMsgAMGetUserGameStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      stats_(from.stats_),
      achievement_blocks_(from.achievement_blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGetUserGameStatsResponse)
}

inline void CMsgAMGetUserGameStatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
eresult_ = 2;
}

CMsgAMGetUserGameStatsResponse::~CMsgAMGetUserGameStatsResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMGetUserGameStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGetUserGameStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGetUserGameStatsResponse::ArenaDtor(void* object) {
  CMsgAMGetUserGameStatsResponse* _this = reinterpret_cast< CMsgAMGetUserGameStatsResponse* >(object);
  (void)_this;
}
void CMsgAMGetUserGameStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGetUserGameStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGetUserGameStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGetUserGameStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  achievement_blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(game_id_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGetUserGameStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_game_id(&has_bits);
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional int32 eresult = 3 [default = 2];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_achievement_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGetUserGameStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGetUserGameStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional fixed64 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_game_id(), target);
  }

  // optional int32 eresult = 3 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_eresult(), target);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stats(i), target, stream);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_achievement_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_achievement_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGetUserGameStatsResponse)
  return target;
}

size_t CMsgAMGetUserGameStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGetUserGameStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAMGetUserGameStatsResponse.Stats stats = 4;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgAMGetUserGameStatsResponse.Achievement_Blocks achievement_blocks = 5;
  total_size += 1UL * this->_internal_achievement_blocks_size();
  for (const auto& msg : this->achievement_blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 eresult = 3 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGetUserGameStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGetUserGameStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGetUserGameStatsResponse::GetClassData() const { return &_class_data_; }

void CMsgAMGetUserGameStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGetUserGameStatsResponse *>(to)->MergeFrom(
      static_cast<const CMsgAMGetUserGameStatsResponse &>(from));
}


void CMsgAMGetUserGameStatsResponse::MergeFrom(const CMsgAMGetUserGameStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGetUserGameStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  achievement_blocks_.MergeFrom(from.achievement_blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGetUserGameStatsResponse::CopyFrom(const CMsgAMGetUserGameStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGetUserGameStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGetUserGameStatsResponse::IsInitialized() const {
  return true;
}

void CMsgAMGetUserGameStatsResponse::InternalSwap(CMsgAMGetUserGameStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stats_.InternalSwap(&other->stats_);
  achievement_blocks_.InternalSwap(&other->achievement_blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, game_id_)
      + sizeof(CMsgAMGetUserGameStatsResponse::game_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGetUserGameStatsResponse, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGetUserGameStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[17]);
}

// ===================================================================

class CMsgGCGetCommandList::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetCommandList>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command_prefix(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetCommandList::CMsgGCGetCommandList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetCommandList)
}
CMsgGCGetCommandList::CMsgGCGetCommandList(const CMsgGCGetCommandList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  command_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command_prefix()) {
    command_prefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command_prefix(), 
      GetArenaForAllocation());
  }
  app_id_ = from.app_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetCommandList)
}

inline void CMsgGCGetCommandList::SharedCtor() {
command_prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_id_ = 0u;
}

CMsgGCGetCommandList::~CMsgGCGetCommandList() {
  // @@protoc_insertion_point(destructor:CMsgGCGetCommandList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetCommandList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  command_prefix_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetCommandList::ArenaDtor(void* object) {
  CMsgGCGetCommandList* _this = reinterpret_cast< CMsgGCGetCommandList* >(object);
  (void)_this;
}
void CMsgGCGetCommandList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetCommandList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetCommandList::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetCommandList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    command_prefix_.ClearNonDefaultToEmpty();
  }
  app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetCommandList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command_prefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_command_prefix();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCGetCommandList.command_prefix");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetCommandList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetCommandList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional string command_prefix = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command_prefix().data(), static_cast<int>(this->_internal_command_prefix().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetCommandList.command_prefix");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command_prefix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetCommandList)
  return target;
}

size_t CMsgGCGetCommandList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetCommandList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string command_prefix = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command_prefix());
    }

    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetCommandList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetCommandList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetCommandList::GetClassData() const { return &_class_data_; }

void CMsgGCGetCommandList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetCommandList *>(to)->MergeFrom(
      static_cast<const CMsgGCGetCommandList &>(from));
}


void CMsgGCGetCommandList::MergeFrom(const CMsgGCGetCommandList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetCommandList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_command_prefix(from._internal_command_prefix());
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetCommandList::CopyFrom(const CMsgGCGetCommandList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetCommandList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandList::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandList::InternalSwap(CMsgGCGetCommandList* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_prefix_, lhs_arena,
      &other->command_prefix_, rhs_arena
  );
  swap(app_id_, other->app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetCommandList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[18]);
}

// ===================================================================

class CMsgGCGetCommandListResponse::_Internal {
 public:
};

CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  command_name_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetCommandListResponse)
}
CMsgGCGetCommandListResponse::CMsgGCGetCommandListResponse(const CMsgGCGetCommandListResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      command_name_(from.command_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetCommandListResponse)
}

inline void CMsgGCGetCommandListResponse::SharedCtor() {
}

CMsgGCGetCommandListResponse::~CMsgGCGetCommandListResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetCommandListResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetCommandListResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetCommandListResponse::ArenaDtor(void* object) {
  CMsgGCGetCommandListResponse* _this = reinterpret_cast< CMsgGCGetCommandListResponse* >(object);
  (void)_this;
}
void CMsgGCGetCommandListResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetCommandListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetCommandListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetCommandListResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_name_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetCommandListResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string command_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_command_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCGetCommandListResponse.command_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetCommandListResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetCommandListResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string command_name = 1;
  for (int i = 0, n = this->_internal_command_name_size(); i < n; i++) {
    const auto& s = this->_internal_command_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetCommandListResponse.command_name");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetCommandListResponse)
  return target;
}

size_t CMsgGCGetCommandListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetCommandListResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string command_name = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(command_name_.size());
  for (int i = 0, n = command_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      command_name_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetCommandListResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetCommandListResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetCommandListResponse::GetClassData() const { return &_class_data_; }

void CMsgGCGetCommandListResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetCommandListResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCGetCommandListResponse &>(from));
}


void CMsgGCGetCommandListResponse::MergeFrom(const CMsgGCGetCommandListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetCommandListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  command_name_.MergeFrom(from.command_name_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetCommandListResponse::CopyFrom(const CMsgGCGetCommandListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetCommandListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetCommandListResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetCommandListResponse::InternalSwap(CMsgGCGetCommandListResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  command_name_.InternalSwap(&other->command_name_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetCommandListResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[19]);
}

// ===================================================================

class CGCMsgMemCachedGet::_Internal {
 public:
};

CGCMsgMemCachedGet::CGCMsgMemCachedGet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedGet)
}
CGCMsgMemCachedGet::CGCMsgMemCachedGet(const CGCMsgMemCachedGet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedGet)
}

inline void CGCMsgMemCachedGet::SharedCtor() {
}

CGCMsgMemCachedGet::~CGCMsgMemCachedGet() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedGet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgMemCachedGet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgMemCachedGet::ArenaDtor(void* object) {
  CGCMsgMemCachedGet* _this = reinterpret_cast< CGCMsgMemCachedGet* >(object);
  (void)_this;
}
void CGCMsgMemCachedGet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgMemCachedGet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgMemCachedGet::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedGet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedGet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCMsgMemCachedGet.keys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedGet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedGet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsgMemCachedGet.keys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedGet)
  return target;
}

size_t CGCMsgMemCachedGet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedGet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedGet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgMemCachedGet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedGet::GetClassData() const { return &_class_data_; }

void CGCMsgMemCachedGet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgMemCachedGet *>(to)->MergeFrom(
      static_cast<const CGCMsgMemCachedGet &>(from));
}


void CGCMsgMemCachedGet::MergeFrom(const CGCMsgMemCachedGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedGet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedGet::CopyFrom(const CGCMsgMemCachedGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGet::InternalSwap(CGCMsgMemCachedGet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedGet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[20]);
}

// ===================================================================

class CGCMsgMemCachedGetResponse_ValueTag::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgMemCachedGetResponse_ValueTag>()._has_bits_);
  static void set_has_found(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedGetResponse.ValueTag)
}
CGCMsgMemCachedGetResponse_ValueTag::CGCMsgMemCachedGetResponse_ValueTag(const CGCMsgMemCachedGetResponse_ValueTag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  found_ = from.found_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedGetResponse.ValueTag)
}

inline void CGCMsgMemCachedGetResponse_ValueTag::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
found_ = false;
}

CGCMsgMemCachedGetResponse_ValueTag::~CGCMsgMemCachedGetResponse_ValueTag() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedGetResponse.ValueTag)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgMemCachedGetResponse_ValueTag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgMemCachedGetResponse_ValueTag::ArenaDtor(void* object) {
  CGCMsgMemCachedGetResponse_ValueTag* _this = reinterpret_cast< CGCMsgMemCachedGetResponse_ValueTag* >(object);
  (void)_this;
}
void CGCMsgMemCachedGetResponse_ValueTag::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgMemCachedGetResponse_ValueTag::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgMemCachedGetResponse_ValueTag::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedGetResponse.ValueTag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  found_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedGetResponse_ValueTag::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool found = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_found(&has_bits);
          found_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedGetResponse_ValueTag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedGetResponse.ValueTag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool found = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_found(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedGetResponse.ValueTag)
  return target;
}

size_t CGCMsgMemCachedGetResponse_ValueTag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedGetResponse.ValueTag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

    // optional bool found = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedGetResponse_ValueTag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgMemCachedGetResponse_ValueTag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedGetResponse_ValueTag::GetClassData() const { return &_class_data_; }

void CGCMsgMemCachedGetResponse_ValueTag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgMemCachedGetResponse_ValueTag *>(to)->MergeFrom(
      static_cast<const CGCMsgMemCachedGetResponse_ValueTag &>(from));
}


void CGCMsgMemCachedGetResponse_ValueTag::MergeFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedGetResponse.ValueTag)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      found_ = from.found_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedGetResponse_ValueTag::CopyFrom(const CGCMsgMemCachedGetResponse_ValueTag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedGetResponse.ValueTag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse_ValueTag::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse_ValueTag::InternalSwap(CGCMsgMemCachedGetResponse_ValueTag* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(found_, other->found_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedGetResponse_ValueTag::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[21]);
}

// ===================================================================

class CGCMsgMemCachedGetResponse::_Internal {
 public:
};

CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedGetResponse)
}
CGCMsgMemCachedGetResponse::CGCMsgMemCachedGetResponse(const CGCMsgMemCachedGetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedGetResponse)
}

inline void CGCMsgMemCachedGetResponse::SharedCtor() {
}

CGCMsgMemCachedGetResponse::~CGCMsgMemCachedGetResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedGetResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgMemCachedGetResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgMemCachedGetResponse::ArenaDtor(void* object) {
  CGCMsgMemCachedGetResponse* _this = reinterpret_cast< CGCMsgMemCachedGetResponse* >(object);
  (void)_this;
}
void CGCMsgMemCachedGetResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgMemCachedGetResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgMemCachedGetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedGetResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedGetResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedGetResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedGetResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedGetResponse)
  return target;
}

size_t CGCMsgMemCachedGetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedGetResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedGetResponse.ValueTag values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedGetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgMemCachedGetResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedGetResponse::GetClassData() const { return &_class_data_; }

void CGCMsgMemCachedGetResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgMemCachedGetResponse *>(to)->MergeFrom(
      static_cast<const CGCMsgMemCachedGetResponse &>(from));
}


void CGCMsgMemCachedGetResponse::MergeFrom(const CGCMsgMemCachedGetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedGetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedGetResponse::CopyFrom(const CGCMsgMemCachedGetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedGetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedGetResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedGetResponse::InternalSwap(CGCMsgMemCachedGetResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedGetResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[22]);
}

// ===================================================================

class CGCMsgMemCachedSet_KeyPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgMemCachedSet_KeyPair>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedSet.KeyPair)
}
CGCMsgMemCachedSet_KeyPair::CGCMsgMemCachedSet_KeyPair(const CGCMsgMemCachedSet_KeyPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedSet.KeyPair)
}

inline void CGCMsgMemCachedSet_KeyPair::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CGCMsgMemCachedSet_KeyPair::~CGCMsgMemCachedSet_KeyPair() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedSet.KeyPair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgMemCachedSet_KeyPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgMemCachedSet_KeyPair::ArenaDtor(void* object) {
  CGCMsgMemCachedSet_KeyPair* _this = reinterpret_cast< CGCMsgMemCachedSet_KeyPair* >(object);
  (void)_this;
}
void CGCMsgMemCachedSet_KeyPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgMemCachedSet_KeyPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgMemCachedSet_KeyPair::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedSet.KeyPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedSet_KeyPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCMsgMemCachedSet.KeyPair.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedSet_KeyPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedSet.KeyPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsgMemCachedSet.KeyPair.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedSet.KeyPair)
  return target;
}

size_t CGCMsgMemCachedSet_KeyPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedSet.KeyPair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional bytes value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedSet_KeyPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgMemCachedSet_KeyPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedSet_KeyPair::GetClassData() const { return &_class_data_; }

void CGCMsgMemCachedSet_KeyPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgMemCachedSet_KeyPair *>(to)->MergeFrom(
      static_cast<const CGCMsgMemCachedSet_KeyPair &>(from));
}


void CGCMsgMemCachedSet_KeyPair::MergeFrom(const CGCMsgMemCachedSet_KeyPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedSet.KeyPair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedSet_KeyPair::CopyFrom(const CGCMsgMemCachedSet_KeyPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedSet.KeyPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet_KeyPair::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet_KeyPair::InternalSwap(CGCMsgMemCachedSet_KeyPair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedSet_KeyPair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[23]);
}

// ===================================================================

class CGCMsgMemCachedSet::_Internal {
 public:
};

CGCMsgMemCachedSet::CGCMsgMemCachedSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedSet)
}
CGCMsgMemCachedSet::CGCMsgMemCachedSet(const CGCMsgMemCachedSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedSet)
}

inline void CGCMsgMemCachedSet::SharedCtor() {
}

CGCMsgMemCachedSet::~CGCMsgMemCachedSet() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedSet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgMemCachedSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgMemCachedSet::ArenaDtor(void* object) {
  CGCMsgMemCachedSet* _this = reinterpret_cast< CGCMsgMemCachedSet* >(object);
  (void)_this;
}
void CGCMsgMemCachedSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgMemCachedSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgMemCachedSet::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedSet)
  return target;
}

size_t CGCMsgMemCachedSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CGCMsgMemCachedSet.KeyPair keys = 1;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgMemCachedSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedSet::GetClassData() const { return &_class_data_; }

void CGCMsgMemCachedSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgMemCachedSet *>(to)->MergeFrom(
      static_cast<const CGCMsgMemCachedSet &>(from));
}


void CGCMsgMemCachedSet::MergeFrom(const CGCMsgMemCachedSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedSet::CopyFrom(const CGCMsgMemCachedSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedSet::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedSet::InternalSwap(CGCMsgMemCachedSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[24]);
}

// ===================================================================

class CGCMsgMemCachedDelete::_Internal {
 public:
};

CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedDelete)
}
CGCMsgMemCachedDelete::CGCMsgMemCachedDelete(const CGCMsgMemCachedDelete& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedDelete)
}

inline void CGCMsgMemCachedDelete::SharedCtor() {
}

CGCMsgMemCachedDelete::~CGCMsgMemCachedDelete() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedDelete)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgMemCachedDelete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgMemCachedDelete::ArenaDtor(void* object) {
  CGCMsgMemCachedDelete* _this = reinterpret_cast< CGCMsgMemCachedDelete* >(object);
  (void)_this;
}
void CGCMsgMemCachedDelete::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgMemCachedDelete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgMemCachedDelete::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedDelete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedDelete::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_keys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCMsgMemCachedDelete.keys");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedDelete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedDelete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->_internal_keys_size(); i < n; i++) {
    const auto& s = this->_internal_keys(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCMsgMemCachedDelete.keys");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedDelete)
  return target;
}

size_t CGCMsgMemCachedDelete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedDelete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(keys_.size());
  for (int i = 0, n = keys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      keys_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedDelete::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgMemCachedDelete::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedDelete::GetClassData() const { return &_class_data_; }

void CGCMsgMemCachedDelete::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgMemCachedDelete *>(to)->MergeFrom(
      static_cast<const CGCMsgMemCachedDelete &>(from));
}


void CGCMsgMemCachedDelete::MergeFrom(const CGCMsgMemCachedDelete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedDelete)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedDelete::CopyFrom(const CGCMsgMemCachedDelete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedDelete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedDelete::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedDelete::InternalSwap(CGCMsgMemCachedDelete* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedDelete::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[25]);
}

// ===================================================================

class CGCMsgMemCachedStats::_Internal {
 public:
};

CGCMsgMemCachedStats::CGCMsgMemCachedStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedStats)
}
CGCMsgMemCachedStats::CGCMsgMemCachedStats(const CGCMsgMemCachedStats& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedStats)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedStats::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[26]);
}

// ===================================================================

class CGCMsgMemCachedStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgMemCachedStatsResponse>()._has_bits_);
  static void set_has_curr_connections(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cmd_get(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cmd_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cmd_flush(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_get_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_get_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_delete_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_delete_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bytes_read(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bytes_written(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_limit_maxbytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_curr_items(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_evictions(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgMemCachedStatsResponse)
}
CGCMsgMemCachedStatsResponse::CGCMsgMemCachedStatsResponse(const CGCMsgMemCachedStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&curr_connections_, &from.curr_connections_,
    static_cast<size_t>(reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&curr_connections_)) + sizeof(bytes_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgMemCachedStatsResponse)
}

inline void CGCMsgMemCachedStatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&curr_connections_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bytes_) -
    reinterpret_cast<char*>(&curr_connections_)) + sizeof(bytes_));
}

CGCMsgMemCachedStatsResponse::~CGCMsgMemCachedStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgMemCachedStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgMemCachedStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgMemCachedStatsResponse::ArenaDtor(void* object) {
  CGCMsgMemCachedStatsResponse* _this = reinterpret_cast< CGCMsgMemCachedStatsResponse* >(object);
  (void)_this;
}
void CGCMsgMemCachedStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgMemCachedStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgMemCachedStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgMemCachedStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&curr_connections_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&delete_misses_) -
        reinterpret_cast<char*>(&curr_connections_)) + sizeof(delete_misses_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&bytes_read_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bytes_) -
        reinterpret_cast<char*>(&bytes_read_)) + sizeof(bytes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgMemCachedStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 curr_connections = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_curr_connections(&has_bits);
          curr_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cmd_get = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cmd_get(&has_bits);
          cmd_get_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cmd_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_cmd_set(&has_bits);
          cmd_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 cmd_flush = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_cmd_flush(&has_bits);
          cmd_flush_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 get_hits = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_get_hits(&has_bits);
          get_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 get_misses = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_get_misses(&has_bits);
          get_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 delete_hits = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_delete_hits(&has_bits);
          delete_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 delete_misses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_delete_misses(&has_bits);
          delete_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_read = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_bytes_read(&has_bits);
          bytes_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes_written = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_bytes_written(&has_bits);
          bytes_written_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 limit_maxbytes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_limit_maxbytes(&has_bits);
          limit_maxbytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 curr_items = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_curr_items(&has_bits);
          curr_items_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 evictions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_evictions(&has_bits);
          evictions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 bytes = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_bytes(&has_bits);
          bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgMemCachedStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgMemCachedStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 curr_connections = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_curr_connections(), target);
  }

  // optional uint64 cmd_get = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_cmd_get(), target);
  }

  // optional uint64 cmd_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_cmd_set(), target);
  }

  // optional uint64 cmd_flush = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_cmd_flush(), target);
  }

  // optional uint64 get_hits = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_get_hits(), target);
  }

  // optional uint64 get_misses = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_get_misses(), target);
  }

  // optional uint64 delete_hits = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_delete_hits(), target);
  }

  // optional uint64 delete_misses = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_delete_misses(), target);
  }

  // optional uint64 bytes_read = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_bytes_read(), target);
  }

  // optional uint64 bytes_written = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_bytes_written(), target);
  }

  // optional uint64 limit_maxbytes = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_limit_maxbytes(), target);
  }

  // optional uint64 curr_items = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(12, this->_internal_curr_items(), target);
  }

  // optional uint64 evictions = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_evictions(), target);
  }

  // optional uint64 bytes = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgMemCachedStatsResponse)
  return target;
}

size_t CGCMsgMemCachedStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgMemCachedStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 curr_connections = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_curr_connections());
    }

    // optional uint64 cmd_get = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cmd_get());
    }

    // optional uint64 cmd_set = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cmd_set());
    }

    // optional uint64 cmd_flush = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cmd_flush());
    }

    // optional uint64 get_hits = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_get_hits());
    }

    // optional uint64 get_misses = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_get_misses());
    }

    // optional uint64 delete_hits = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_delete_hits());
    }

    // optional uint64 delete_misses = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_delete_misses());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint64 bytes_read = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_read());
    }

    // optional uint64 bytes_written = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes_written());
    }

    // optional uint64 limit_maxbytes = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_limit_maxbytes());
    }

    // optional uint64 curr_items = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_curr_items());
    }

    // optional uint64 evictions = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_evictions());
    }

    // optional uint64 bytes = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_bytes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgMemCachedStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgMemCachedStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgMemCachedStatsResponse::GetClassData() const { return &_class_data_; }

void CGCMsgMemCachedStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgMemCachedStatsResponse *>(to)->MergeFrom(
      static_cast<const CGCMsgMemCachedStatsResponse &>(from));
}


void CGCMsgMemCachedStatsResponse::MergeFrom(const CGCMsgMemCachedStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgMemCachedStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      curr_connections_ = from.curr_connections_;
    }
    if (cached_has_bits & 0x00000002u) {
      cmd_get_ = from.cmd_get_;
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_set_ = from.cmd_set_;
    }
    if (cached_has_bits & 0x00000008u) {
      cmd_flush_ = from.cmd_flush_;
    }
    if (cached_has_bits & 0x00000010u) {
      get_hits_ = from.get_hits_;
    }
    if (cached_has_bits & 0x00000020u) {
      get_misses_ = from.get_misses_;
    }
    if (cached_has_bits & 0x00000040u) {
      delete_hits_ = from.delete_hits_;
    }
    if (cached_has_bits & 0x00000080u) {
      delete_misses_ = from.delete_misses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      bytes_read_ = from.bytes_read_;
    }
    if (cached_has_bits & 0x00000200u) {
      bytes_written_ = from.bytes_written_;
    }
    if (cached_has_bits & 0x00000400u) {
      limit_maxbytes_ = from.limit_maxbytes_;
    }
    if (cached_has_bits & 0x00000800u) {
      curr_items_ = from.curr_items_;
    }
    if (cached_has_bits & 0x00001000u) {
      evictions_ = from.evictions_;
    }
    if (cached_has_bits & 0x00002000u) {
      bytes_ = from.bytes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgMemCachedStatsResponse::CopyFrom(const CGCMsgMemCachedStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgMemCachedStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgMemCachedStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgMemCachedStatsResponse::InternalSwap(CGCMsgMemCachedStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, bytes_)
      + sizeof(CGCMsgMemCachedStatsResponse::bytes_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgMemCachedStatsResponse, curr_connections_)>(
          reinterpret_cast<char*>(&curr_connections_),
          reinterpret_cast<char*>(&other->curr_connections_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgMemCachedStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[27]);
}

// ===================================================================

class CGCMsgSQLStats::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgSQLStats>()._has_bits_);
  static void set_has_schema_catalog(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgSQLStats::CGCMsgSQLStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgSQLStats)
}
CGCMsgSQLStats::CGCMsgSQLStats(const CGCMsgSQLStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schema_catalog_ = from.schema_catalog_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgSQLStats)
}

inline void CGCMsgSQLStats::SharedCtor() {
schema_catalog_ = 0u;
}

CGCMsgSQLStats::~CGCMsgSQLStats() {
  // @@protoc_insertion_point(destructor:CGCMsgSQLStats)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgSQLStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgSQLStats::ArenaDtor(void* object) {
  CGCMsgSQLStats* _this = reinterpret_cast< CGCMsgSQLStats* >(object);
  (void)_this;
}
void CGCMsgSQLStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgSQLStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgSQLStats::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgSQLStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_catalog_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgSQLStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 schema_catalog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_schema_catalog(&has_bits);
          schema_catalog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgSQLStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgSQLStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 schema_catalog = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_schema_catalog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgSQLStats)
  return target;
}

size_t CGCMsgSQLStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgSQLStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 schema_catalog = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_schema_catalog());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgSQLStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgSQLStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgSQLStats::GetClassData() const { return &_class_data_; }

void CGCMsgSQLStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgSQLStats *>(to)->MergeFrom(
      static_cast<const CGCMsgSQLStats &>(from));
}


void CGCMsgSQLStats::MergeFrom(const CGCMsgSQLStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgSQLStats)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_schema_catalog()) {
    _internal_set_schema_catalog(from._internal_schema_catalog());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgSQLStats::CopyFrom(const CGCMsgSQLStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgSQLStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStats::IsInitialized() const {
  return true;
}

void CGCMsgSQLStats::InternalSwap(CGCMsgSQLStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(schema_catalog_, other->schema_catalog_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgSQLStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[28]);
}

// ===================================================================

class CGCMsgSQLStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgSQLStatsResponse>()._has_bits_);
  static void set_has_threads(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threads_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_threads_active(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operations_submitted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prepared_statements_executed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_non_prepared_statements_executed(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deadlock_retries(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_operations_timed_out_in_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
};

CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgSQLStatsResponse)
}
CGCMsgSQLStatsResponse::CGCMsgSQLStatsResponse(const CGCMsgSQLStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&threads_, &from.threads_,
    static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&threads_)) + sizeof(errors_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgSQLStatsResponse)
}

inline void CGCMsgSQLStatsResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&threads_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&errors_) -
    reinterpret_cast<char*>(&threads_)) + sizeof(errors_));
}

CGCMsgSQLStatsResponse::~CGCMsgSQLStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgSQLStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgSQLStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgSQLStatsResponse::ArenaDtor(void* object) {
  CGCMsgSQLStatsResponse* _this = reinterpret_cast< CGCMsgSQLStatsResponse* >(object);
  (void)_this;
}
void CGCMsgSQLStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgSQLStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgSQLStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgSQLStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&threads_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operations_timed_out_in_queue_) -
        reinterpret_cast<char*>(&threads_)) + sizeof(operations_timed_out_in_queue_));
  }
  errors_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgSQLStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 threads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_threads(&has_bits);
          threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 threads_connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_threads_connected(&has_bits);
          threads_connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 threads_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_threads_active(&has_bits);
          threads_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 operations_submitted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_operations_submitted(&has_bits);
          operations_submitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 prepared_statements_executed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prepared_statements_executed(&has_bits);
          prepared_statements_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 non_prepared_statements_executed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_non_prepared_statements_executed(&has_bits);
          non_prepared_statements_executed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 deadlock_retries = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_deadlock_retries(&has_bits);
          deadlock_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 operations_timed_out_in_queue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_operations_timed_out_in_queue(&has_bits);
          operations_timed_out_in_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_errors(&has_bits);
          errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgSQLStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgSQLStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 threads = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_threads(), target);
  }

  // optional uint32 threads_connected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_threads_connected(), target);
  }

  // optional uint32 threads_active = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_threads_active(), target);
  }

  // optional uint32 operations_submitted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_operations_submitted(), target);
  }

  // optional uint32 prepared_statements_executed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_prepared_statements_executed(), target);
  }

  // optional uint32 non_prepared_statements_executed = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_non_prepared_statements_executed(), target);
  }

  // optional uint32 deadlock_retries = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_deadlock_retries(), target);
  }

  // optional uint32 operations_timed_out_in_queue = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_operations_timed_out_in_queue(), target);
  }

  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgSQLStatsResponse)
  return target;
}

size_t CGCMsgSQLStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgSQLStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 threads = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_threads());
    }

    // optional uint32 threads_connected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_threads_connected());
    }

    // optional uint32 threads_active = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_threads_active());
    }

    // optional uint32 operations_submitted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_operations_submitted());
    }

    // optional uint32 prepared_statements_executed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_prepared_statements_executed());
    }

    // optional uint32 non_prepared_statements_executed = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_non_prepared_statements_executed());
    }

    // optional uint32 deadlock_retries = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_deadlock_retries());
    }

    // optional uint32 operations_timed_out_in_queue = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_operations_timed_out_in_queue());
    }

  }
  // optional uint32 errors = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_errors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgSQLStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgSQLStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgSQLStatsResponse::GetClassData() const { return &_class_data_; }

void CGCMsgSQLStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgSQLStatsResponse *>(to)->MergeFrom(
      static_cast<const CGCMsgSQLStatsResponse &>(from));
}


void CGCMsgSQLStatsResponse::MergeFrom(const CGCMsgSQLStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgSQLStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      threads_ = from.threads_;
    }
    if (cached_has_bits & 0x00000002u) {
      threads_connected_ = from.threads_connected_;
    }
    if (cached_has_bits & 0x00000004u) {
      threads_active_ = from.threads_active_;
    }
    if (cached_has_bits & 0x00000008u) {
      operations_submitted_ = from.operations_submitted_;
    }
    if (cached_has_bits & 0x00000010u) {
      prepared_statements_executed_ = from.prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000020u) {
      non_prepared_statements_executed_ = from.non_prepared_statements_executed_;
    }
    if (cached_has_bits & 0x00000040u) {
      deadlock_retries_ = from.deadlock_retries_;
    }
    if (cached_has_bits & 0x00000080u) {
      operations_timed_out_in_queue_ = from.operations_timed_out_in_queue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_errors(from._internal_errors());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgSQLStatsResponse::CopyFrom(const CGCMsgSQLStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgSQLStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSQLStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgSQLStatsResponse::InternalSwap(CGCMsgSQLStatsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgSQLStatsResponse, errors_)
      + sizeof(CGCMsgSQLStatsResponse::errors_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgSQLStatsResponse, threads_)>(
          reinterpret_cast<char*>(&threads_),
          reinterpret_cast<char*>(&other->threads_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgSQLStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[29]);
}

// ===================================================================

class CMsgAMAddFreeLicense::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMAddFreeLicense>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ip_public(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packageid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_store_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMAddFreeLicense)
}
CMsgAMAddFreeLicense::CMsgAMAddFreeLicense(const CMsgAMAddFreeLicense& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  store_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    store_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_store_country_code()) {
    store_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_store_country_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(packageid_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMAddFreeLicense)
}

inline void CMsgAMAddFreeLicense::SharedCtor() {
store_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  store_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packageid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(packageid_));
}

CMsgAMAddFreeLicense::~CMsgAMAddFreeLicense() {
  // @@protoc_insertion_point(destructor:CMsgAMAddFreeLicense)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMAddFreeLicense::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  store_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMAddFreeLicense::ArenaDtor(void* object) {
  CMsgAMAddFreeLicense* _this = reinterpret_cast< CMsgAMAddFreeLicense* >(object);
  (void)_this;
}
void CMsgAMAddFreeLicense::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMAddFreeLicense::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMAddFreeLicense::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMAddFreeLicense)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    store_country_code_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packageid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(packageid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMAddFreeLicense::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ip_public = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ip_public(&has_bits);
          ip_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 packageid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_packageid(&has_bits);
          packageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string store_country_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_store_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAMAddFreeLicense.store_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMAddFreeLicense::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMAddFreeLicense)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 ip_public = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ip_public(), target);
  }

  // optional uint32 packageid = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_packageid(), target);
  }

  // optional string store_country_code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_store_country_code().data(), static_cast<int>(this->_internal_store_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMAddFreeLicense.store_country_code");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_store_country_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMAddFreeLicense)
  return target;
}

size_t CMsgAMAddFreeLicense::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMAddFreeLicense)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string store_country_code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_store_country_code());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 ip_public = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ip_public());
    }

    // optional uint32 packageid = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_packageid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMAddFreeLicense::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMAddFreeLicense::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMAddFreeLicense::GetClassData() const { return &_class_data_; }

void CMsgAMAddFreeLicense::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMAddFreeLicense *>(to)->MergeFrom(
      static_cast<const CMsgAMAddFreeLicense &>(from));
}


void CMsgAMAddFreeLicense::MergeFrom(const CMsgAMAddFreeLicense& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMAddFreeLicense)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_store_country_code(from._internal_store_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ip_public_ = from.ip_public_;
    }
    if (cached_has_bits & 0x00000008u) {
      packageid_ = from.packageid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMAddFreeLicense::CopyFrom(const CMsgAMAddFreeLicense& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMAddFreeLicense)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicense::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicense::InternalSwap(CMsgAMAddFreeLicense* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &store_country_code_, lhs_arena,
      &other->store_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicense, packageid_)
      + sizeof(CMsgAMAddFreeLicense::packageid_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicense, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMAddFreeLicense::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[30]);
}

// ===================================================================

class CMsgAMAddFreeLicenseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMAddFreeLicenseResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purchase_result_detail(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_transid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMAddFreeLicenseResponse)
}
CMsgAMAddFreeLicenseResponse::CMsgAMAddFreeLicenseResponse(const CMsgAMAddFreeLicenseResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&transid_, &from.transid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&transid_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMAddFreeLicenseResponse)
}

inline void CMsgAMAddFreeLicenseResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&purchase_result_detail_) -
    reinterpret_cast<char*>(&transid_)) + sizeof(purchase_result_detail_));
eresult_ = 2;
}

CMsgAMAddFreeLicenseResponse::~CMsgAMAddFreeLicenseResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMAddFreeLicenseResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMAddFreeLicenseResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMAddFreeLicenseResponse::ArenaDtor(void* object) {
  CMsgAMAddFreeLicenseResponse* _this = reinterpret_cast< CMsgAMAddFreeLicenseResponse* >(object);
  (void)_this;
}
void CMsgAMAddFreeLicenseResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMAddFreeLicenseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMAddFreeLicenseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMAddFreeLicenseResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&transid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&purchase_result_detail_) -
        reinterpret_cast<char*>(&transid_)) + sizeof(purchase_result_detail_));
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMAddFreeLicenseResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 purchase_result_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_purchase_result_detail(&has_bits);
          purchase_result_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 transid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_transid(&has_bits);
          transid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMAddFreeLicenseResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMAddFreeLicenseResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 purchase_result_detail = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_purchase_result_detail(), target);
  }

  // optional fixed64 transid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(3, this->_internal_transid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMAddFreeLicenseResponse)
  return target;
}

size_t CMsgAMAddFreeLicenseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMAddFreeLicenseResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 transid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 purchase_result_detail = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_purchase_result_detail());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMAddFreeLicenseResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMAddFreeLicenseResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMAddFreeLicenseResponse::GetClassData() const { return &_class_data_; }

void CMsgAMAddFreeLicenseResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMAddFreeLicenseResponse *>(to)->MergeFrom(
      static_cast<const CMsgAMAddFreeLicenseResponse &>(from));
}


void CMsgAMAddFreeLicenseResponse::MergeFrom(const CMsgAMAddFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMAddFreeLicenseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      transid_ = from.transid_;
    }
    if (cached_has_bits & 0x00000002u) {
      purchase_result_detail_ = from.purchase_result_detail_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMAddFreeLicenseResponse::CopyFrom(const CMsgAMAddFreeLicenseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMAddFreeLicenseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMAddFreeLicenseResponse::IsInitialized() const {
  return true;
}

void CMsgAMAddFreeLicenseResponse::InternalSwap(CMsgAMAddFreeLicenseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, purchase_result_detail_)
      + sizeof(CMsgAMAddFreeLicenseResponse::purchase_result_detail_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMAddFreeLicenseResponse, transid_)>(
          reinterpret_cast<char*>(&transid_),
          reinterpret_cast<char*>(&other->transid_));
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMAddFreeLicenseResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[31]);
}

// ===================================================================

class CGCMsgGetIPLocation::_Internal {
 public:
};

CGCMsgGetIPLocation::CGCMsgGetIPLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ips_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetIPLocation)
}
CGCMsgGetIPLocation::CGCMsgGetIPLocation(const CGCMsgGetIPLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetIPLocation)
}

inline void CGCMsgGetIPLocation::SharedCtor() {
}

CGCMsgGetIPLocation::~CGCMsgGetIPLocation() {
  // @@protoc_insertion_point(destructor:CGCMsgGetIPLocation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgGetIPLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgGetIPLocation::ArenaDtor(void* object) {
  CGCMsgGetIPLocation* _this = reinterpret_cast< CGCMsgGetIPLocation* >(object);
  (void)_this;
}
void CGCMsgGetIPLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGetIPLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGetIPLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetIPLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetIPLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed32 ips = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ips(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr));
            ptr += sizeof(uint32_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_ips(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetIPLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetIPLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  for (int i = 0, n = this->_internal_ips_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(1, this->_internal_ips(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetIPLocation)
  return target;
}

size_t CGCMsgGetIPLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetIPLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 ips = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_ips_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ips_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetIPLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgGetIPLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetIPLocation::GetClassData() const { return &_class_data_; }

void CGCMsgGetIPLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgGetIPLocation *>(to)->MergeFrom(
      static_cast<const CGCMsgGetIPLocation &>(from));
}


void CGCMsgGetIPLocation::MergeFrom(const CGCMsgGetIPLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetIPLocation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ips_.MergeFrom(from.ips_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetIPLocation::CopyFrom(const CGCMsgGetIPLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetIPLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocation::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocation::InternalSwap(CGCMsgGetIPLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ips_.InternalSwap(&other->ips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetIPLocation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[32]);
}

// ===================================================================

class CIPLocationInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CIPLocationInfo>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_city(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CIPLocationInfo::CIPLocationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CIPLocationInfo)
}
CIPLocationInfo::CIPLocationInfo(const CIPLocationInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country()) {
    country_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country(), 
      GetArenaForAllocation());
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_state()) {
    state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_state(), 
      GetArenaForAllocation());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_city()) {
    city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_city(), 
      GetArenaForAllocation());
  }
  ::memcpy(&ip_, &from.ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:CIPLocationInfo)
}

inline void CIPLocationInfo::SharedCtor() {
country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ip_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&ip_)) + sizeof(longitude_));
}

CIPLocationInfo::~CIPLocationInfo() {
  // @@protoc_insertion_point(destructor:CIPLocationInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CIPLocationInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CIPLocationInfo::ArenaDtor(void* object) {
  CIPLocationInfo* _this = reinterpret_cast< CIPLocationInfo* >(object);
  (void)_this;
}
void CIPLocationInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CIPLocationInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CIPLocationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CIPLocationInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      state_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      city_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&ip_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&ip_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CIPLocationInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ip(&has_bits);
          ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CIPLocationInfo.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_state();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CIPLocationInfo.state");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string city = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CIPLocationInfo.city");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CIPLocationInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CIPLocationInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ip = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ip(), target);
  }

  // optional float latitude = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  // optional float longitude = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_longitude(), target);
  }

  // optional string country = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CIPLocationInfo.country");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_country(), target);
  }

  // optional string state = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CIPLocationInfo.state");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_state(), target);
  }

  // optional string city = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CIPLocationInfo.city");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_city(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CIPLocationInfo)
  return target;
}

size_t CIPLocationInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CIPLocationInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string country = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country());
    }

    // optional string state = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_state());
    }

    // optional string city = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_city());
    }

    // optional uint32 ip = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_ip());
    }

    // optional float latitude = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float longitude = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CIPLocationInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CIPLocationInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CIPLocationInfo::GetClassData() const { return &_class_data_; }

void CIPLocationInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CIPLocationInfo *>(to)->MergeFrom(
      static_cast<const CIPLocationInfo &>(from));
}


void CIPLocationInfo::MergeFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CIPLocationInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_state(from._internal_state());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_city(from._internal_city());
    }
    if (cached_has_bits & 0x00000008u) {
      ip_ = from.ip_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CIPLocationInfo::CopyFrom(const CIPLocationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CIPLocationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CIPLocationInfo::IsInitialized() const {
  return true;
}

void CIPLocationInfo::InternalSwap(CIPLocationInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_, lhs_arena,
      &other->country_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &state_, lhs_arena,
      &other->state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &city_, lhs_arena,
      &other->city_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CIPLocationInfo, longitude_)
      + sizeof(CIPLocationInfo::longitude_)
      - PROTOBUF_FIELD_OFFSET(CIPLocationInfo, ip_)>(
          reinterpret_cast<char*>(&ip_),
          reinterpret_cast<char*>(&other->ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CIPLocationInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[33]);
}

// ===================================================================

class CGCMsgGetIPLocationResponse::_Internal {
 public:
};

CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetIPLocationResponse)
}
CGCMsgGetIPLocationResponse::CGCMsgGetIPLocationResponse(const CGCMsgGetIPLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetIPLocationResponse)
}

inline void CGCMsgGetIPLocationResponse::SharedCtor() {
}

CGCMsgGetIPLocationResponse::~CGCMsgGetIPLocationResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGetIPLocationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgGetIPLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCMsgGetIPLocationResponse::ArenaDtor(void* object) {
  CGCMsgGetIPLocationResponse* _this = reinterpret_cast< CGCMsgGetIPLocationResponse* >(object);
  (void)_this;
}
void CGCMsgGetIPLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGetIPLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGetIPLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetIPLocationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetIPLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CIPLocationInfo infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetIPLocationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetIPLocationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CIPLocationInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetIPLocationResponse)
  return target;
}

size_t CGCMsgGetIPLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetIPLocationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CIPLocationInfo infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetIPLocationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgGetIPLocationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetIPLocationResponse::GetClassData() const { return &_class_data_; }

void CGCMsgGetIPLocationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgGetIPLocationResponse *>(to)->MergeFrom(
      static_cast<const CGCMsgGetIPLocationResponse &>(from));
}


void CGCMsgGetIPLocationResponse::MergeFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetIPLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetIPLocationResponse::CopyFrom(const CGCMsgGetIPLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetIPLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetIPLocationResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetIPLocationResponse::InternalSwap(CGCMsgGetIPLocationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetIPLocationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[34]);
}

// ===================================================================

class CGCMsgSystemStatsSchema::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgSystemStatsSchema>()._has_bits_);
  static void set_has_gc_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_schema_kv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgSystemStatsSchema)
}
CGCMsgSystemStatsSchema::CGCMsgSystemStatsSchema(const CGCMsgSystemStatsSchema& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  schema_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    schema_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_schema_kv()) {
    schema_kv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_schema_kv(), 
      GetArenaForAllocation());
  }
  gc_app_id_ = from.gc_app_id_;
  // @@protoc_insertion_point(copy_constructor:CGCMsgSystemStatsSchema)
}

inline void CGCMsgSystemStatsSchema::SharedCtor() {
schema_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  schema_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gc_app_id_ = 0u;
}

CGCMsgSystemStatsSchema::~CGCMsgSystemStatsSchema() {
  // @@protoc_insertion_point(destructor:CGCMsgSystemStatsSchema)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgSystemStatsSchema::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  schema_kv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgSystemStatsSchema::ArenaDtor(void* object) {
  CGCMsgSystemStatsSchema* _this = reinterpret_cast< CGCMsgSystemStatsSchema* >(object);
  (void)_this;
}
void CGCMsgSystemStatsSchema::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgSystemStatsSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgSystemStatsSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgSystemStatsSchema)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    schema_kv_.ClearNonDefaultToEmpty();
  }
  gc_app_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgSystemStatsSchema::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gc_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gc_app_id(&has_bits);
          gc_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes schema_kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_schema_kv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgSystemStatsSchema::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgSystemStatsSchema)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gc_app_id(), target);
  }

  // optional bytes schema_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_schema_kv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgSystemStatsSchema)
  return target;
}

size_t CGCMsgSystemStatsSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgSystemStatsSchema)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes schema_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_schema_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gc_app_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgSystemStatsSchema::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgSystemStatsSchema::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgSystemStatsSchema::GetClassData() const { return &_class_data_; }

void CGCMsgSystemStatsSchema::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgSystemStatsSchema *>(to)->MergeFrom(
      static_cast<const CGCMsgSystemStatsSchema &>(from));
}


void CGCMsgSystemStatsSchema::MergeFrom(const CGCMsgSystemStatsSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgSystemStatsSchema)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_schema_kv(from._internal_schema_kv());
    }
    if (cached_has_bits & 0x00000002u) {
      gc_app_id_ = from.gc_app_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgSystemStatsSchema::CopyFrom(const CGCMsgSystemStatsSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgSystemStatsSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgSystemStatsSchema::IsInitialized() const {
  return true;
}

void CGCMsgSystemStatsSchema::InternalSwap(CGCMsgSystemStatsSchema* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &schema_kv_, lhs_arena,
      &other->schema_kv_, rhs_arena
  );
  swap(gc_app_id_, other->gc_app_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgSystemStatsSchema::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[35]);
}

// ===================================================================

class CGCMsgGetSystemStats::_Internal {
 public:
};

CGCMsgGetSystemStats::CGCMsgGetSystemStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetSystemStats)
}
CGCMsgGetSystemStats::CGCMsgGetSystemStats(const CGCMsgGetSystemStats& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetSystemStats)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetSystemStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetSystemStats::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetSystemStats::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[36]);
}

// ===================================================================

class CGCMsgGetSystemStatsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCMsgGetSystemStatsResponse>()._has_bits_);
  static void set_has_gc_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_stats_kv(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_active_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_yielding_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_user_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_game_server_sessions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_socaches(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_socaches_to_unload(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_socaches_loading(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_writeback_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_steamid_locks(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_logon_queue(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_logon_jobs(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCMsgGetSystemStatsResponse)
}
CGCMsgGetSystemStatsResponse::CGCMsgGetSystemStatsResponse(const CGCMsgGetSystemStatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stats_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stats_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_stats_kv()) {
    stats_kv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stats_kv(), 
      GetArenaForAllocation());
  }
  ::memcpy(&gc_app_id_, &from.gc_app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&logon_jobs_) -
    reinterpret_cast<char*>(&gc_app_id_)) + sizeof(logon_jobs_));
  // @@protoc_insertion_point(copy_constructor:CGCMsgGetSystemStatsResponse)
}

inline void CGCMsgGetSystemStatsResponse::SharedCtor() {
stats_kv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stats_kv_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&gc_app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&logon_jobs_) -
    reinterpret_cast<char*>(&gc_app_id_)) + sizeof(logon_jobs_));
}

CGCMsgGetSystemStatsResponse::~CGCMsgGetSystemStatsResponse() {
  // @@protoc_insertion_point(destructor:CGCMsgGetSystemStatsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCMsgGetSystemStatsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stats_kv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCMsgGetSystemStatsResponse::ArenaDtor(void* object) {
  CGCMsgGetSystemStatsResponse* _this = reinterpret_cast< CGCMsgGetSystemStatsResponse* >(object);
  (void)_this;
}
void CGCMsgGetSystemStatsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCMsgGetSystemStatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCMsgGetSystemStatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCMsgGetSystemStatsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    stats_kv_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&gc_app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socaches_to_unload_) -
        reinterpret_cast<char*>(&gc_app_id_)) + sizeof(socaches_to_unload_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&socaches_loading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logon_jobs_) -
        reinterpret_cast<char*>(&socaches_loading_)) + sizeof(logon_jobs_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCMsgGetSystemStatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 gc_app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_gc_app_id(&has_bits);
          gc_app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes stats_kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_stats_kv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 active_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_active_jobs(&has_bits);
          active_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 yielding_jobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_yielding_jobs(&has_bits);
          yielding_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 user_sessions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_user_sessions(&has_bits);
          user_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 game_server_sessions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_game_server_sessions(&has_bits);
          game_server_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socaches = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_socaches(&has_bits);
          socaches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socaches_to_unload = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_socaches_to_unload(&has_bits);
          socaches_to_unload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 socaches_loading = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_socaches_loading(&has_bits);
          socaches_loading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 writeback_queue = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_writeback_queue(&has_bits);
          writeback_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steamid_locks = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_steamid_locks(&has_bits);
          steamid_locks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 logon_queue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_logon_queue(&has_bits);
          logon_queue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 logon_jobs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_logon_jobs(&has_bits);
          logon_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCMsgGetSystemStatsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCMsgGetSystemStatsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 gc_app_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gc_app_id(), target);
  }

  // optional bytes stats_kv = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_stats_kv(), target);
  }

  // optional uint32 active_jobs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_active_jobs(), target);
  }

  // optional uint32 yielding_jobs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_yielding_jobs(), target);
  }

  // optional uint32 user_sessions = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_user_sessions(), target);
  }

  // optional uint32 game_server_sessions = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_game_server_sessions(), target);
  }

  // optional uint32 socaches = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_socaches(), target);
  }

  // optional uint32 socaches_to_unload = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_socaches_to_unload(), target);
  }

  // optional uint32 socaches_loading = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_socaches_loading(), target);
  }

  // optional uint32 writeback_queue = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_writeback_queue(), target);
  }

  // optional uint32 steamid_locks = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_steamid_locks(), target);
  }

  // optional uint32 logon_queue = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_logon_queue(), target);
  }

  // optional uint32 logon_jobs = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_logon_jobs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCMsgGetSystemStatsResponse)
  return target;
}

size_t CGCMsgGetSystemStatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCMsgGetSystemStatsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes stats_kv = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_stats_kv());
    }

    // optional uint32 gc_app_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gc_app_id());
    }

    // optional uint32 active_jobs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_active_jobs());
    }

    // optional uint32 yielding_jobs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_yielding_jobs());
    }

    // optional uint32 user_sessions = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_user_sessions());
    }

    // optional uint32 game_server_sessions = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_game_server_sessions());
    }

    // optional uint32 socaches = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_socaches());
    }

    // optional uint32 socaches_to_unload = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_socaches_to_unload());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional uint32 socaches_loading = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_socaches_loading());
    }

    // optional uint32 writeback_queue = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_writeback_queue());
    }

    // optional uint32 steamid_locks = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steamid_locks());
    }

    // optional uint32 logon_queue = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_logon_queue());
    }

    // optional uint32 logon_jobs = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_logon_jobs());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCMsgGetSystemStatsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCMsgGetSystemStatsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCMsgGetSystemStatsResponse::GetClassData() const { return &_class_data_; }

void CGCMsgGetSystemStatsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCMsgGetSystemStatsResponse *>(to)->MergeFrom(
      static_cast<const CGCMsgGetSystemStatsResponse &>(from));
}


void CGCMsgGetSystemStatsResponse::MergeFrom(const CGCMsgGetSystemStatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCMsgGetSystemStatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_stats_kv(from._internal_stats_kv());
    }
    if (cached_has_bits & 0x00000002u) {
      gc_app_id_ = from.gc_app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      active_jobs_ = from.active_jobs_;
    }
    if (cached_has_bits & 0x00000008u) {
      yielding_jobs_ = from.yielding_jobs_;
    }
    if (cached_has_bits & 0x00000010u) {
      user_sessions_ = from.user_sessions_;
    }
    if (cached_has_bits & 0x00000020u) {
      game_server_sessions_ = from.game_server_sessions_;
    }
    if (cached_has_bits & 0x00000040u) {
      socaches_ = from.socaches_;
    }
    if (cached_has_bits & 0x00000080u) {
      socaches_to_unload_ = from.socaches_to_unload_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      socaches_loading_ = from.socaches_loading_;
    }
    if (cached_has_bits & 0x00000200u) {
      writeback_queue_ = from.writeback_queue_;
    }
    if (cached_has_bits & 0x00000400u) {
      steamid_locks_ = from.steamid_locks_;
    }
    if (cached_has_bits & 0x00000800u) {
      logon_queue_ = from.logon_queue_;
    }
    if (cached_has_bits & 0x00001000u) {
      logon_jobs_ = from.logon_jobs_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCMsgGetSystemStatsResponse::CopyFrom(const CGCMsgGetSystemStatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCMsgGetSystemStatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCMsgGetSystemStatsResponse::IsInitialized() const {
  return true;
}

void CGCMsgGetSystemStatsResponse::InternalSwap(CGCMsgGetSystemStatsResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stats_kv_, lhs_arena,
      &other->stats_kv_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, logon_jobs_)
      + sizeof(CGCMsgGetSystemStatsResponse::logon_jobs_)
      - PROTOBUF_FIELD_OFFSET(CGCMsgGetSystemStatsResponse, gc_app_id_)>(
          reinterpret_cast<char*>(&gc_app_id_),
          reinterpret_cast<char*>(&other->gc_app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCMsgGetSystemStatsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[37]);
}

// ===================================================================

class CMsgAMSendEmail_ReplacementToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmail_ReplacementToken>()._has_bits_);
  static void set_has_token_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_token_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmail.ReplacementToken)
}
CMsgAMSendEmail_ReplacementToken::CMsgAMSendEmail_ReplacementToken(const CMsgAMSendEmail_ReplacementToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_name()) {
    token_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_name(), 
      GetArenaForAllocation());
  }
  token_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_value()) {
    token_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmail.ReplacementToken)
}

inline void CMsgAMSendEmail_ReplacementToken::SharedCtor() {
token_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
token_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgAMSendEmail_ReplacementToken::~CMsgAMSendEmail_ReplacementToken() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmail.ReplacementToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMSendEmail_ReplacementToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMSendEmail_ReplacementToken::ArenaDtor(void* object) {
  CMsgAMSendEmail_ReplacementToken* _this = reinterpret_cast< CMsgAMSendEmail_ReplacementToken* >(object);
  (void)_this;
}
void CMsgAMSendEmail_ReplacementToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMSendEmail_ReplacementToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMSendEmail_ReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmail.ReplacementToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      token_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      token_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmail_ReplacementToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string token_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAMSendEmail.ReplacementToken.token_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string token_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAMSendEmail.ReplacementToken.token_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmail_ReplacementToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmail.ReplacementToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string token_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_name().data(), static_cast<int>(this->_internal_token_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMSendEmail.ReplacementToken.token_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_name(), target);
  }

  // optional string token_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_value().data(), static_cast<int>(this->_internal_token_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMSendEmail.ReplacementToken.token_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmail.ReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_ReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmail.ReplacementToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string token_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_name());
    }

    // optional string token_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmail_ReplacementToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMSendEmail_ReplacementToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmail_ReplacementToken::GetClassData() const { return &_class_data_; }

void CMsgAMSendEmail_ReplacementToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMSendEmail_ReplacementToken *>(to)->MergeFrom(
      static_cast<const CMsgAMSendEmail_ReplacementToken &>(from));
}


void CMsgAMSendEmail_ReplacementToken::MergeFrom(const CMsgAMSendEmail_ReplacementToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmail.ReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token_name(from._internal_token_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_token_value(from._internal_token_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmail_ReplacementToken::CopyFrom(const CMsgAMSendEmail_ReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmail.ReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_ReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_ReplacementToken::InternalSwap(CMsgAMSendEmail_ReplacementToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_name_, lhs_arena,
      &other->token_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_value_, lhs_arena,
      &other->token_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmail_ReplacementToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[38]);
}

// ===================================================================

class CMsgAMSendEmail_PersonaNameReplacementToken::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmail_PersonaNameReplacementToken>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmail.PersonaNameReplacementToken)
}
CMsgAMSendEmail_PersonaNameReplacementToken::CMsgAMSendEmail_PersonaNameReplacementToken(const CMsgAMSendEmail_PersonaNameReplacementToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    token_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_token_name()) {
    token_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token_name(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmail.PersonaNameReplacementToken)
}

inline void CMsgAMSendEmail_PersonaNameReplacementToken::SharedCtor() {
token_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  token_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CMsgAMSendEmail_PersonaNameReplacementToken::~CMsgAMSendEmail_PersonaNameReplacementToken() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmail.PersonaNameReplacementToken)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMSendEmail_PersonaNameReplacementToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  token_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgAMSendEmail_PersonaNameReplacementToken::ArenaDtor(void* object) {
  CMsgAMSendEmail_PersonaNameReplacementToken* _this = reinterpret_cast< CMsgAMSendEmail_PersonaNameReplacementToken* >(object);
  (void)_this;
}
void CMsgAMSendEmail_PersonaNameReplacementToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMSendEmail_PersonaNameReplacementToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    token_name_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmail_PersonaNameReplacementToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string token_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmail_PersonaNameReplacementToken::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string token_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_token_name().data(), static_cast<int>(this->_internal_token_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgAMSendEmail.PersonaNameReplacementToken.token_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmail.PersonaNameReplacementToken)
  return target;
}

size_t CMsgAMSendEmail_PersonaNameReplacementToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string token_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_token_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmail_PersonaNameReplacementToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMSendEmail_PersonaNameReplacementToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmail_PersonaNameReplacementToken::GetClassData() const { return &_class_data_; }

void CMsgAMSendEmail_PersonaNameReplacementToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMSendEmail_PersonaNameReplacementToken *>(to)->MergeFrom(
      static_cast<const CMsgAMSendEmail_PersonaNameReplacementToken &>(from));
}


void CMsgAMSendEmail_PersonaNameReplacementToken::MergeFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_token_name(from._internal_token_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmail_PersonaNameReplacementToken::CopyFrom(const CMsgAMSendEmail_PersonaNameReplacementToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmail.PersonaNameReplacementToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail_PersonaNameReplacementToken::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail_PersonaNameReplacementToken::InternalSwap(CMsgAMSendEmail_PersonaNameReplacementToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &token_name_, lhs_arena,
      &other->token_name_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmail_PersonaNameReplacementToken::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[39]);
}

// ===================================================================

class CMsgAMSendEmail::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmail>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_email_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_gc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgAMSendEmail::CMsgAMSendEmail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  persona_name_tokens_(arena),
  tokens_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmail)
}
CMsgAMSendEmail::CMsgAMSendEmail(const CMsgAMSendEmail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      persona_name_tokens_(from.persona_name_tokens_),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(source_gc_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmail)
}

inline void CMsgAMSendEmail::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(source_gc_));
}

CMsgAMSendEmail::~CMsgAMSendEmail() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmail)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMSendEmail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMSendEmail::ArenaDtor(void* object) {
  CMsgAMSendEmail* _this = reinterpret_cast< CMsgAMSendEmail* >(object);
  (void)_this;
}
void CMsgAMSendEmail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMSendEmail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMSendEmail::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  persona_name_tokens_.Clear();
  tokens_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_gc_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(source_gc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_email_msg_type(&has_bits);
          email_msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_email_format(&has_bits);
          email_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_persona_name_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 source_gc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_source_gc(&has_bits);
          source_gc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_email_msg_type(), target);
  }

  // optional uint32 email_format = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_email_format(), target);
  }

  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_persona_name_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_persona_name_tokens(i), target, stream);
  }

  // optional uint32 source_gc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_source_gc(), target);
  }

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tokens_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_tokens(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmail)
  return target;
}

size_t CMsgAMSendEmail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgAMSendEmail.PersonaNameReplacementToken persona_name_tokens = 5;
  total_size += 1UL * this->_internal_persona_name_tokens_size();
  for (const auto& msg : this->persona_name_tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .CMsgAMSendEmail.ReplacementToken tokens = 7;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 email_msg_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_email_msg_type());
    }

    // optional uint32 email_format = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_email_format());
    }

    // optional uint32 source_gc = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_source_gc());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMSendEmail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmail::GetClassData() const { return &_class_data_; }

void CMsgAMSendEmail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMSendEmail *>(to)->MergeFrom(
      static_cast<const CMsgAMSendEmail &>(from));
}


void CMsgAMSendEmail::MergeFrom(const CMsgAMSendEmail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  persona_name_tokens_.MergeFrom(from.persona_name_tokens_);
  tokens_.MergeFrom(from.tokens_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_msg_type_ = from.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      email_format_ = from.email_format_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_gc_ = from.source_gc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmail::CopyFrom(const CMsgAMSendEmail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmail::IsInitialized() const {
  return true;
}

void CMsgAMSendEmail::InternalSwap(CMsgAMSendEmail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_tokens_.InternalSwap(&other->persona_name_tokens_);
  tokens_.InternalSwap(&other->tokens_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMSendEmail, source_gc_)
      + sizeof(CMsgAMSendEmail::source_gc_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMSendEmail, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[40]);
}

// ===================================================================

class CMsgAMSendEmailResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMSendEmailResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMSendEmailResponse)
}
CMsgAMSendEmailResponse::CMsgAMSendEmailResponse(const CMsgAMSendEmailResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgAMSendEmailResponse)
}

inline void CMsgAMSendEmailResponse::SharedCtor() {
eresult_ = 2u;
}

CMsgAMSendEmailResponse::~CMsgAMSendEmailResponse() {
  // @@protoc_insertion_point(destructor:CMsgAMSendEmailResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMSendEmailResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMSendEmailResponse::ArenaDtor(void* object) {
  CMsgAMSendEmailResponse* _this = reinterpret_cast< CMsgAMSendEmailResponse* >(object);
  (void)_this;
}
void CMsgAMSendEmailResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMSendEmailResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMSendEmailResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMSendEmailResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMSendEmailResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMSendEmailResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMSendEmailResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMSendEmailResponse)
  return target;
}

size_t CMsgAMSendEmailResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMSendEmailResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMSendEmailResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMSendEmailResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMSendEmailResponse::GetClassData() const { return &_class_data_; }

void CMsgAMSendEmailResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMSendEmailResponse *>(to)->MergeFrom(
      static_cast<const CMsgAMSendEmailResponse &>(from));
}


void CMsgAMSendEmailResponse::MergeFrom(const CMsgAMSendEmailResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMSendEmailResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMSendEmailResponse::CopyFrom(const CMsgAMSendEmailResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMSendEmailResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMSendEmailResponse::IsInitialized() const {
  return true;
}

void CMsgAMSendEmailResponse::InternalSwap(CMsgAMSendEmailResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMSendEmailResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[41]);
}

// ===================================================================

class CMsgGCGetEmailTemplate::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetEmailTemplate>()._has_bits_);
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_email_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_email_lang(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_email_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetEmailTemplate)
}
CMsgGCGetEmailTemplate::CMsgGCGetEmailTemplate(const CMsgGCGetEmailTemplate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&app_id_, &from.app_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&email_format_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(email_format_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetEmailTemplate)
}

inline void CMsgGCGetEmailTemplate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&app_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&email_format_) -
    reinterpret_cast<char*>(&app_id_)) + sizeof(email_format_));
}

CMsgGCGetEmailTemplate::~CMsgGCGetEmailTemplate() {
  // @@protoc_insertion_point(destructor:CMsgGCGetEmailTemplate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetEmailTemplate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetEmailTemplate::ArenaDtor(void* object) {
  CMsgGCGetEmailTemplate* _this = reinterpret_cast< CMsgGCGetEmailTemplate* >(object);
  (void)_this;
}
void CMsgGCGetEmailTemplate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetEmailTemplate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetEmailTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetEmailTemplate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&app_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&email_format_) -
        reinterpret_cast<char*>(&app_id_)) + sizeof(email_format_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetEmailTemplate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 email_msg_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_email_msg_type(&has_bits);
          email_msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 email_lang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_email_lang(&has_bits);
          email_lang_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 email_format = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_email_format(&has_bits);
          email_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetEmailTemplate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetEmailTemplate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_id(), target);
  }

  // optional uint32 email_msg_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_email_msg_type(), target);
  }

  // optional int32 email_lang = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_email_lang(), target);
  }

  // optional int32 email_format = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_email_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetEmailTemplate)
  return target;
}

size_t CMsgGCGetEmailTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetEmailTemplate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 app_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 email_msg_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_email_msg_type());
    }

    // optional int32 email_lang = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_email_lang());
    }

    // optional int32 email_format = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_email_format());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetEmailTemplate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetEmailTemplate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetEmailTemplate::GetClassData() const { return &_class_data_; }

void CMsgGCGetEmailTemplate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetEmailTemplate *>(to)->MergeFrom(
      static_cast<const CMsgGCGetEmailTemplate &>(from));
}


void CMsgGCGetEmailTemplate::MergeFrom(const CMsgGCGetEmailTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetEmailTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      email_msg_type_ = from.email_msg_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      email_lang_ = from.email_lang_;
    }
    if (cached_has_bits & 0x00000008u) {
      email_format_ = from.email_format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetEmailTemplate::CopyFrom(const CMsgGCGetEmailTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetEmailTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplate::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplate::InternalSwap(CMsgGCGetEmailTemplate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCGetEmailTemplate, email_format_)
      + sizeof(CMsgGCGetEmailTemplate::email_format_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCGetEmailTemplate, app_id_)>(
          reinterpret_cast<char*>(&app_id_),
          reinterpret_cast<char*>(&other->app_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetEmailTemplate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[42]);
}

// ===================================================================

class CMsgGCGetEmailTemplateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetEmailTemplateResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_template_exists(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_template_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetEmailTemplateResponse)
}
CMsgGCGetEmailTemplateResponse::CMsgGCGetEmailTemplateResponse(const CMsgGCGetEmailTemplateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  template__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    template__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_template_()) {
    template__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_template_(), 
      GetArenaForAllocation());
  }
  ::memcpy(&template_exists_, &from.template_exists_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&template_exists_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetEmailTemplateResponse)
}

inline void CMsgGCGetEmailTemplateResponse::SharedCtor() {
template__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  template__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
template_exists_ = false;
eresult_ = 2u;
}

CMsgGCGetEmailTemplateResponse::~CMsgGCGetEmailTemplateResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCGetEmailTemplateResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetEmailTemplateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  template__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetEmailTemplateResponse::ArenaDtor(void* object) {
  CMsgGCGetEmailTemplateResponse* _this = reinterpret_cast< CMsgGCGetEmailTemplateResponse* >(object);
  (void)_this;
}
void CMsgGCGetEmailTemplateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetEmailTemplateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetEmailTemplateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetEmailTemplateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    template__.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    template_exists_ = false;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetEmailTemplateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool template_exists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_template_exists(&has_bits);
          template_exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string template = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_template_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCGetEmailTemplateResponse.template");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetEmailTemplateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetEmailTemplateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional bool template_exists = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_template_exists(), target);
  }

  // optional string template = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_template_().data(), static_cast<int>(this->_internal_template_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetEmailTemplateResponse.template");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_template_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetEmailTemplateResponse)
  return target;
}

size_t CMsgGCGetEmailTemplateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetEmailTemplateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string template = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_template_());
    }

    // optional bool template_exists = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetEmailTemplateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetEmailTemplateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetEmailTemplateResponse::GetClassData() const { return &_class_data_; }

void CMsgGCGetEmailTemplateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetEmailTemplateResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCGetEmailTemplateResponse &>(from));
}


void CMsgGCGetEmailTemplateResponse::MergeFrom(const CMsgGCGetEmailTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetEmailTemplateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_template_(from._internal_template_());
    }
    if (cached_has_bits & 0x00000002u) {
      template_exists_ = from.template_exists_;
    }
    if (cached_has_bits & 0x00000004u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetEmailTemplateResponse::CopyFrom(const CMsgGCGetEmailTemplateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetEmailTemplateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetEmailTemplateResponse::IsInitialized() const {
  return true;
}

void CMsgGCGetEmailTemplateResponse::InternalSwap(CMsgGCGetEmailTemplateResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &template__, lhs_arena,
      &other->template__, rhs_arena
  );
  swap(template_exists_, other->template_exists_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetEmailTemplateResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[43]);
}

// ===================================================================

class CMsgAMGrantGuestPasses2::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGrantGuestPasses2>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_package_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passes_to_grant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_days_to_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGrantGuestPasses2)
}
CMsgAMGrantGuestPasses2::CMsgAMGrantGuestPasses2(const CMsgAMGrantGuestPasses2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGrantGuestPasses2)
}

inline void CMsgAMGrantGuestPasses2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(action_));
}

CMsgAMGrantGuestPasses2::~CMsgAMGrantGuestPasses2() {
  // @@protoc_insertion_point(destructor:CMsgAMGrantGuestPasses2)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGrantGuestPasses2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGrantGuestPasses2::ArenaDtor(void* object) {
  CMsgAMGrantGuestPasses2* _this = reinterpret_cast< CMsgAMGrantGuestPasses2* >(object);
  (void)_this;
}
void CMsgAMGrantGuestPasses2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGrantGuestPasses2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGrantGuestPasses2::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGrantGuestPasses2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(action_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGrantGuestPasses2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 package_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_package_id(&has_bits);
          package_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 passes_to_grant = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_passes_to_grant(&has_bits);
          passes_to_grant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 days_to_expiration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_days_to_expiration(&has_bits);
          days_to_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 action = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_action(&has_bits);
          action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGrantGuestPasses2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGrantGuestPasses2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 package_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_package_id(), target);
  }

  // optional int32 passes_to_grant = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_passes_to_grant(), target);
  }

  // optional int32 days_to_expiration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_days_to_expiration(), target);
  }

  // optional int32 action = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGrantGuestPasses2)
  return target;
}

size_t CMsgAMGrantGuestPasses2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGrantGuestPasses2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 package_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_package_id());
    }

    // optional int32 passes_to_grant = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_passes_to_grant());
    }

    // optional int32 days_to_expiration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_days_to_expiration());
    }

    // optional int32 action = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_action());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGrantGuestPasses2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGrantGuestPasses2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGrantGuestPasses2::GetClassData() const { return &_class_data_; }

void CMsgAMGrantGuestPasses2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGrantGuestPasses2 *>(to)->MergeFrom(
      static_cast<const CMsgAMGrantGuestPasses2 &>(from));
}


void CMsgAMGrantGuestPasses2::MergeFrom(const CMsgAMGrantGuestPasses2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGrantGuestPasses2)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      package_id_ = from.package_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      passes_to_grant_ = from.passes_to_grant_;
    }
    if (cached_has_bits & 0x00000008u) {
      days_to_expiration_ = from.days_to_expiration_;
    }
    if (cached_has_bits & 0x00000010u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGrantGuestPasses2::CopyFrom(const CMsgAMGrantGuestPasses2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGrantGuestPasses2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2::InternalSwap(CMsgAMGrantGuestPasses2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgAMGrantGuestPasses2, action_)
      + sizeof(CMsgAMGrantGuestPasses2::action_)
      - PROTOBUF_FIELD_OFFSET(CMsgAMGrantGuestPasses2, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGrantGuestPasses2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[44]);
}

// ===================================================================

class CMsgAMGrantGuestPasses2Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgAMGrantGuestPasses2Response>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_passes_granted(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgAMGrantGuestPasses2Response)
}
CMsgAMGrantGuestPasses2Response::CMsgAMGrantGuestPasses2Response(const CMsgAMGrantGuestPasses2Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&passes_granted_, &from.passes_granted_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&passes_granted_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgAMGrantGuestPasses2Response)
}

inline void CMsgAMGrantGuestPasses2Response::SharedCtor() {
passes_granted_ = 0;
eresult_ = 2;
}

CMsgAMGrantGuestPasses2Response::~CMsgAMGrantGuestPasses2Response() {
  // @@protoc_insertion_point(destructor:CMsgAMGrantGuestPasses2Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgAMGrantGuestPasses2Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgAMGrantGuestPasses2Response::ArenaDtor(void* object) {
  CMsgAMGrantGuestPasses2Response* _this = reinterpret_cast< CMsgAMGrantGuestPasses2Response* >(object);
  (void)_this;
}
void CMsgAMGrantGuestPasses2Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgAMGrantGuestPasses2Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgAMGrantGuestPasses2Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgAMGrantGuestPasses2Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    passes_granted_ = 0;
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgAMGrantGuestPasses2Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 passes_granted = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_passes_granted(&has_bits);
          passes_granted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgAMGrantGuestPasses2Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgAMGrantGuestPasses2Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional int32 passes_granted = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_passes_granted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgAMGrantGuestPasses2Response)
  return target;
}

size_t CMsgAMGrantGuestPasses2Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgAMGrantGuestPasses2Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 passes_granted = 2 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_passes_granted());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgAMGrantGuestPasses2Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgAMGrantGuestPasses2Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgAMGrantGuestPasses2Response::GetClassData() const { return &_class_data_; }

void CMsgAMGrantGuestPasses2Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgAMGrantGuestPasses2Response *>(to)->MergeFrom(
      static_cast<const CMsgAMGrantGuestPasses2Response &>(from));
}


void CMsgAMGrantGuestPasses2Response::MergeFrom(const CMsgAMGrantGuestPasses2Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgAMGrantGuestPasses2Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      passes_granted_ = from.passes_granted_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgAMGrantGuestPasses2Response::CopyFrom(const CMsgAMGrantGuestPasses2Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgAMGrantGuestPasses2Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAMGrantGuestPasses2Response::IsInitialized() const {
  return true;
}

void CMsgAMGrantGuestPasses2Response::InternalSwap(CMsgAMGrantGuestPasses2Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(passes_granted_, other->passes_granted_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgAMGrantGuestPasses2Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[45]);
}

// ===================================================================

class CGCSystemMsg_GetAccountDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetAccountDetails>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetAccountDetails)
}
CGCSystemMsg_GetAccountDetails::CGCSystemMsg_GetAccountDetails(const CGCSystemMsg_GetAccountDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetAccountDetails)
}

inline void CGCSystemMsg_GetAccountDetails::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CGCSystemMsg_GetAccountDetails::~CGCSystemMsg_GetAccountDetails() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetAccountDetails)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCSystemMsg_GetAccountDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCSystemMsg_GetAccountDetails::ArenaDtor(void* object) {
  CGCSystemMsg_GetAccountDetails* _this = reinterpret_cast< CGCSystemMsg_GetAccountDetails* >(object);
  (void)_this;
}
void CGCSystemMsg_GetAccountDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCSystemMsg_GetAccountDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCSystemMsg_GetAccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetAccountDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetAccountDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetAccountDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetAccountDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetAccountDetails)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetAccountDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetAccountDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCSystemMsg_GetAccountDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetAccountDetails::GetClassData() const { return &_class_data_; }

void CGCSystemMsg_GetAccountDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCSystemMsg_GetAccountDetails *>(to)->MergeFrom(
      static_cast<const CGCSystemMsg_GetAccountDetails &>(from));
}


void CGCSystemMsg_GetAccountDetails::MergeFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetAccountDetails)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetAccountDetails::CopyFrom(const CGCSystemMsg_GetAccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetAccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails::InternalSwap(CGCSystemMsg_GetAccountDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, appid_)
      + sizeof(CGCSystemMsg_GetAccountDetails::appid_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetAccountDetails::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[46]);
}

// ===================================================================

class CGCSystemMsg_GetAccountDetails_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetAccountDetails_Response>()._has_bits_);
  static void set_has_eresult_deprecated(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_profile_public(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_inventory_public(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_vac_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_cyber_cafe(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_is_school_account(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_is_limited(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_is_subscribed(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_package(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_free_trial_account(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_free_trial_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_is_low_violence(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_is_account_locked_down(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_is_community_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_is_trade_banned(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_trade_ban_expiration(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_accountid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_suspension_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_currency(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steam_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_friend_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_account_creation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_is_steamguard_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_is_phone_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_is_two_factor_auth_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_two_factor_enabled_time(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_phone_verification_time(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_phone_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_is_phone_identifying(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_rt_identity_linked(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_rt_birth_date(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_txn_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_has_accepted_china_ssa(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_is_banned_steam_china(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
};

CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetAccountDetails_Response)
}
CGCSystemMsg_GetAccountDetails_Response::CGCSystemMsg_GetAccountDetails_Response(const CGCSystemMsg_GetAccountDetails_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_account_name()) {
    account_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account_name(), 
      GetArenaForAllocation());
  }
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArenaForAllocation());
  }
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency()) {
    currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency(), 
      GetArenaForAllocation());
  }
  txn_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    txn_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_txn_country_code()) {
    txn_country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_txn_country_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&is_profile_public_, &from.is_profile_public_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_deprecated_) -
    reinterpret_cast<char*>(&is_profile_public_)) + sizeof(eresult_deprecated_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetAccountDetails_Response)
}

inline void CGCSystemMsg_GetAccountDetails_Response::SharedCtor() {
account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  account_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currency_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
txn_country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  txn_country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_profile_public_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_banned_steam_china_) -
    reinterpret_cast<char*>(&is_profile_public_)) + sizeof(is_banned_steam_china_));
eresult_deprecated_ = 2u;
}

CGCSystemMsg_GetAccountDetails_Response::~CGCSystemMsg_GetAccountDetails_Response() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetAccountDetails_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCSystemMsg_GetAccountDetails_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txn_country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CGCSystemMsg_GetAccountDetails_Response::ArenaDtor(void* object) {
  CGCSystemMsg_GetAccountDetails_Response* _this = reinterpret_cast< CGCSystemMsg_GetAccountDetails_Response* >(object);
  (void)_this;
}
void CGCSystemMsg_GetAccountDetails_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCSystemMsg_GetAccountDetails_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCSystemMsg_GetAccountDetails_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetAccountDetails_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      persona_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      currency_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      txn_country_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&is_profile_public_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_cyber_cafe_) -
        reinterpret_cast<char*>(&is_profile_public_)) + sizeof(is_cyber_cafe_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&is_school_account_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_account_locked_down_) -
        reinterpret_cast<char*>(&is_school_account_)) + sizeof(is_account_locked_down_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&is_community_banned_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_creation_time_) -
        reinterpret_cast<char*>(&is_community_banned_)) + sizeof(account_creation_time_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&is_steamguard_enabled_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rt_identity_linked_) -
        reinterpret_cast<char*>(&is_steamguard_enabled_)) + sizeof(rt_identity_linked_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&rt_birth_date_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_banned_steam_china_) -
        reinterpret_cast<char*>(&rt_birth_date_)) + sizeof(is_banned_steam_china_));
    eresult_deprecated_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetAccountDetails_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult_deprecated = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult_deprecated(&_has_bits_);
          eresult_deprecated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string account_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.account_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_profile_public = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_profile_public(&_has_bits_);
          is_profile_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_inventory_public = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_inventory_public(&_has_bits_);
          is_inventory_public_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_vac_banned = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_vac_banned(&_has_bits_);
          is_vac_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_cyber_cafe = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_cyber_cafe(&_has_bits_);
          is_cyber_cafe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_school_account = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_is_school_account(&_has_bits_);
          is_school_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_limited = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_is_limited(&_has_bits_);
          is_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_subscribed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_is_subscribed(&_has_bits_);
          is_subscribed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 package = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_package(&_has_bits_);
          package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_free_trial_account = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_is_free_trial_account(&_has_bits_);
          is_free_trial_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 free_trial_expiration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_free_trial_expiration(&_has_bits_);
          free_trial_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_low_violence = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_low_violence(&_has_bits_);
          is_low_violence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_account_locked_down = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_is_account_locked_down(&_has_bits_);
          is_account_locked_down_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_community_banned = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_is_community_banned(&_has_bits_);
          is_community_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_trade_banned = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_is_trade_banned(&_has_bits_);
          is_trade_banned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 trade_ban_expiration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_trade_ban_expiration(&_has_bits_);
          trade_ban_expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 accountid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_accountid(&_has_bits_);
          accountid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 suspension_end_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_suspension_end_time(&_has_bits_);
          suspension_end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.currency");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_level = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_steam_level(&_has_bits_);
          steam_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 friend_count = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_friend_count(&_has_bits_);
          friend_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_creation_time = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_account_creation_time(&_has_bits_);
          account_creation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_steamguard_enabled = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_is_steamguard_enabled(&_has_bits_);
          is_steamguard_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phone_verified = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_is_phone_verified(&_has_bits_);
          is_phone_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_two_factor_auth_enabled = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_is_two_factor_auth_enabled(&_has_bits_);
          is_two_factor_auth_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 two_factor_enabled_time = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_two_factor_enabled_time(&_has_bits_);
          two_factor_enabled_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 phone_verification_time = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_phone_verification_time(&_has_bits_);
          phone_verification_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 phone_id = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_phone_id(&_has_bits_);
          phone_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_phone_identifying = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_phone_identifying(&_has_bits_);
          is_phone_identifying_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_identity_linked = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rt_identity_linked(&_has_bits_);
          rt_identity_linked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rt_birth_date = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_rt_birth_date(&_has_bits_);
          rt_birth_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string txn_country_code = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_txn_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_accepted_china_ssa = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_has_accepted_china_ssa(&_has_bits_);
          has_accepted_china_ssa_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_banned_steam_china = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_banned_steam_china(&_has_bits_);
          is_banned_steam_china_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetAccountDetails_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetAccountDetails_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[1];
  // optional uint32 eresult_deprecated = 1 [default = 2];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult_deprecated(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string account_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_account_name().data(), static_cast<int>(this->_internal_account_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.account_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account_name(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.persona_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_persona_name(), target);
  }

  // optional bool is_profile_public = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_profile_public(), target);
  }

  // optional bool is_inventory_public = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_inventory_public(), target);
  }

  // optional bool is_vac_banned = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_vac_banned(), target);
  }

  // optional bool is_cyber_cafe = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_cyber_cafe(), target);
  }

  // optional bool is_school_account = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_school_account(), target);
  }

  // optional bool is_limited = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_limited(), target);
  }

  // optional bool is_subscribed = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_is_subscribed(), target);
  }

  // optional uint32 package = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_package(), target);
  }

  // optional bool is_free_trial_account = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_is_free_trial_account(), target);
  }

  // optional uint32 free_trial_expiration = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_free_trial_expiration(), target);
  }

  // optional bool is_low_violence = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_is_low_violence(), target);
  }

  // optional bool is_account_locked_down = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_is_account_locked_down(), target);
  }

  // optional bool is_community_banned = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_is_community_banned(), target);
  }

  // optional bool is_trade_banned = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_is_trade_banned(), target);
  }

  // optional uint32 trade_ban_expiration = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_trade_ban_expiration(), target);
  }

  // optional uint32 accountid = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_accountid(), target);
  }

  // optional uint32 suspension_end_time = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_suspension_end_time(), target);
  }

  // optional string currency = 22;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.currency");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_currency(), target);
  }

  // optional uint32 steam_level = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_steam_level(), target);
  }

  // optional uint32 friend_count = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_friend_count(), target);
  }

  // optional uint32 account_creation_time = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_account_creation_time(), target);
  }

  // optional bool is_steamguard_enabled = 27;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_is_steamguard_enabled(), target);
  }

  // optional bool is_phone_verified = 28;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(28, this->_internal_is_phone_verified(), target);
  }

  // optional bool is_two_factor_auth_enabled = 29;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(29, this->_internal_is_two_factor_auth_enabled(), target);
  }

  // optional uint32 two_factor_enabled_time = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_two_factor_enabled_time(), target);
  }

  // optional uint32 phone_verification_time = 31;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_phone_verification_time(), target);
  }

  // optional uint64 phone_id = 33;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(33, this->_internal_phone_id(), target);
  }

  // optional bool is_phone_identifying = 34;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(34, this->_internal_is_phone_identifying(), target);
  }

  // optional uint32 rt_identity_linked = 35;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_rt_identity_linked(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 rt_birth_date = 36;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_rt_birth_date(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string txn_country_code = 37;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_txn_country_code().data(), static_cast<int>(this->_internal_txn_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CGCSystemMsg_GetAccountDetails_Response.txn_country_code");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_txn_country_code(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool has_accepted_china_ssa = 38;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_has_accepted_china_ssa(), target);
  }

  // optional bool is_banned_steam_china = 39;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_is_banned_steam_china(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetAccountDetails_Response)
  return target;
}

size_t CGCSystemMsg_GetAccountDetails_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetAccountDetails_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string account_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_account_name());
    }

    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional string currency = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency());
    }

    // optional string txn_country_code = 37;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_txn_country_code());
    }

    // optional bool is_profile_public = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_inventory_public = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_vac_banned = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool is_cyber_cafe = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool is_school_account = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool is_limited = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool is_subscribed = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_free_trial_account = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 package = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_package());
    }

    // optional uint32 free_trial_expiration = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_free_trial_expiration());
    }

    // optional bool is_low_violence = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional bool is_account_locked_down = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool is_community_banned = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool is_trade_banned = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional uint32 trade_ban_expiration = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trade_ban_expiration());
    }

    // optional uint32 accountid = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_accountid());
    }

    // optional uint32 suspension_end_time = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_suspension_end_time());
    }

    // optional uint32 steam_level = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_steam_level());
    }

    // optional uint32 friend_count = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_friend_count());
    }

    // optional uint32 account_creation_time = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_account_creation_time());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool is_steamguard_enabled = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_verified = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_two_factor_auth_enabled = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool is_phone_identifying = 34;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint32 two_factor_enabled_time = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_two_factor_enabled_time());
    }

    // optional uint32 phone_verification_time = 31;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phone_verification_time());
    }

    // optional uint64 phone_id = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_phone_id());
    }

    // optional uint32 rt_identity_linked = 35;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_identity_linked());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 rt_birth_date = 36;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rt_birth_date());
    }

    // optional bool has_accepted_china_ssa = 38;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool is_banned_steam_china = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional uint32 eresult_deprecated = 1 [default = 2];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult_deprecated());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetAccountDetails_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCSystemMsg_GetAccountDetails_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetAccountDetails_Response::GetClassData() const { return &_class_data_; }

void CGCSystemMsg_GetAccountDetails_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCSystemMsg_GetAccountDetails_Response *>(to)->MergeFrom(
      static_cast<const CGCSystemMsg_GetAccountDetails_Response &>(from));
}


void CGCSystemMsg_GetAccountDetails_Response::MergeFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetAccountDetails_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_currency(from._internal_currency());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_txn_country_code(from._internal_txn_country_code());
    }
    if (cached_has_bits & 0x00000010u) {
      is_profile_public_ = from.is_profile_public_;
    }
    if (cached_has_bits & 0x00000020u) {
      is_inventory_public_ = from.is_inventory_public_;
    }
    if (cached_has_bits & 0x00000040u) {
      is_vac_banned_ = from.is_vac_banned_;
    }
    if (cached_has_bits & 0x00000080u) {
      is_cyber_cafe_ = from.is_cyber_cafe_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      is_school_account_ = from.is_school_account_;
    }
    if (cached_has_bits & 0x00000200u) {
      is_limited_ = from.is_limited_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_subscribed_ = from.is_subscribed_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_free_trial_account_ = from.is_free_trial_account_;
    }
    if (cached_has_bits & 0x00001000u) {
      package_ = from.package_;
    }
    if (cached_has_bits & 0x00002000u) {
      free_trial_expiration_ = from.free_trial_expiration_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_low_violence_ = from.is_low_violence_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_account_locked_down_ = from.is_account_locked_down_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      is_community_banned_ = from.is_community_banned_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_trade_banned_ = from.is_trade_banned_;
    }
    if (cached_has_bits & 0x00040000u) {
      trade_ban_expiration_ = from.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00080000u) {
      accountid_ = from.accountid_;
    }
    if (cached_has_bits & 0x00100000u) {
      suspension_end_time_ = from.suspension_end_time_;
    }
    if (cached_has_bits & 0x00200000u) {
      steam_level_ = from.steam_level_;
    }
    if (cached_has_bits & 0x00400000u) {
      friend_count_ = from.friend_count_;
    }
    if (cached_has_bits & 0x00800000u) {
      account_creation_time_ = from.account_creation_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      is_steamguard_enabled_ = from.is_steamguard_enabled_;
    }
    if (cached_has_bits & 0x02000000u) {
      is_phone_verified_ = from.is_phone_verified_;
    }
    if (cached_has_bits & 0x04000000u) {
      is_two_factor_auth_enabled_ = from.is_two_factor_auth_enabled_;
    }
    if (cached_has_bits & 0x08000000u) {
      is_phone_identifying_ = from.is_phone_identifying_;
    }
    if (cached_has_bits & 0x10000000u) {
      two_factor_enabled_time_ = from.two_factor_enabled_time_;
    }
    if (cached_has_bits & 0x20000000u) {
      phone_verification_time_ = from.phone_verification_time_;
    }
    if (cached_has_bits & 0x40000000u) {
      phone_id_ = from.phone_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      rt_identity_linked_ = from.rt_identity_linked_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      rt_birth_date_ = from.rt_birth_date_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_accepted_china_ssa_ = from.has_accepted_china_ssa_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_banned_steam_china_ = from.is_banned_steam_china_;
    }
    if (cached_has_bits & 0x00000008u) {
      eresult_deprecated_ = from.eresult_deprecated_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetAccountDetails_Response::CopyFrom(const CGCSystemMsg_GetAccountDetails_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetAccountDetails_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetAccountDetails_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetAccountDetails_Response::InternalSwap(CGCSystemMsg_GetAccountDetails_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_name_, lhs_arena,
      &other->account_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &persona_name_, lhs_arena,
      &other->persona_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_, lhs_arena,
      &other->currency_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &txn_country_code_, lhs_arena,
      &other->txn_country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_banned_steam_china_)
      + sizeof(CGCSystemMsg_GetAccountDetails_Response::is_banned_steam_china_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetAccountDetails_Response, is_profile_public_)>(
          reinterpret_cast<char*>(&is_profile_public_),
          reinterpret_cast<char*>(&other->is_profile_public_));
  swap(eresult_deprecated_, other->eresult_deprecated_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetAccountDetails_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[47]);
}

// ===================================================================

class CMsgGCGetPersonaNames::_Internal {
 public:
};

CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  steamids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPersonaNames)
}
CMsgGCGetPersonaNames::CMsgGCGetPersonaNames(const CMsgGCGetPersonaNames& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      steamids_(from.steamids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPersonaNames)
}

inline void CMsgGCGetPersonaNames::SharedCtor() {
}

CMsgGCGetPersonaNames::~CMsgGCGetPersonaNames() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPersonaNames)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetPersonaNames::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetPersonaNames::ArenaDtor(void* object) {
  CMsgGCGetPersonaNames* _this = reinterpret_cast< CMsgGCGetPersonaNames* >(object);
  (void)_this;
}
void CMsgGCGetPersonaNames::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPersonaNames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPersonaNames::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPersonaNames)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPersonaNames::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated fixed64 steamids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<9>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPersonaNames::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPersonaNames)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  for (int i = 0, n = this->_internal_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPersonaNames)
  return target;
}

size_t CMsgGCGetPersonaNames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPersonaNames)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 steamids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_steamids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPersonaNames::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetPersonaNames::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPersonaNames::GetClassData() const { return &_class_data_; }

void CMsgGCGetPersonaNames::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetPersonaNames *>(to)->MergeFrom(
      static_cast<const CMsgGCGetPersonaNames &>(from));
}


void CMsgGCGetPersonaNames::MergeFrom(const CMsgGCGetPersonaNames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPersonaNames)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  steamids_.MergeFrom(from.steamids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPersonaNames::CopyFrom(const CMsgGCGetPersonaNames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPersonaNames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames::InternalSwap(CMsgGCGetPersonaNames* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  steamids_.InternalSwap(&other->steamids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPersonaNames::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[48]);
}

// ===================================================================

class CMsgGCGetPersonaNames_Response_PersonaName::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPersonaNames_Response_PersonaName>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persona_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPersonaNames_Response.PersonaName)
}
CMsgGCGetPersonaNames_Response_PersonaName::CMsgGCGetPersonaNames_Response_PersonaName(const CMsgGCGetPersonaNames_Response_PersonaName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_persona_name()) {
    persona_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_persona_name(), 
      GetArenaForAllocation());
  }
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPersonaNames_Response.PersonaName)
}

inline void CMsgGCGetPersonaNames_Response_PersonaName::SharedCtor() {
persona_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  persona_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
steamid_ = uint64_t{0u};
}

CMsgGCGetPersonaNames_Response_PersonaName::~CMsgGCGetPersonaNames_Response_PersonaName() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPersonaNames_Response.PersonaName)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetPersonaNames_Response_PersonaName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  persona_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCGetPersonaNames_Response_PersonaName::ArenaDtor(void* object) {
  CMsgGCGetPersonaNames_Response_PersonaName* _this = reinterpret_cast< CMsgGCGetPersonaNames_Response_PersonaName* >(object);
  (void)_this;
}
void CMsgGCGetPersonaNames_Response_PersonaName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPersonaNames_Response_PersonaName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPersonaNames_Response_PersonaName::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPersonaNames_Response.PersonaName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmpty();
  }
  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPersonaNames_Response_PersonaName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string persona_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_persona_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPersonaNames_Response_PersonaName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPersonaNames_Response.PersonaName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_persona_name().data(), static_cast<int>(this->_internal_persona_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCGetPersonaNames_Response.PersonaName.persona_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_persona_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPersonaNames_Response.PersonaName)
  return target;
}

size_t CMsgGCGetPersonaNames_Response_PersonaName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPersonaNames_Response.PersonaName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_persona_name());
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPersonaNames_Response_PersonaName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetPersonaNames_Response_PersonaName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPersonaNames_Response_PersonaName::GetClassData() const { return &_class_data_; }

void CMsgGCGetPersonaNames_Response_PersonaName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetPersonaNames_Response_PersonaName *>(to)->MergeFrom(
      static_cast<const CMsgGCGetPersonaNames_Response_PersonaName &>(from));
}


void CMsgGCGetPersonaNames_Response_PersonaName::MergeFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPersonaNames_Response.PersonaName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_persona_name(from._internal_persona_name());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPersonaNames_Response_PersonaName::CopyFrom(const CMsgGCGetPersonaNames_Response_PersonaName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPersonaNames_Response.PersonaName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response_PersonaName::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response_PersonaName::InternalSwap(CMsgGCGetPersonaNames_Response_PersonaName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &persona_name_, lhs_arena,
      &other->persona_name_, rhs_arena
  );
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPersonaNames_Response_PersonaName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[49]);
}

// ===================================================================

class CMsgGCGetPersonaNames_Response::_Internal {
 public:
};

CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  succeeded_lookups_(arena),
  failed_lookup_steamids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPersonaNames_Response)
}
CMsgGCGetPersonaNames_Response::CMsgGCGetPersonaNames_Response(const CMsgGCGetPersonaNames_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      succeeded_lookups_(from.succeeded_lookups_),
      failed_lookup_steamids_(from.failed_lookup_steamids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPersonaNames_Response)
}

inline void CMsgGCGetPersonaNames_Response::SharedCtor() {
}

CMsgGCGetPersonaNames_Response::~CMsgGCGetPersonaNames_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPersonaNames_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetPersonaNames_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetPersonaNames_Response::ArenaDtor(void* object) {
  CMsgGCGetPersonaNames_Response* _this = reinterpret_cast< CMsgGCGetPersonaNames_Response* >(object);
  (void)_this;
}
void CMsgGCGetPersonaNames_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPersonaNames_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPersonaNames_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPersonaNames_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  succeeded_lookups_.Clear();
  failed_lookup_steamids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPersonaNames_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_succeeded_lookups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 failed_lookup_steamids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_failed_lookup_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_failed_lookup_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPersonaNames_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPersonaNames_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_succeeded_lookups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_succeeded_lookups(i), target, stream);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  for (int i = 0, n = this->_internal_failed_lookup_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_failed_lookup_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPersonaNames_Response)
  return target;
}

size_t CMsgGCGetPersonaNames_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPersonaNames_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCGetPersonaNames_Response.PersonaName succeeded_lookups = 1;
  total_size += 1UL * this->_internal_succeeded_lookups_size();
  for (const auto& msg : this->succeeded_lookups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 failed_lookup_steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_failed_lookup_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_failed_lookup_steamids_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPersonaNames_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetPersonaNames_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPersonaNames_Response::GetClassData() const { return &_class_data_; }

void CMsgGCGetPersonaNames_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetPersonaNames_Response *>(to)->MergeFrom(
      static_cast<const CMsgGCGetPersonaNames_Response &>(from));
}


void CMsgGCGetPersonaNames_Response::MergeFrom(const CMsgGCGetPersonaNames_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPersonaNames_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  succeeded_lookups_.MergeFrom(from.succeeded_lookups_);
  failed_lookup_steamids_.MergeFrom(from.failed_lookup_steamids_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPersonaNames_Response::CopyFrom(const CMsgGCGetPersonaNames_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPersonaNames_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPersonaNames_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPersonaNames_Response::InternalSwap(CMsgGCGetPersonaNames_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  succeeded_lookups_.InternalSwap(&other->succeeded_lookups_);
  failed_lookup_steamids_.InternalSwap(&other->failed_lookup_steamids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPersonaNames_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[50]);
}

// ===================================================================

class CMsgGCCheckFriendship::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCheckFriendship>()._has_bits_);
  static void set_has_steamid_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_steamid_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCheckFriendship::CMsgGCCheckFriendship(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCCheckFriendship)
}
CMsgGCCheckFriendship::CMsgGCCheckFriendship(const CMsgGCCheckFriendship& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steamid_left_, &from.steamid_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&steamid_right_) -
    reinterpret_cast<char*>(&steamid_left_)) + sizeof(steamid_right_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCheckFriendship)
}

inline void CMsgGCCheckFriendship::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steamid_right_) -
    reinterpret_cast<char*>(&steamid_left_)) + sizeof(steamid_right_));
}

CMsgGCCheckFriendship::~CMsgGCCheckFriendship() {
  // @@protoc_insertion_point(destructor:CMsgGCCheckFriendship)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCCheckFriendship::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCheckFriendship::ArenaDtor(void* object) {
  CMsgGCCheckFriendship* _this = reinterpret_cast< CMsgGCCheckFriendship* >(object);
  (void)_this;
}
void CMsgGCCheckFriendship::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCheckFriendship::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCCheckFriendship::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCheckFriendship)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steamid_left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&steamid_right_) -
        reinterpret_cast<char*>(&steamid_left_)) + sizeof(steamid_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCheckFriendship::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid_left(&has_bits);
          steamid_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid_right(&has_bits);
          steamid_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCheckFriendship::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCheckFriendship)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid_left(), target);
  }

  // optional fixed64 steamid_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCheckFriendship)
  return target;
}

size_t CMsgGCCheckFriendship::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCheckFriendship)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steamid_left = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steamid_right = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCheckFriendship::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCCheckFriendship::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCheckFriendship::GetClassData() const { return &_class_data_; }

void CMsgGCCheckFriendship::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCCheckFriendship *>(to)->MergeFrom(
      static_cast<const CMsgGCCheckFriendship &>(from));
}


void CMsgGCCheckFriendship::MergeFrom(const CMsgGCCheckFriendship& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCheckFriendship)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steamid_left_ = from.steamid_left_;
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_right_ = from.steamid_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCheckFriendship::CopyFrom(const CMsgGCCheckFriendship& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCheckFriendship)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship::InternalSwap(CMsgGCCheckFriendship* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship, steamid_right_)
      + sizeof(CMsgGCCheckFriendship::steamid_right_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship, steamid_left_)>(
          reinterpret_cast<char*>(&steamid_left_),
          reinterpret_cast<char*>(&other->steamid_left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCheckFriendship::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[51]);
}

// ===================================================================

class CMsgGCCheckFriendship_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCCheckFriendship_Response>()._has_bits_);
  static void set_has_success(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_found_friendship(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCCheckFriendship_Response)
}
CMsgGCCheckFriendship_Response::CMsgGCCheckFriendship_Response(const CMsgGCCheckFriendship_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&found_friendship_) -
    reinterpret_cast<char*>(&success_)) + sizeof(found_friendship_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCCheckFriendship_Response)
}

inline void CMsgGCCheckFriendship_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&success_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&found_friendship_) -
    reinterpret_cast<char*>(&success_)) + sizeof(found_friendship_));
}

CMsgGCCheckFriendship_Response::~CMsgGCCheckFriendship_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCCheckFriendship_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCCheckFriendship_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCCheckFriendship_Response::ArenaDtor(void* object) {
  CMsgGCCheckFriendship_Response* _this = reinterpret_cast< CMsgGCCheckFriendship_Response* >(object);
  (void)_this;
}
void CMsgGCCheckFriendship_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCCheckFriendship_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCCheckFriendship_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCCheckFriendship_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&found_friendship_) -
      reinterpret_cast<char*>(&success_)) + sizeof(found_friendship_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCCheckFriendship_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_success(&has_bits);
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool found_friendship = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_found_friendship(&has_bits);
          found_friendship_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCCheckFriendship_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCCheckFriendship_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // optional bool found_friendship = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_found_friendship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCCheckFriendship_Response)
  return target;
}

size_t CMsgGCCheckFriendship_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCCheckFriendship_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool success = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool found_friendship = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCCheckFriendship_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCCheckFriendship_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCCheckFriendship_Response::GetClassData() const { return &_class_data_; }

void CMsgGCCheckFriendship_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCCheckFriendship_Response *>(to)->MergeFrom(
      static_cast<const CMsgGCCheckFriendship_Response &>(from));
}


void CMsgGCCheckFriendship_Response::MergeFrom(const CMsgGCCheckFriendship_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCCheckFriendship_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      found_friendship_ = from.found_friendship_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCCheckFriendship_Response::CopyFrom(const CMsgGCCheckFriendship_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCCheckFriendship_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCheckFriendship_Response::IsInitialized() const {
  return true;
}

void CMsgGCCheckFriendship_Response::InternalSwap(CMsgGCCheckFriendship_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship_Response, found_friendship_)
      + sizeof(CMsgGCCheckFriendship_Response::found_friendship_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCCheckFriendship_Response, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCCheckFriendship_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[52]);
}

// ===================================================================

class CMsgGCMsgMasterSetDirectory_SubGC::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetDirectory_SubGC>()._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_box(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_command_line(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gc_binary(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetDirectory.SubGC)
}
CMsgGCMsgMasterSetDirectory_SubGC::CMsgGCMsgMasterSetDirectory_SubGC(const CMsgGCMsgMasterSetDirectory_SubGC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  box_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    box_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_box()) {
    box_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_box(), 
      GetArenaForAllocation());
  }
  command_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    command_line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_command_line()) {
    command_line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command_line(), 
      GetArenaForAllocation());
  }
  gc_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gc_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gc_binary()) {
    gc_binary_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gc_binary(), 
      GetArenaForAllocation());
  }
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetDirectory.SubGC)
}

inline void CMsgGCMsgMasterSetDirectory_SubGC::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
box_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  box_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  command_line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gc_binary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gc_binary_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dir_index_ = 0u;
}

CMsgGCMsgMasterSetDirectory_SubGC::~CMsgGCMsgMasterSetDirectory_SubGC() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetDirectory.SubGC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetDirectory_SubGC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  box_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  gc_binary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMsgMasterSetDirectory_SubGC::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetDirectory_SubGC* _this = reinterpret_cast< CMsgGCMsgMasterSetDirectory_SubGC* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetDirectory_SubGC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetDirectory_SubGC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetDirectory_SubGC::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetDirectory.SubGC)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      box_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      command_line_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      gc_binary_.ClearNonDefaultToEmpty();
    }
  }
  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetDirectory_SubGC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_box();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.box");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string command_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_command_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.command_line");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gc_binary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_gc_binary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetDirectory_SubGC::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetDirectory.SubGC)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string box = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_box().data(), static_cast<int>(this->_internal_box().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.box");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_box(), target);
  }

  // optional string command_line = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_command_line().data(), static_cast<int>(this->_internal_command_line().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.command_line");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_command_line(), target);
  }

  // optional string gc_binary = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gc_binary().data(), static_cast<int>(this->_internal_gc_binary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory.SubGC.gc_binary");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_gc_binary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetDirectory.SubGC)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_SubGC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetDirectory.SubGC)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string box = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_box());
    }

    // optional string command_line = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_command_line());
    }

    // optional string gc_binary = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gc_binary());
    }

    // optional uint32 dir_index = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dir_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetDirectory_SubGC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetDirectory_SubGC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetDirectory_SubGC::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetDirectory_SubGC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetDirectory_SubGC *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetDirectory_SubGC &>(from));
}


void CMsgGCMsgMasterSetDirectory_SubGC::MergeFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetDirectory.SubGC)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_box(from._internal_box());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_command_line(from._internal_command_line());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_gc_binary(from._internal_gc_binary());
    }
    if (cached_has_bits & 0x00000010u) {
      dir_index_ = from.dir_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetDirectory_SubGC::CopyFrom(const CMsgGCMsgMasterSetDirectory_SubGC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetDirectory.SubGC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_SubGC::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_SubGC::InternalSwap(CMsgGCMsgMasterSetDirectory_SubGC* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &box_, lhs_arena,
      &other->box_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_line_, lhs_arena,
      &other->command_line_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gc_binary_, lhs_arena,
      &other->gc_binary_, rhs_arena
  );
  swap(dir_index_, other->dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetDirectory_SubGC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[53]);
}

// ===================================================================

class CMsgGCMsgMasterSetDirectory::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetDirectory>()._has_bits_);
  static void set_has_master_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dir_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetDirectory)
}
CMsgGCMsgMasterSetDirectory::CMsgGCMsgMasterSetDirectory(const CMsgGCMsgMasterSetDirectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dir_(from.dir_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  master_dir_index_ = from.master_dir_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetDirectory)
}

inline void CMsgGCMsgMasterSetDirectory::SharedCtor() {
master_dir_index_ = 0u;
}

CMsgGCMsgMasterSetDirectory::~CMsgGCMsgMasterSetDirectory() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetDirectory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetDirectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgMasterSetDirectory::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetDirectory* _this = reinterpret_cast< CMsgGCMsgMasterSetDirectory* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetDirectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetDirectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetDirectory::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetDirectory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_.Clear();
  master_dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetDirectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 master_dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_master_dir_index(&has_bits);
          master_dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dir(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetDirectory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetDirectory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 master_dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_master_dir_index(), target);
  }

  // repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dir_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dir(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetDirectory)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetDirectory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetDirectory.SubGC dir = 2;
  total_size += 1UL * this->_internal_dir_size();
  for (const auto& msg : this->dir_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 master_dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_master_dir_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetDirectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetDirectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetDirectory::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetDirectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetDirectory *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetDirectory &>(from));
}


void CMsgGCMsgMasterSetDirectory::MergeFrom(const CMsgGCMsgMasterSetDirectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetDirectory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dir_.MergeFrom(from.dir_);
  if (from._internal_has_master_dir_index()) {
    _internal_set_master_dir_index(from._internal_master_dir_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetDirectory::CopyFrom(const CMsgGCMsgMasterSetDirectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetDirectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory::InternalSwap(CMsgGCMsgMasterSetDirectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dir_.InternalSwap(&other->dir_);
  swap(master_dir_index_, other->master_dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetDirectory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[54]);
}

// ===================================================================

class CMsgGCMsgMasterSetDirectory_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetDirectory_Response>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetDirectory_Response)
}
CMsgGCMsgMasterSetDirectory_Response::CMsgGCMsgMasterSetDirectory_Response(const CMsgGCMsgMasterSetDirectory_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_message()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetDirectory_Response)
}

inline void CMsgGCMsgMasterSetDirectory_Response::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
eresult_ = 2;
}

CMsgGCMsgMasterSetDirectory_Response::~CMsgGCMsgMasterSetDirectory_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetDirectory_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetDirectory_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCMsgMasterSetDirectory_Response::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetDirectory_Response* _this = reinterpret_cast< CMsgGCMsgMasterSetDirectory_Response* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetDirectory_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetDirectory_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetDirectory_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetDirectory_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      message_.ClearNonDefaultToEmpty();
    }
    eresult_ = 2;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetDirectory_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCMsgMasterSetDirectory_Response.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetDirectory_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetDirectory_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetDirectory_Response.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetDirectory_Response)
  return target;
}

size_t CMsgGCMsgMasterSetDirectory_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetDirectory_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message());
    }

    // optional int32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetDirectory_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetDirectory_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetDirectory_Response::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetDirectory_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetDirectory_Response *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetDirectory_Response &>(from));
}


void CMsgGCMsgMasterSetDirectory_Response::MergeFrom(const CMsgGCMsgMasterSetDirectory_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetDirectory_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetDirectory_Response::CopyFrom(const CMsgGCMsgMasterSetDirectory_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetDirectory_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetDirectory_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetDirectory_Response::InternalSwap(CMsgGCMsgMasterSetDirectory_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetDirectory_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[55]);
}

// ===================================================================

class CMsgGCMsgWebAPIJobRequestForwardResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgWebAPIJobRequestForwardResponse>()._has_bits_);
  static void set_has_dir_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgWebAPIJobRequestForwardResponse)
}
CMsgGCMsgWebAPIJobRequestForwardResponse::CMsgGCMsgWebAPIJobRequestForwardResponse(const CMsgGCMsgWebAPIJobRequestForwardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dir_index_ = from.dir_index_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgWebAPIJobRequestForwardResponse)
}

inline void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedCtor() {
dir_index_ = 0u;
}

CMsgGCMsgWebAPIJobRequestForwardResponse::~CMsgGCMsgWebAPIJobRequestForwardResponse() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgWebAPIJobRequestForwardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::ArenaDtor(void* object) {
  CMsgGCMsgWebAPIJobRequestForwardResponse* _this = reinterpret_cast< CMsgGCMsgWebAPIJobRequestForwardResponse* >(object);
  (void)_this;
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgWebAPIJobRequestForwardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_index_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgWebAPIJobRequestForwardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_dir_index(&has_bits);
          dir_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgWebAPIJobRequestForwardResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dir_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgWebAPIJobRequestForwardResponse)
  return target;
}

size_t CMsgGCMsgWebAPIJobRequestForwardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 dir_index = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_dir_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgWebAPIJobRequestForwardResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgWebAPIJobRequestForwardResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgWebAPIJobRequestForwardResponse::GetClassData() const { return &_class_data_; }

void CMsgGCMsgWebAPIJobRequestForwardResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgWebAPIJobRequestForwardResponse *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgWebAPIJobRequestForwardResponse &>(from));
}


void CMsgGCMsgWebAPIJobRequestForwardResponse::MergeFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dir_index()) {
    _internal_set_dir_index(from._internal_dir_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::CopyFrom(const CMsgGCMsgWebAPIJobRequestForwardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgWebAPIJobRequestForwardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgWebAPIJobRequestForwardResponse::IsInitialized() const {
  return true;
}

void CMsgGCMsgWebAPIJobRequestForwardResponse::InternalSwap(CMsgGCMsgWebAPIJobRequestForwardResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dir_index_, other->dir_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgWebAPIJobRequestForwardResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[56]);
}

// ===================================================================

class CGCSystemMsg_GetPurchaseTrust_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetPurchaseTrust_Request>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetPurchaseTrust_Request)
}
CGCSystemMsg_GetPurchaseTrust_Request::CGCSystemMsg_GetPurchaseTrust_Request(const CGCSystemMsg_GetPurchaseTrust_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetPurchaseTrust_Request)
}

inline void CGCSystemMsg_GetPurchaseTrust_Request::SharedCtor() {
steamid_ = uint64_t{0u};
}

CGCSystemMsg_GetPurchaseTrust_Request::~CGCSystemMsg_GetPurchaseTrust_Request() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetPurchaseTrust_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCSystemMsg_GetPurchaseTrust_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCSystemMsg_GetPurchaseTrust_Request::ArenaDtor(void* object) {
  CGCSystemMsg_GetPurchaseTrust_Request* _this = reinterpret_cast< CGCSystemMsg_GetPurchaseTrust_Request* >(object);
  (void)_this;
}
void CGCSystemMsg_GetPurchaseTrust_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCSystemMsg_GetPurchaseTrust_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCSystemMsg_GetPurchaseTrust_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetPurchaseTrust_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetPurchaseTrust_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetPurchaseTrust_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetPurchaseTrust_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetPurchaseTrust_Request)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetPurchaseTrust_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetPurchaseTrust_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCSystemMsg_GetPurchaseTrust_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetPurchaseTrust_Request::GetClassData() const { return &_class_data_; }

void CGCSystemMsg_GetPurchaseTrust_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCSystemMsg_GetPurchaseTrust_Request *>(to)->MergeFrom(
      static_cast<const CGCSystemMsg_GetPurchaseTrust_Request &>(from));
}


void CGCSystemMsg_GetPurchaseTrust_Request::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetPurchaseTrust_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetPurchaseTrust_Request::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetPurchaseTrust_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Request::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Request::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetPurchaseTrust_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[57]);
}

// ===================================================================

class CGCSystemMsg_GetPurchaseTrust_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CGCSystemMsg_GetPurchaseTrust_Response>()._has_bits_);
  static void set_has_has_prior_purchase_history(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_has_no_recent_password_resets(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_wallet_cash_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_all_trusted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CGCSystemMsg_GetPurchaseTrust_Response)
}
CGCSystemMsg_GetPurchaseTrust_Response::CGCSystemMsg_GetPurchaseTrust_Response(const CGCSystemMsg_GetPurchaseTrust_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&has_prior_purchase_history_, &from.has_prior_purchase_history_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_all_trusted_) -
    reinterpret_cast<char*>(&has_prior_purchase_history_)) + sizeof(time_all_trusted_));
  // @@protoc_insertion_point(copy_constructor:CGCSystemMsg_GetPurchaseTrust_Response)
}

inline void CGCSystemMsg_GetPurchaseTrust_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&has_prior_purchase_history_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_all_trusted_) -
    reinterpret_cast<char*>(&has_prior_purchase_history_)) + sizeof(time_all_trusted_));
}

CGCSystemMsg_GetPurchaseTrust_Response::~CGCSystemMsg_GetPurchaseTrust_Response() {
  // @@protoc_insertion_point(destructor:CGCSystemMsg_GetPurchaseTrust_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CGCSystemMsg_GetPurchaseTrust_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CGCSystemMsg_GetPurchaseTrust_Response::ArenaDtor(void* object) {
  CGCSystemMsg_GetPurchaseTrust_Response* _this = reinterpret_cast< CGCSystemMsg_GetPurchaseTrust_Response* >(object);
  (void)_this;
}
void CGCSystemMsg_GetPurchaseTrust_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CGCSystemMsg_GetPurchaseTrust_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CGCSystemMsg_GetPurchaseTrust_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CGCSystemMsg_GetPurchaseTrust_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&has_prior_purchase_history_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_all_trusted_) -
        reinterpret_cast<char*>(&has_prior_purchase_history_)) + sizeof(time_all_trusted_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CGCSystemMsg_GetPurchaseTrust_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool has_prior_purchase_history = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_has_prior_purchase_history(&has_bits);
          has_prior_purchase_history_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_no_recent_password_resets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_has_no_recent_password_resets(&has_bits);
          has_no_recent_password_resets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_wallet_cash_trusted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_wallet_cash_trusted(&has_bits);
          is_wallet_cash_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 time_all_trusted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_time_all_trusted(&has_bits);
          time_all_trusted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CGCSystemMsg_GetPurchaseTrust_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CGCSystemMsg_GetPurchaseTrust_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_prior_purchase_history = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_has_prior_purchase_history(), target);
  }

  // optional bool has_no_recent_password_resets = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_has_no_recent_password_resets(), target);
  }

  // optional bool is_wallet_cash_trusted = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_wallet_cash_trusted(), target);
  }

  // optional uint32 time_all_trusted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_time_all_trusted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGCSystemMsg_GetPurchaseTrust_Response)
  return target;
}

size_t CGCSystemMsg_GetPurchaseTrust_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CGCSystemMsg_GetPurchaseTrust_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool has_prior_purchase_history = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool has_no_recent_password_resets = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool is_wallet_cash_trusted = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 time_all_trusted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_time_all_trusted());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CGCSystemMsg_GetPurchaseTrust_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CGCSystemMsg_GetPurchaseTrust_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CGCSystemMsg_GetPurchaseTrust_Response::GetClassData() const { return &_class_data_; }

void CGCSystemMsg_GetPurchaseTrust_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CGCSystemMsg_GetPurchaseTrust_Response *>(to)->MergeFrom(
      static_cast<const CGCSystemMsg_GetPurchaseTrust_Response &>(from));
}


void CGCSystemMsg_GetPurchaseTrust_Response::MergeFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CGCSystemMsg_GetPurchaseTrust_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      has_prior_purchase_history_ = from.has_prior_purchase_history_;
    }
    if (cached_has_bits & 0x00000002u) {
      has_no_recent_password_resets_ = from.has_no_recent_password_resets_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_wallet_cash_trusted_ = from.is_wallet_cash_trusted_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_all_trusted_ = from.time_all_trusted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CGCSystemMsg_GetPurchaseTrust_Response::CopyFrom(const CGCSystemMsg_GetPurchaseTrust_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGCSystemMsg_GetPurchaseTrust_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCSystemMsg_GetPurchaseTrust_Response::IsInitialized() const {
  return true;
}

void CGCSystemMsg_GetPurchaseTrust_Response::InternalSwap(CGCSystemMsg_GetPurchaseTrust_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, time_all_trusted_)
      + sizeof(CGCSystemMsg_GetPurchaseTrust_Response::time_all_trusted_)
      - PROTOBUF_FIELD_OFFSET(CGCSystemMsg_GetPurchaseTrust_Response, has_prior_purchase_history_)>(
          reinterpret_cast<char*>(&has_prior_purchase_history_),
          reinterpret_cast<char*>(&other->has_prior_purchase_history_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CGCSystemMsg_GetPurchaseTrust_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[58]);
}

// ===================================================================

class CMsgGCHAccountVacStatusChange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHAccountVacStatusChange>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rtime_vacban_starts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_banned_now(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_banned_future(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCHAccountVacStatusChange)
}
CMsgGCHAccountVacStatusChange::CMsgGCHAccountVacStatusChange(const CMsgGCHAccountVacStatusChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_banned_future_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(is_banned_future_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHAccountVacStatusChange)
}

inline void CMsgGCHAccountVacStatusChange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_banned_future_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(is_banned_future_));
}

CMsgGCHAccountVacStatusChange::~CMsgGCHAccountVacStatusChange() {
  // @@protoc_insertion_point(destructor:CMsgGCHAccountVacStatusChange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCHAccountVacStatusChange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHAccountVacStatusChange::ArenaDtor(void* object) {
  CMsgGCHAccountVacStatusChange* _this = reinterpret_cast< CMsgGCHAccountVacStatusChange* >(object);
  (void)_this;
}
void CMsgGCHAccountVacStatusChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCHAccountVacStatusChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCHAccountVacStatusChange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHAccountVacStatusChange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_banned_future_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(is_banned_future_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHAccountVacStatusChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 rtime_vacban_starts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_rtime_vacban_starts(&has_bits);
          rtime_vacban_starts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_banned_now = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_banned_now(&has_bits);
          is_banned_now_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_banned_future = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_banned_future(&has_bits);
          is_banned_future_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHAccountVacStatusChange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHAccountVacStatusChange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional uint32 rtime_vacban_starts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rtime_vacban_starts(), target);
  }

  // optional bool is_banned_now = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_banned_now(), target);
  }

  // optional bool is_banned_future = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_banned_future(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHAccountVacStatusChange)
  return target;
}

size_t CMsgGCHAccountVacStatusChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHAccountVacStatusChange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional uint32 rtime_vacban_starts = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rtime_vacban_starts());
    }

    // optional bool is_banned_now = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_banned_future = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHAccountVacStatusChange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCHAccountVacStatusChange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHAccountVacStatusChange::GetClassData() const { return &_class_data_; }

void CMsgGCHAccountVacStatusChange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCHAccountVacStatusChange *>(to)->MergeFrom(
      static_cast<const CMsgGCHAccountVacStatusChange &>(from));
}


void CMsgGCHAccountVacStatusChange::MergeFrom(const CMsgGCHAccountVacStatusChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHAccountVacStatusChange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      rtime_vacban_starts_ = from.rtime_vacban_starts_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_banned_now_ = from.is_banned_now_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_banned_future_ = from.is_banned_future_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHAccountVacStatusChange::CopyFrom(const CMsgGCHAccountVacStatusChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHAccountVacStatusChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHAccountVacStatusChange::IsInitialized() const {
  return true;
}

void CMsgGCHAccountVacStatusChange::InternalSwap(CMsgGCHAccountVacStatusChange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, is_banned_future_)
      + sizeof(CMsgGCHAccountVacStatusChange::is_banned_future_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHAccountVacStatusChange, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHAccountVacStatusChange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[59]);
}

// ===================================================================

class CMsgGCGetPartnerAccountLink::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPartnerAccountLink>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPartnerAccountLink)
}
CMsgGCGetPartnerAccountLink::CMsgGCGetPartnerAccountLink(const CMsgGCGetPartnerAccountLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  steamid_ = from.steamid_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPartnerAccountLink)
}

inline void CMsgGCGetPartnerAccountLink::SharedCtor() {
steamid_ = uint64_t{0u};
}

CMsgGCGetPartnerAccountLink::~CMsgGCGetPartnerAccountLink() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPartnerAccountLink)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetPartnerAccountLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetPartnerAccountLink::ArenaDtor(void* object) {
  CMsgGCGetPartnerAccountLink* _this = reinterpret_cast< CMsgGCGetPartnerAccountLink* >(object);
  (void)_this;
}
void CMsgGCGetPartnerAccountLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPartnerAccountLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPartnerAccountLink::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPartnerAccountLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steamid_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPartnerAccountLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPartnerAccountLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPartnerAccountLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPartnerAccountLink)
  return target;
}

size_t CMsgGCGetPartnerAccountLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPartnerAccountLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPartnerAccountLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetPartnerAccountLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPartnerAccountLink::GetClassData() const { return &_class_data_; }

void CMsgGCGetPartnerAccountLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetPartnerAccountLink *>(to)->MergeFrom(
      static_cast<const CMsgGCGetPartnerAccountLink &>(from));
}


void CMsgGCGetPartnerAccountLink::MergeFrom(const CMsgGCGetPartnerAccountLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPartnerAccountLink)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_steamid()) {
    _internal_set_steamid(from._internal_steamid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPartnerAccountLink::CopyFrom(const CMsgGCGetPartnerAccountLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPartnerAccountLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink::InternalSwap(CMsgGCGetPartnerAccountLink* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steamid_, other->steamid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPartnerAccountLink::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[60]);
}

// ===================================================================

class CMsgGCGetPartnerAccountLink_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCGetPartnerAccountLink_Response>()._has_bits_);
  static void set_has_pwid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nexonid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ageclass(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_id_verified(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_adult(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCGetPartnerAccountLink_Response)
}
CMsgGCGetPartnerAccountLink_Response::CMsgGCGetPartnerAccountLink_Response(const CMsgGCGetPartnerAccountLink_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pwid_, &from.pwid_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_verified_) -
    reinterpret_cast<char*>(&pwid_)) + sizeof(id_verified_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCGetPartnerAccountLink_Response)
}

inline void CMsgGCGetPartnerAccountLink_Response::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pwid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_adult_) -
    reinterpret_cast<char*>(&pwid_)) + sizeof(is_adult_));
id_verified_ = true;
}

CMsgGCGetPartnerAccountLink_Response::~CMsgGCGetPartnerAccountLink_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCGetPartnerAccountLink_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCGetPartnerAccountLink_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCGetPartnerAccountLink_Response::ArenaDtor(void* object) {
  CMsgGCGetPartnerAccountLink_Response* _this = reinterpret_cast< CMsgGCGetPartnerAccountLink_Response* >(object);
  (void)_this;
}
void CMsgGCGetPartnerAccountLink_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCGetPartnerAccountLink_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCGetPartnerAccountLink_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCGetPartnerAccountLink_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&pwid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_adult_) -
        reinterpret_cast<char*>(&pwid_)) + sizeof(is_adult_));
    id_verified_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCGetPartnerAccountLink_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 pwid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_pwid(&has_bits);
          pwid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 nexonid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_nexonid(&has_bits);
          nexonid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 ageclass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ageclass(&has_bits);
          ageclass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool id_verified = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_id_verified(&has_bits);
          id_verified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_adult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_adult(&has_bits);
          is_adult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCGetPartnerAccountLink_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCGetPartnerAccountLink_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pwid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pwid(), target);
  }

  // optional uint32 nexonid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nexonid(), target);
  }

  // optional int32 ageclass = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ageclass(), target);
  }

  // optional bool id_verified = 4 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_id_verified(), target);
  }

  // optional bool is_adult = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_adult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCGetPartnerAccountLink_Response)
  return target;
}

size_t CMsgGCGetPartnerAccountLink_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCGetPartnerAccountLink_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 pwid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pwid());
    }

    // optional uint32 nexonid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_nexonid());
    }

    // optional int32 ageclass = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ageclass());
    }

    // optional bool is_adult = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool id_verified = 4 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCGetPartnerAccountLink_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCGetPartnerAccountLink_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCGetPartnerAccountLink_Response::GetClassData() const { return &_class_data_; }

void CMsgGCGetPartnerAccountLink_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCGetPartnerAccountLink_Response *>(to)->MergeFrom(
      static_cast<const CMsgGCGetPartnerAccountLink_Response &>(from));
}


void CMsgGCGetPartnerAccountLink_Response::MergeFrom(const CMsgGCGetPartnerAccountLink_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCGetPartnerAccountLink_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      pwid_ = from.pwid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nexonid_ = from.nexonid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ageclass_ = from.ageclass_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_adult_ = from.is_adult_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_verified_ = from.id_verified_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCGetPartnerAccountLink_Response::CopyFrom(const CMsgGCGetPartnerAccountLink_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCGetPartnerAccountLink_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCGetPartnerAccountLink_Response::IsInitialized() const {
  return true;
}

void CMsgGCGetPartnerAccountLink_Response::InternalSwap(CMsgGCGetPartnerAccountLink_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, is_adult_)
      + sizeof(CMsgGCGetPartnerAccountLink_Response::is_adult_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCGetPartnerAccountLink_Response, pwid_)>(
          reinterpret_cast<char*>(&pwid_),
          reinterpret_cast<char*>(&other->pwid_));
  swap(id_verified_, other->id_verified_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCGetPartnerAccountLink_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[61]);
}

// ===================================================================

class CMsgGCRoutingInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCRoutingInfo>()._has_bits_);
  static void set_has_method(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fallback(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_protobuf_field(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_webapi_param(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCRoutingInfo::CMsgGCRoutingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  dir_index_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCRoutingInfo)
}
CMsgGCRoutingInfo::CMsgGCRoutingInfo(const CMsgGCRoutingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dir_index_(from.dir_index_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  webapi_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    webapi_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_webapi_param()) {
    webapi_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_webapi_param(), 
      GetArenaForAllocation());
  }
  ::memcpy(&method_, &from.method_,
    static_cast<size_t>(reinterpret_cast<char*>(&fallback_) -
    reinterpret_cast<char*>(&method_)) + sizeof(fallback_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCRoutingInfo)
}

inline void CMsgGCRoutingInfo::SharedCtor() {
webapi_param_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  webapi_param_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&method_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&protobuf_field_) -
    reinterpret_cast<char*>(&method_)) + sizeof(protobuf_field_));
fallback_ = 1;
}

CMsgGCRoutingInfo::~CMsgGCRoutingInfo() {
  // @@protoc_insertion_point(destructor:CMsgGCRoutingInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCRoutingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  webapi_param_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCRoutingInfo::ArenaDtor(void* object) {
  CMsgGCRoutingInfo* _this = reinterpret_cast< CMsgGCRoutingInfo* >(object);
  (void)_this;
}
void CMsgGCRoutingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCRoutingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCRoutingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCRoutingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    webapi_param_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&method_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&protobuf_field_) -
        reinterpret_cast<char*>(&method_)) + sizeof(protobuf_field_));
    fallback_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCRoutingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 dir_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dir_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dir_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCRoutingInfo_RoutingMethod_IsValid(val))) {
            _internal_set_method(static_cast<::CMsgGCRoutingInfo_RoutingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgGCRoutingInfo_RoutingMethod_IsValid(val))) {
            _internal_set_fallback(static_cast<::CMsgGCRoutingInfo_RoutingMethod>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 protobuf_field = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_protobuf_field(&has_bits);
          protobuf_field_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string webapi_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_webapi_param();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCRoutingInfo.webapi_param");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCRoutingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCRoutingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 dir_index = 1;
  for (int i = 0, n = this->_internal_dir_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dir_index(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_method(), target);
  }

  // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_fallback(), target);
  }

  // optional uint32 protobuf_field = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_protobuf_field(), target);
  }

  // optional string webapi_param = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_webapi_param().data(), static_cast<int>(this->_internal_webapi_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCRoutingInfo.webapi_param");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_webapi_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCRoutingInfo)
  return target;
}

size_t CMsgGCRoutingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCRoutingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 dir_index = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dir_index_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dir_index_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string webapi_param = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_webapi_param());
    }

    // optional .CMsgGCRoutingInfo.RoutingMethod method = 2 [default = RANDOM];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
    }

    // optional uint32 protobuf_field = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_protobuf_field());
    }

    // optional .CMsgGCRoutingInfo.RoutingMethod fallback = 3 [default = DISCARD];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fallback());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCRoutingInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCRoutingInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCRoutingInfo::GetClassData() const { return &_class_data_; }

void CMsgGCRoutingInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCRoutingInfo *>(to)->MergeFrom(
      static_cast<const CMsgGCRoutingInfo &>(from));
}


void CMsgGCRoutingInfo::MergeFrom(const CMsgGCRoutingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCRoutingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  dir_index_.MergeFrom(from.dir_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_webapi_param(from._internal_webapi_param());
    }
    if (cached_has_bits & 0x00000002u) {
      method_ = from.method_;
    }
    if (cached_has_bits & 0x00000004u) {
      protobuf_field_ = from.protobuf_field_;
    }
    if (cached_has_bits & 0x00000008u) {
      fallback_ = from.fallback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCRoutingInfo::CopyFrom(const CMsgGCRoutingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCRoutingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCRoutingInfo::IsInitialized() const {
  return true;
}

void CMsgGCRoutingInfo::InternalSwap(CMsgGCRoutingInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dir_index_.InternalSwap(&other->dir_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &webapi_param_, lhs_arena,
      &other->webapi_param_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCRoutingInfo, protobuf_field_)
      + sizeof(CMsgGCRoutingInfo::protobuf_field_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCRoutingInfo, method_)>(
          reinterpret_cast<char*>(&method_),
          reinterpret_cast<char*>(&other->method_));
  swap(fallback_, other->fallback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCRoutingInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[62]);
}

// ===================================================================

class CMsgGCMsgMasterSetWebAPIRouting_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetWebAPIRouting_Entry>()._has_bits_);
  static void set_has_interface_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_method_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCRoutingInfo& routing(const CMsgGCMsgMasterSetWebAPIRouting_Entry* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::CMsgGCRoutingInfo&
CMsgGCMsgMasterSetWebAPIRouting_Entry::_Internal::routing(const CMsgGCMsgMasterSetWebAPIRouting_Entry* msg) {
  return *msg->routing_;
}
CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetWebAPIRouting.Entry)
}
CMsgGCMsgMasterSetWebAPIRouting_Entry::CMsgGCMsgMasterSetWebAPIRouting_Entry(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_interface_name()) {
    interface_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_interface_name(), 
      GetArenaForAllocation());
  }
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_method_name()) {
    method_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_routing()) {
    routing_ = new ::CMsgGCRoutingInfo(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetWebAPIRouting.Entry)
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedCtor() {
interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
routing_ = nullptr;
}

CMsgGCMsgMasterSetWebAPIRouting_Entry::~CMsgGCMsgMasterSetWebAPIRouting_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  interface_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete routing_;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetWebAPIRouting_Entry* _this = reinterpret_cast< CMsgGCMsgMasterSetWebAPIRouting_Entry* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetWebAPIRouting_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      interface_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      method_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(routing_ != nullptr);
      routing_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetWebAPIRouting_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string interface_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_method_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo routing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetWebAPIRouting_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string interface_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetWebAPIRouting.Entry.interface_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_interface_name(), target);
  }

  // optional string method_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCMsgMasterSetWebAPIRouting.Entry.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // optional .CMsgGCRoutingInfo routing = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::routing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string interface_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_interface_name());
    }

    // optional string method_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_method_name());
    }

    // optional .CMsgGCRoutingInfo routing = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetWebAPIRouting_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetWebAPIRouting_Entry::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetWebAPIRouting_Entry *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetWebAPIRouting_Entry &>(from));
}


void CMsgGCMsgMasterSetWebAPIRouting_Entry::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_interface_name(from._internal_interface_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_method_name(from._internal_method_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_routing()->::CMsgGCRoutingInfo::MergeFrom(from._internal_routing());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetWebAPIRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Entry::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Entry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &interface_name_, lhs_arena,
      &other->interface_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_name_, lhs_arena,
      &other->method_name_, rhs_arena
  );
  swap(routing_, other->routing_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetWebAPIRouting_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[63]);
}

// ===================================================================

class CMsgGCMsgMasterSetWebAPIRouting::_Internal {
 public:
};

CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetWebAPIRouting)
}
CMsgGCMsgMasterSetWebAPIRouting::CMsgGCMsgMasterSetWebAPIRouting(const CMsgGCMsgMasterSetWebAPIRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetWebAPIRouting)
}

inline void CMsgGCMsgMasterSetWebAPIRouting::SharedCtor() {
}

CMsgGCMsgMasterSetWebAPIRouting::~CMsgGCMsgMasterSetWebAPIRouting() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetWebAPIRouting)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetWebAPIRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgMasterSetWebAPIRouting::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetWebAPIRouting* _this = reinterpret_cast< CMsgGCMsgMasterSetWebAPIRouting* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetWebAPIRouting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetWebAPIRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetWebAPIRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetWebAPIRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetWebAPIRouting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetWebAPIRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetWebAPIRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetWebAPIRouting)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetWebAPIRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetWebAPIRouting.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetWebAPIRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetWebAPIRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetWebAPIRouting::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetWebAPIRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetWebAPIRouting *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetWebAPIRouting &>(from));
}


void CMsgGCMsgMasterSetWebAPIRouting::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetWebAPIRouting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetWebAPIRouting::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetWebAPIRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetWebAPIRouting::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[64]);
}

// ===================================================================

class CMsgGCMsgMasterSetClientMsgRouting_Entry::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetClientMsgRouting_Entry>()._has_bits_);
  static void set_has_msg_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CMsgGCRoutingInfo& routing(const CMsgGCMsgMasterSetClientMsgRouting_Entry* msg);
  static void set_has_routing(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgGCRoutingInfo&
CMsgGCMsgMasterSetClientMsgRouting_Entry::_Internal::routing(const CMsgGCMsgMasterSetClientMsgRouting_Entry* msg) {
  return *msg->routing_;
}
CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetClientMsgRouting.Entry)
}
CMsgGCMsgMasterSetClientMsgRouting_Entry::CMsgGCMsgMasterSetClientMsgRouting_Entry(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing()) {
    routing_ = new ::CMsgGCRoutingInfo(*from.routing_);
  } else {
    routing_ = nullptr;
  }
  msg_type_ = from.msg_type_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetClientMsgRouting.Entry)
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routing_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&msg_type_) -
    reinterpret_cast<char*>(&routing_)) + sizeof(msg_type_));
}

CMsgGCMsgMasterSetClientMsgRouting_Entry::~CMsgGCMsgMasterSetClientMsgRouting_Entry() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Entry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete routing_;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetClientMsgRouting_Entry* _this = reinterpret_cast< CMsgGCMsgMasterSetClientMsgRouting_Entry* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetClientMsgRouting_Entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(routing_ != nullptr);
    routing_->Clear();
  }
  msg_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetClientMsgRouting_Entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 msg_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_msg_type(&has_bits);
          msg_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgGCRoutingInfo routing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetClientMsgRouting_Entry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 msg_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msg_type(), target);
  }

  // optional .CMsgGCRoutingInfo routing = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::routing(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgGCRoutingInfo routing = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *routing_);
    }

    // optional uint32 msg_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_msg_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetClientMsgRouting_Entry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetClientMsgRouting_Entry::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetClientMsgRouting_Entry *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetClientMsgRouting_Entry &>(from));
}


void CMsgGCMsgMasterSetClientMsgRouting_Entry::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_routing()->::CMsgGCRoutingInfo::MergeFrom(from._internal_routing());
    }
    if (cached_has_bits & 0x00000002u) {
      msg_type_ = from.msg_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetClientMsgRouting.Entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Entry::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Entry::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Entry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, msg_type_)
      + sizeof(CMsgGCMsgMasterSetClientMsgRouting_Entry::msg_type_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCMsgMasterSetClientMsgRouting_Entry, routing_)>(
          reinterpret_cast<char*>(&routing_),
          reinterpret_cast<char*>(&other->routing_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetClientMsgRouting_Entry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[65]);
}

// ===================================================================

class CMsgGCMsgMasterSetClientMsgRouting::_Internal {
 public:
};

CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetClientMsgRouting)
}
CMsgGCMsgMasterSetClientMsgRouting::CMsgGCMsgMasterSetClientMsgRouting(const CMsgGCMsgMasterSetClientMsgRouting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetClientMsgRouting)
}

inline void CMsgGCMsgMasterSetClientMsgRouting::SharedCtor() {
}

CMsgGCMsgMasterSetClientMsgRouting::~CMsgGCMsgMasterSetClientMsgRouting() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetClientMsgRouting)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetClientMsgRouting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgMasterSetClientMsgRouting::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetClientMsgRouting* _this = reinterpret_cast< CMsgGCMsgMasterSetClientMsgRouting* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetClientMsgRouting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetClientMsgRouting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetClientMsgRouting::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetClientMsgRouting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetClientMsgRouting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetClientMsgRouting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetClientMsgRouting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_entries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_entries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetClientMsgRouting)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetClientMsgRouting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgMasterSetClientMsgRouting.Entry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetClientMsgRouting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetClientMsgRouting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetClientMsgRouting::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetClientMsgRouting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetClientMsgRouting *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetClientMsgRouting &>(from));
}


void CMsgGCMsgMasterSetClientMsgRouting::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetClientMsgRouting)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetClientMsgRouting::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetClientMsgRouting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetClientMsgRouting::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[66]);
}

// ===================================================================

class CMsgGCMsgMasterSetWebAPIRouting_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetWebAPIRouting_Response>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetWebAPIRouting_Response)
}
CMsgGCMsgMasterSetWebAPIRouting_Response::CMsgGCMsgMasterSetWebAPIRouting_Response(const CMsgGCMsgMasterSetWebAPIRouting_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetWebAPIRouting_Response)
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedCtor() {
eresult_ = 2;
}

CMsgGCMsgMasterSetWebAPIRouting_Response::~CMsgGCMsgMasterSetWebAPIRouting_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetWebAPIRouting_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetWebAPIRouting_Response* _this = reinterpret_cast< CMsgGCMsgMasterSetWebAPIRouting_Response* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetWebAPIRouting_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetWebAPIRouting_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetWebAPIRouting_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetWebAPIRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetWebAPIRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetWebAPIRouting_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetWebAPIRouting_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetWebAPIRouting_Response::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetWebAPIRouting_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetWebAPIRouting_Response *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetWebAPIRouting_Response &>(from));
}


void CMsgGCMsgMasterSetWebAPIRouting_Response::MergeFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::CopyFrom(const CMsgGCMsgMasterSetWebAPIRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetWebAPIRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetWebAPIRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetWebAPIRouting_Response::InternalSwap(CMsgGCMsgMasterSetWebAPIRouting_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetWebAPIRouting_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[67]);
}

// ===================================================================

class CMsgGCMsgMasterSetClientMsgRouting_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgMasterSetClientMsgRouting_Response>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgMasterSetClientMsgRouting_Response)
}
CMsgGCMsgMasterSetClientMsgRouting_Response::CMsgGCMsgMasterSetClientMsgRouting_Response(const CMsgGCMsgMasterSetClientMsgRouting_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  eresult_ = from.eresult_;
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgMasterSetClientMsgRouting_Response)
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedCtor() {
eresult_ = 2;
}

CMsgGCMsgMasterSetClientMsgRouting_Response::~CMsgGCMsgMasterSetClientMsgRouting_Response() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgMasterSetClientMsgRouting_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::ArenaDtor(void* object) {
  CMsgGCMsgMasterSetClientMsgRouting_Response* _this = reinterpret_cast< CMsgGCMsgMasterSetClientMsgRouting_Response* >(object);
  (void)_this;
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgMasterSetClientMsgRouting_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eresult_ = 2;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgMasterSetClientMsgRouting_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgMasterSetClientMsgRouting_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_eresult(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgMasterSetClientMsgRouting_Response)
  return target;
}

size_t CMsgGCMsgMasterSetClientMsgRouting_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eresult = 1 [default = 2];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_eresult());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgMasterSetClientMsgRouting_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgMasterSetClientMsgRouting_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgMasterSetClientMsgRouting_Response::GetClassData() const { return &_class_data_; }

void CMsgGCMsgMasterSetClientMsgRouting_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgMasterSetClientMsgRouting_Response *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgMasterSetClientMsgRouting_Response &>(from));
}


void CMsgGCMsgMasterSetClientMsgRouting_Response::MergeFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_eresult()) {
    _internal_set_eresult(from._internal_eresult());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::CopyFrom(const CMsgGCMsgMasterSetClientMsgRouting_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgMasterSetClientMsgRouting_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgMasterSetClientMsgRouting_Response::IsInitialized() const {
  return true;
}

void CMsgGCMsgMasterSetClientMsgRouting_Response::InternalSwap(CMsgGCMsgMasterSetClientMsgRouting_Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgMasterSetClientMsgRouting_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[68]);
}

// ===================================================================

class CMsgGCMsgSetOptions_MessageRange::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCMsgSetOptions_MessageRange>()._has_bits_);
  static void set_has_low(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_high(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgSetOptions.MessageRange)
}
CMsgGCMsgSetOptions_MessageRange::CMsgGCMsgSetOptions_MessageRange(const CMsgGCMsgSetOptions_MessageRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&low_, &from.low_,
    static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_)) + sizeof(high_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgSetOptions.MessageRange)
}

inline void CMsgGCMsgSetOptions_MessageRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&low_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&high_) -
    reinterpret_cast<char*>(&low_)) + sizeof(high_));
}

CMsgGCMsgSetOptions_MessageRange::~CMsgGCMsgSetOptions_MessageRange() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgSetOptions.MessageRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgSetOptions_MessageRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgSetOptions_MessageRange::ArenaDtor(void* object) {
  CMsgGCMsgSetOptions_MessageRange* _this = reinterpret_cast< CMsgGCMsgSetOptions_MessageRange* >(object);
  (void)_this;
}
void CMsgGCMsgSetOptions_MessageRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgSetOptions_MessageRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgSetOptions_MessageRange::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgSetOptions.MessageRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&low_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&high_) -
        reinterpret_cast<char*>(&low_)) + sizeof(high_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgSetOptions_MessageRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 low = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_low(&has_bits);
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 high = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_high(&has_bits);
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgSetOptions_MessageRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgSetOptions.MessageRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 low = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_low(), target);
  }

  // required uint32 high = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgSetOptions.MessageRange)
  return target;
}

size_t CMsgGCMsgSetOptions_MessageRange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (_internal_has_low()) {
    // required uint32 low = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_low());
  }

  if (_internal_has_high()) {
    // required uint32 high = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_high());
  }

  return total_size;
}
size_t CMsgGCMsgSetOptions_MessageRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgSetOptions.MessageRange)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 low = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_low());

    // required uint32 high = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_high());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgSetOptions_MessageRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgSetOptions_MessageRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgSetOptions_MessageRange::GetClassData() const { return &_class_data_; }

void CMsgGCMsgSetOptions_MessageRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgSetOptions_MessageRange *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgSetOptions_MessageRange &>(from));
}


void CMsgGCMsgSetOptions_MessageRange::MergeFrom(const CMsgGCMsgSetOptions_MessageRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgSetOptions.MessageRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      low_ = from.low_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_ = from.high_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgSetOptions_MessageRange::CopyFrom(const CMsgGCMsgSetOptions_MessageRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgSetOptions.MessageRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions_MessageRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CMsgGCMsgSetOptions_MessageRange::InternalSwap(CMsgGCMsgSetOptions_MessageRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, high_)
      + sizeof(CMsgGCMsgSetOptions_MessageRange::high_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCMsgSetOptions_MessageRange, low_)>(
          reinterpret_cast<char*>(&low_),
          reinterpret_cast<char*>(&other->low_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgSetOptions_MessageRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[69]);
}

// ===================================================================

class CMsgGCMsgSetOptions::_Internal {
 public:
};

CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  options_(arena),
  client_msg_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCMsgSetOptions)
}
CMsgGCMsgSetOptions::CMsgGCMsgSetOptions(const CMsgGCMsgSetOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      options_(from.options_),
      client_msg_ranges_(from.client_msg_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CMsgGCMsgSetOptions)
}

inline void CMsgGCMsgSetOptions::SharedCtor() {
}

CMsgGCMsgSetOptions::~CMsgGCMsgSetOptions() {
  // @@protoc_insertion_point(destructor:CMsgGCMsgSetOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCMsgSetOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCMsgSetOptions::ArenaDtor(void* object) {
  CMsgGCMsgSetOptions* _this = reinterpret_cast< CMsgGCMsgSetOptions* >(object);
  (void)_this;
}
void CMsgGCMsgSetOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCMsgSetOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCMsgSetOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCMsgSetOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  client_msg_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCMsgSetOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .CMsgGCMsgSetOptions.Option options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::CMsgGCMsgSetOptions_Option_IsValid(val))) {
              _internal_add_options(static_cast<::CMsgGCMsgSetOptions_Option>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_options(), ptr, ctx, ::CMsgGCMsgSetOptions_Option_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_client_msg_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCMsgSetOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCMsgSetOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .CMsgGCMsgSetOptions.Option options = 1;
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_options(i), target);
  }

  // repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_client_msg_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_client_msg_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCMsgSetOptions)
  return target;
}

size_t CMsgGCMsgSetOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCMsgSetOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCMsgSetOptions.Option options = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_options_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_options(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .CMsgGCMsgSetOptions.MessageRange client_msg_ranges = 2;
  total_size += 1UL * this->_internal_client_msg_ranges_size();
  for (const auto& msg : this->client_msg_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCMsgSetOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCMsgSetOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCMsgSetOptions::GetClassData() const { return &_class_data_; }

void CMsgGCMsgSetOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCMsgSetOptions *>(to)->MergeFrom(
      static_cast<const CMsgGCMsgSetOptions &>(from));
}


void CMsgGCMsgSetOptions::MergeFrom(const CMsgGCMsgSetOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCMsgSetOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  client_msg_ranges_.MergeFrom(from.client_msg_ranges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCMsgSetOptions::CopyFrom(const CMsgGCMsgSetOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCMsgSetOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCMsgSetOptions::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(client_msg_ranges_))
    return false;
  return true;
}

void CMsgGCMsgSetOptions::InternalSwap(CMsgGCMsgSetOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  client_msg_ranges_.InternalSwap(&other->client_msg_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCMsgSetOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[70]);
}

// ===================================================================

class CMsgGCHUpdateSession_ExtraField::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHUpdateSession_ExtraField>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCHUpdateSession.ExtraField)
}
CMsgGCHUpdateSession_ExtraField::CMsgGCHUpdateSession_ExtraField(const CMsgGCHUpdateSession_ExtraField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CMsgGCHUpdateSession.ExtraField)
}

inline void CMsgGCHUpdateSession_ExtraField::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CMsgGCHUpdateSession_ExtraField::~CMsgGCHUpdateSession_ExtraField() {
  // @@protoc_insertion_point(destructor:CMsgGCHUpdateSession.ExtraField)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCHUpdateSession_ExtraField::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCHUpdateSession_ExtraField::ArenaDtor(void* object) {
  CMsgGCHUpdateSession_ExtraField* _this = reinterpret_cast< CMsgGCHUpdateSession_ExtraField* >(object);
  (void)_this;
}
void CMsgGCHUpdateSession_ExtraField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCHUpdateSession_ExtraField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCHUpdateSession_ExtraField::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHUpdateSession.ExtraField)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHUpdateSession_ExtraField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCHUpdateSession.ExtraField.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgGCHUpdateSession.ExtraField.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHUpdateSession_ExtraField::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHUpdateSession.ExtraField)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCHUpdateSession.ExtraField.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgGCHUpdateSession.ExtraField.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHUpdateSession.ExtraField)
  return target;
}

size_t CMsgGCHUpdateSession_ExtraField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHUpdateSession.ExtraField)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_value());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHUpdateSession_ExtraField::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCHUpdateSession_ExtraField::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHUpdateSession_ExtraField::GetClassData() const { return &_class_data_; }

void CMsgGCHUpdateSession_ExtraField::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCHUpdateSession_ExtraField *>(to)->MergeFrom(
      static_cast<const CMsgGCHUpdateSession_ExtraField &>(from));
}


void CMsgGCHUpdateSession_ExtraField::MergeFrom(const CMsgGCHUpdateSession_ExtraField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHUpdateSession.ExtraField)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHUpdateSession_ExtraField::CopyFrom(const CMsgGCHUpdateSession_ExtraField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHUpdateSession.ExtraField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession_ExtraField::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession_ExtraField::InternalSwap(CMsgGCHUpdateSession_ExtraField* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHUpdateSession_ExtraField::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[71]);
}

// ===================================================================

class CMsgGCHUpdateSession::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgGCHUpdateSession>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_online(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_server_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_server_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_server_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_client_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cm_session_sysid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cm_session_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

CMsgGCHUpdateSession::CMsgGCHUpdateSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  extra_fields_(arena),
  depot_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgGCHUpdateSession)
}
CMsgGCHUpdateSession::CMsgGCHUpdateSession(const CMsgGCHUpdateSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      extra_fields_(from.extra_fields_),
      depot_ids_(from.depot_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cm_session_identifier_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(cm_session_identifier_));
  // @@protoc_insertion_point(copy_constructor:CMsgGCHUpdateSession)
}

inline void CMsgGCHUpdateSession::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steam_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cm_session_identifier_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(cm_session_identifier_));
}

CMsgGCHUpdateSession::~CMsgGCHUpdateSession() {
  // @@protoc_insertion_point(destructor:CMsgGCHUpdateSession)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgGCHUpdateSession::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgGCHUpdateSession::ArenaDtor(void* object) {
  CMsgGCHUpdateSession* _this = reinterpret_cast< CMsgGCHUpdateSession* >(object);
  (void)_this;
}
void CMsgGCHUpdateSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgGCHUpdateSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgGCHUpdateSession::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgGCHUpdateSession)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  extra_fields_.Clear();
  depot_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_addr_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(client_addr_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cm_session_identifier_) -
        reinterpret_cast<char*>(&owner_id_)) + sizeof(cm_session_identifier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgGCHUpdateSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_app_id(&has_bits);
          app_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool online = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_online(&has_bits);
          online_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 server_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_server_steam_id(&has_bits);
          server_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_addr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_server_addr(&has_bits);
          server_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 server_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_server_port(&has_bits);
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 os_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_os_type(&has_bits);
          os_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 client_addr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_client_addr(&has_bits);
          client_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_extra_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 owner_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_owner_id(&has_bits);
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cm_session_sysid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cm_session_sysid(&has_bits);
          cm_session_sysid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cm_session_identifier = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_cm_session_identifier(&has_bits);
          cm_session_identifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 depot_ids = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_depot_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<104>(ptr));
        } else if (static_cast<uint8_t>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_depot_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgGCHUpdateSession::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgGCHUpdateSession)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steam_id(), target);
  }

  // optional uint32 app_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_app_id(), target);
  }

  // optional bool online = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_online(), target);
  }

  // optional fixed64 server_steam_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->_internal_server_steam_id(), target);
  }

  // optional uint32 server_addr = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_server_addr(), target);
  }

  // optional uint32 server_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_server_port(), target);
  }

  // optional uint32 os_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_os_type(), target);
  }

  // optional uint32 client_addr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_client_addr(), target);
  }

  // repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_extra_fields_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_extra_fields(i), target, stream);
  }

  // optional fixed64 owner_id = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_owner_id(), target);
  }

  // optional uint32 cm_session_sysid = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cm_session_sysid(), target);
  }

  // optional uint32 cm_session_identifier = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_cm_session_identifier(), target);
  }

  // repeated uint32 depot_ids = 13;
  for (int i = 0, n = this->_internal_depot_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_depot_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgGCHUpdateSession)
  return target;
}

size_t CMsgGCHUpdateSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgGCHUpdateSession)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgGCHUpdateSession.ExtraField extra_fields = 9;
  total_size += 1UL * this->_internal_extra_fields_size();
  for (const auto& msg : this->extra_fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 depot_ids = 13;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->depot_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_depot_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 app_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_id());
    }

    // optional bool online = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional fixed64 server_steam_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 server_addr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_addr());
    }

    // optional uint32 server_port = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_server_port());
    }

    // optional uint32 os_type = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_os_type());
    }

    // optional uint32 client_addr = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_client_addr());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional fixed64 owner_id = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional uint32 cm_session_sysid = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cm_session_sysid());
    }

    // optional uint32 cm_session_identifier = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cm_session_identifier());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgGCHUpdateSession::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgGCHUpdateSession::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgGCHUpdateSession::GetClassData() const { return &_class_data_; }

void CMsgGCHUpdateSession::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgGCHUpdateSession *>(to)->MergeFrom(
      static_cast<const CMsgGCHUpdateSession &>(from));
}


void CMsgGCHUpdateSession::MergeFrom(const CMsgGCHUpdateSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgGCHUpdateSession)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  extra_fields_.MergeFrom(from.extra_fields_);
  depot_ids_.MergeFrom(from.depot_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      app_id_ = from.app_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      online_ = from.online_;
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_addr_ = from.server_addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      server_port_ = from.server_port_;
    }
    if (cached_has_bits & 0x00000040u) {
      os_type_ = from.os_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      client_addr_ = from.client_addr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      owner_id_ = from.owner_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      cm_session_sysid_ = from.cm_session_sysid_;
    }
    if (cached_has_bits & 0x00000400u) {
      cm_session_identifier_ = from.cm_session_identifier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgGCHUpdateSession::CopyFrom(const CMsgGCHUpdateSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgGCHUpdateSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCHUpdateSession::IsInitialized() const {
  return true;
}

void CMsgGCHUpdateSession::InternalSwap(CMsgGCHUpdateSession* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  extra_fields_.InternalSwap(&other->extra_fields_);
  depot_ids_.InternalSwap(&other->depot_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgGCHUpdateSession, cm_session_identifier_)
      + sizeof(CMsgGCHUpdateSession::cm_session_identifier_)
      - PROTOBUF_FIELD_OFFSET(CMsgGCHUpdateSession, steam_id_)>(
          reinterpret_cast<char*>(&steam_id_),
          reinterpret_cast<char*>(&other->steam_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgGCHUpdateSession::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[72]);
}

// ===================================================================

class CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances>()._has_bits_);
  static void set_has_app_instance_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  other_steamids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}
CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      other_steamids_(from.other_steamids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_instance_count_ = from.app_instance_count_;
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
}

inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedCtor() {
app_instance_count_ = 0u;
}

CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::~CMsgNotificationOfSuspiciousActivity_MultipleGameInstances() {
  // @@protoc_insertion_point(destructor:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::ArenaDtor(void* object) {
  CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* _this = reinterpret_cast< CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* >(object);
  (void)_this;
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_steamids_.Clear();
  app_instance_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 app_instance_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_app_instance_count(&has_bits);
          app_instance_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 other_steamids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_other_steamids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
            ptr += sizeof(uint64_t);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<17>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_other_steamids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 app_instance_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_app_instance_count(), target);
  }

  // repeated fixed64 other_steamids = 2;
  for (int i = 0, n = this->_internal_other_steamids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_other_steamids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 other_steamids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_other_steamids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_other_steamids_size());
    total_size += data_size;
  }

  // optional uint32 app_instance_count = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_app_instance_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetClassData() const { return &_class_data_; }

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgNotificationOfSuspiciousActivity_MultipleGameInstances *>(to)->MergeFrom(
      static_cast<const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances &>(from));
}


void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  other_steamids_.MergeFrom(from.other_steamids_);
  if (from._internal_has_app_instance_count()) {
    _internal_set_app_instance_count(from._internal_app_instance_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::CopyFrom(const CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationOfSuspiciousActivity.MultipleGameInstances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::InternalSwap(CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  other_steamids_.InternalSwap(&other->other_steamids_);
  swap(app_instance_count_, other->app_instance_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[73]);
}

// ===================================================================

class CMsgNotificationOfSuspiciousActivity::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgNotificationOfSuspiciousActivity>()._has_bits_);
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances& multiple_instances(const CMsgNotificationOfSuspiciousActivity* msg);
  static void set_has_multiple_instances(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances&
CMsgNotificationOfSuspiciousActivity::_Internal::multiple_instances(const CMsgNotificationOfSuspiciousActivity* msg) {
  return *msg->multiple_instances_;
}
CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgNotificationOfSuspiciousActivity)
}
CMsgNotificationOfSuspiciousActivity::CMsgNotificationOfSuspiciousActivity(const CMsgNotificationOfSuspiciousActivity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_multiple_instances()) {
    multiple_instances_ = new ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances(*from.multiple_instances_);
  } else {
    multiple_instances_ = nullptr;
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CMsgNotificationOfSuspiciousActivity)
}

inline void CMsgNotificationOfSuspiciousActivity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&multiple_instances_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&multiple_instances_)) + sizeof(appid_));
}

CMsgNotificationOfSuspiciousActivity::~CMsgNotificationOfSuspiciousActivity() {
  // @@protoc_insertion_point(destructor:CMsgNotificationOfSuspiciousActivity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgNotificationOfSuspiciousActivity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete multiple_instances_;
}

void CMsgNotificationOfSuspiciousActivity::ArenaDtor(void* object) {
  CMsgNotificationOfSuspiciousActivity* _this = reinterpret_cast< CMsgNotificationOfSuspiciousActivity* >(object);
  (void)_this;
}
void CMsgNotificationOfSuspiciousActivity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgNotificationOfSuspiciousActivity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgNotificationOfSuspiciousActivity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgNotificationOfSuspiciousActivity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(multiple_instances_ != nullptr);
    multiple_instances_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgNotificationOfSuspiciousActivity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 steamid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 appid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_multiple_instances(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgNotificationOfSuspiciousActivity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgNotificationOfSuspiciousActivity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(1, this->_internal_steamid(), target);
  }

  // optional uint32 appid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_appid(), target);
  }

  // optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::multiple_instances(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgNotificationOfSuspiciousActivity)
  return target;
}

size_t CMsgNotificationOfSuspiciousActivity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgNotificationOfSuspiciousActivity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .CMsgNotificationOfSuspiciousActivity.MultipleGameInstances multiple_instances = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *multiple_instances_);
    }

    // optional fixed64 steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgNotificationOfSuspiciousActivity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgNotificationOfSuspiciousActivity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgNotificationOfSuspiciousActivity::GetClassData() const { return &_class_data_; }

void CMsgNotificationOfSuspiciousActivity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgNotificationOfSuspiciousActivity *>(to)->MergeFrom(
      static_cast<const CMsgNotificationOfSuspiciousActivity &>(from));
}


void CMsgNotificationOfSuspiciousActivity::MergeFrom(const CMsgNotificationOfSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgNotificationOfSuspiciousActivity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_multiple_instances()->::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances::MergeFrom(from._internal_multiple_instances());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgNotificationOfSuspiciousActivity::CopyFrom(const CMsgNotificationOfSuspiciousActivity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgNotificationOfSuspiciousActivity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgNotificationOfSuspiciousActivity::IsInitialized() const {
  return true;
}

void CMsgNotificationOfSuspiciousActivity::InternalSwap(CMsgNotificationOfSuspiciousActivity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, appid_)
      + sizeof(CMsgNotificationOfSuspiciousActivity::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgNotificationOfSuspiciousActivity, multiple_instances_)>(
          reinterpret_cast<char*>(&multiple_instances_),
          reinterpret_cast<char*>(&other->multiple_instances_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgNotificationOfSuspiciousActivity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[74]);
}

// ===================================================================

class CMsgDPPartnerMicroTxns_PartnerMicroTxn::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxns_PartnerMicroTxn>()._has_bits_);
  static void set_has_init_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_txn_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_id(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_line_item(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_item_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_def_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tax(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_price_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tax_usd(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_purchase_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_steam_txn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_country_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_region_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quantity(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_ref_trans_id(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}
CMsgDPPartnerMicroTxns_PartnerMicroTxn::CMsgDPPartnerMicroTxns_PartnerMicroTxn(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_country_code()) {
    country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_country_code(), 
      GetArenaForAllocation());
  }
  region_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_region_code()) {
    region_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_region_code(), 
      GetArenaForAllocation());
  }
  ::memcpy(&init_time_, &from.init_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&ref_trans_id_) -
    reinterpret_cast<char*>(&init_time_)) + sizeof(ref_trans_id_));
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
}

inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedCtor() {
country_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
region_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  region_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&init_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ref_trans_id_) -
    reinterpret_cast<char*>(&init_time_)) + sizeof(ref_trans_id_));
}

CMsgDPPartnerMicroTxns_PartnerMicroTxn::~CMsgDPPartnerMicroTxns_PartnerMicroTxn() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::ArenaDtor(void* object) {
  CMsgDPPartnerMicroTxns_PartnerMicroTxn* _this = reinterpret_cast< CMsgDPPartnerMicroTxns_PartnerMicroTxn* >(object);
  (void)_this;
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDPPartnerMicroTxns_PartnerMicroTxn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      country_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      region_code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&init_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&init_time_)) + sizeof(item_id_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&price_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&price_)) + sizeof(quantity_));
  }
  ref_trans_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxns_PartnerMicroTxn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 init_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_init_time(&has_bits);
          init_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_update_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_update_time(&has_bits);
          last_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 txn_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_txn_id(&has_bits);
          txn_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 account_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_account_id(&has_bits);
          account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 line_item = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_line_item(&has_bits);
          line_item_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 item_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_item_id(&has_bits);
          item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 def_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_def_index(&has_bits);
          def_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_price(&has_bits);
          price_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tax = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tax(&has_bits);
          tax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 price_usd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_price_usd(&has_bits);
          price_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 tax_usd = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tax_usd(&has_bits);
          tax_usd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 purchase_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_purchase_type(&has_bits);
          purchase_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 steam_txn_type = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_steam_txn_type(&has_bits);
          steam_txn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string country_code = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_country_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string region_code = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_region_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quantity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_quantity(&has_bits);
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 ref_trans_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_ref_trans_id(&has_bits);
          ref_trans_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxns_PartnerMicroTxn::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 init_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_init_time(), target);
  }

  // optional uint32 last_update_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_update_time(), target);
  }

  // optional uint64 txn_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_txn_id(), target);
  }

  // optional uint32 account_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_account_id(), target);
  }

  // optional uint32 line_item = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_line_item(), target);
  }

  // optional uint64 item_id = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_item_id(), target);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_def_index(), target);
  }

  // optional uint64 price = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_price(), target);
  }

  // optional uint64 tax = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tax(), target);
  }

  // optional uint64 price_usd = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_price_usd(), target);
  }

  // optional uint64 tax_usd = 11;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tax_usd(), target);
  }

  // optional uint32 purchase_type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_purchase_type(), target);
  }

  // optional uint32 steam_txn_type = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_steam_txn_type(), target);
  }

  // optional string country_code = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerMicroTxn.country_code");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_country_code(), target);
  }

  // optional string region_code = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_region_code().data(), static_cast<int>(this->_internal_region_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerMicroTxn.region_code");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_region_code(), target);
  }

  // optional int32 quantity = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_quantity(), target);
  }

  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_ref_trans_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerMicroTxn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string country_code = 14;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_country_code());
    }

    // optional string region_code = 15;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region_code());
    }

    // optional uint32 init_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_init_time());
    }

    // optional uint32 last_update_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_last_update_time());
    }

    // optional uint64 txn_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_txn_id());
    }

    // optional uint32 account_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_account_id());
    }

    // optional uint32 line_item = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_line_item());
    }

    // optional uint64 item_id = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_item_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint64 price = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_price());
    }

    // optional uint64 tax = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_tax());
    }

    // optional uint32 def_index = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_def_index());
    }

    // optional uint32 purchase_type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_purchase_type());
    }

    // optional uint64 price_usd = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_price_usd());
    }

    // optional uint64 tax_usd = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_tax_usd());
    }

    // optional uint32 steam_txn_type = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_steam_txn_type());
    }

    // optional int32 quantity = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_quantity());
    }

  }
  // optional uint64 ref_trans_id = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ref_trans_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxns_PartnerMicroTxn::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxns_PartnerMicroTxn::GetClassData() const { return &_class_data_; }

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDPPartnerMicroTxns_PartnerMicroTxn *>(to)->MergeFrom(
      static_cast<const CMsgDPPartnerMicroTxns_PartnerMicroTxn &>(from));
}


void CMsgDPPartnerMicroTxns_PartnerMicroTxn::MergeFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_country_code(from._internal_country_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_region_code(from._internal_region_code());
    }
    if (cached_has_bits & 0x00000004u) {
      init_time_ = from.init_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_update_time_ = from.last_update_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      line_item_ = from.line_item_;
    }
    if (cached_has_bits & 0x00000080u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      price_ = from.price_;
    }
    if (cached_has_bits & 0x00000200u) {
      tax_ = from.tax_;
    }
    if (cached_has_bits & 0x00000400u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      purchase_type_ = from.purchase_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      price_usd_ = from.price_usd_;
    }
    if (cached_has_bits & 0x00002000u) {
      tax_usd_ = from.tax_usd_;
    }
    if (cached_has_bits & 0x00004000u) {
      steam_txn_type_ = from.steam_txn_type_;
    }
    if (cached_has_bits & 0x00008000u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_ref_trans_id(from._internal_ref_trans_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerMicroTxn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxns.PartnerMicroTxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerMicroTxn::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerMicroTxn::InternalSwap(CMsgDPPartnerMicroTxns_PartnerMicroTxn* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &region_code_, lhs_arena,
      &other->region_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, ref_trans_id_)
      + sizeof(CMsgDPPartnerMicroTxns_PartnerMicroTxn::ref_trans_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns_PartnerMicroTxn, init_time_)>(
          reinterpret_cast<char*>(&init_time_),
          reinterpret_cast<char*>(&other->init_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxns_PartnerMicroTxn::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[75]);
}

// ===================================================================

class CMsgDPPartnerMicroTxns_PartnerInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxns_PartnerInfo>()._has_bits_);
  static void set_has_partner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_partner_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxns.PartnerInfo)
}
CMsgDPPartnerMicroTxns_PartnerInfo::CMsgDPPartnerMicroTxns_PartnerInfo(const CMsgDPPartnerMicroTxns_PartnerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  partner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    partner_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_partner_name()) {
    partner_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_partner_name(), 
      GetArenaForAllocation());
  }
  currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currency_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    currency_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_code(), 
      GetArenaForAllocation());
  }
  currency_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    currency_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_name()) {
    currency_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_currency_name(), 
      GetArenaForAllocation());
  }
  partner_id_ = from.partner_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxns.PartnerInfo)
}

inline void CMsgDPPartnerMicroTxns_PartnerInfo::SharedCtor() {
partner_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  partner_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
currency_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currency_code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
currency_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  currency_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
partner_id_ = 0u;
}

CMsgDPPartnerMicroTxns_PartnerInfo::~CMsgDPPartnerMicroTxns_PartnerInfo() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxns.PartnerInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDPPartnerMicroTxns_PartnerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  partner_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgDPPartnerMicroTxns_PartnerInfo::ArenaDtor(void* object) {
  CMsgDPPartnerMicroTxns_PartnerInfo* _this = reinterpret_cast< CMsgDPPartnerMicroTxns_PartnerInfo* >(object);
  (void)_this;
}
void CMsgDPPartnerMicroTxns_PartnerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDPPartnerMicroTxns_PartnerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxns_PartnerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      partner_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      currency_name_.ClearNonDefaultToEmpty();
    }
  }
  partner_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxns_PartnerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 partner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_partner_id(&has_bits);
          partner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string partner_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_partner_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_currency_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxns_PartnerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 partner_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_partner_id(), target);
  }

  // optional string partner_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_partner_name().data(), static_cast<int>(this->_internal_partner_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerInfo.partner_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_partner_name(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerInfo.currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency_code(), target);
  }

  // optional string currency_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_name().data(), static_cast<int>(this->_internal_currency_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.PartnerInfo.currency_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_currency_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxns.PartnerInfo)
  return target;
}

size_t CMsgDPPartnerMicroTxns_PartnerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string partner_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_partner_name());
    }

    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string currency_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_name());
    }

    // optional uint32 partner_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_partner_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxns_PartnerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDPPartnerMicroTxns_PartnerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxns_PartnerInfo::GetClassData() const { return &_class_data_; }

void CMsgDPPartnerMicroTxns_PartnerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDPPartnerMicroTxns_PartnerInfo *>(to)->MergeFrom(
      static_cast<const CMsgDPPartnerMicroTxns_PartnerInfo &>(from));
}


void CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_partner_name(from._internal_partner_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_currency_name(from._internal_currency_name());
    }
    if (cached_has_bits & 0x00000008u) {
      partner_id_ = from.partner_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxns_PartnerInfo::CopyFrom(const CMsgDPPartnerMicroTxns_PartnerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxns.PartnerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns_PartnerInfo::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns_PartnerInfo::InternalSwap(CMsgDPPartnerMicroTxns_PartnerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &partner_name_, lhs_arena,
      &other->partner_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_code_, lhs_arena,
      &other->currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &currency_name_, lhs_arena,
      &other->currency_name_, rhs_arena
  );
  swap(partner_id_, other->partner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxns_PartnerInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[76]);
}

// ===================================================================

class CMsgDPPartnerMicroTxns::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxns>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CMsgDPPartnerMicroTxns_PartnerInfo& partner(const CMsgDPPartnerMicroTxns* msg);
  static void set_has_partner(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::CMsgDPPartnerMicroTxns_PartnerInfo&
CMsgDPPartnerMicroTxns::_Internal::partner(const CMsgDPPartnerMicroTxns* msg) {
  return *msg->partner_;
}
CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  transactions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxns)
}
CMsgDPPartnerMicroTxns::CMsgDPPartnerMicroTxns(const CMsgDPPartnerMicroTxns& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  gc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    gc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_gc_name()) {
    gc_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_gc_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_partner()) {
    partner_ = new ::CMsgDPPartnerMicroTxns_PartnerInfo(*from.partner_);
  } else {
    partner_ = nullptr;
  }
  appid_ = from.appid_;
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxns)
}

inline void CMsgDPPartnerMicroTxns::SharedCtor() {
gc_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  gc_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&partner_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&partner_)) + sizeof(appid_));
}

CMsgDPPartnerMicroTxns::~CMsgDPPartnerMicroTxns() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxns)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDPPartnerMicroTxns::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  gc_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete partner_;
}

void CMsgDPPartnerMicroTxns::ArenaDtor(void* object) {
  CMsgDPPartnerMicroTxns* _this = reinterpret_cast< CMsgDPPartnerMicroTxns* >(object);
  (void)_this;
}
void CMsgDPPartnerMicroTxns::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDPPartnerMicroTxns::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxns::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxns)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gc_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(partner_ != nullptr);
      partner_->Clear();
    }
  }
  appid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxns::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string gc_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_gc_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CMsgDPPartnerMicroTxns.gc_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_partner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxns::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxns)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional string gc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_gc_name().data(), static_cast<int>(this->_internal_gc_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgDPPartnerMicroTxns.gc_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_gc_name(), target);
  }

  // optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::partner(this), target, stream);
  }

  // repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxns)
  return target;
}

size_t CMsgDPPartnerMicroTxns::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxns)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .CMsgDPPartnerMicroTxns.PartnerMicroTxn transactions = 4;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string gc_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_gc_name());
    }

    // optional .CMsgDPPartnerMicroTxns.PartnerInfo partner = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *partner_);
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxns::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDPPartnerMicroTxns::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxns::GetClassData() const { return &_class_data_; }

void CMsgDPPartnerMicroTxns::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDPPartnerMicroTxns *>(to)->MergeFrom(
      static_cast<const CMsgDPPartnerMicroTxns &>(from));
}


void CMsgDPPartnerMicroTxns::MergeFrom(const CMsgDPPartnerMicroTxns& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxns)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_gc_name(from._internal_gc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_partner()->::CMsgDPPartnerMicroTxns_PartnerInfo::MergeFrom(from._internal_partner());
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxns::CopyFrom(const CMsgDPPartnerMicroTxns& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxns)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxns::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxns::InternalSwap(CMsgDPPartnerMicroTxns* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  transactions_.InternalSwap(&other->transactions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &gc_name_, lhs_arena,
      &other->gc_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns, appid_)
      + sizeof(CMsgDPPartnerMicroTxns::appid_)
      - PROTOBUF_FIELD_OFFSET(CMsgDPPartnerMicroTxns, partner_)>(
          reinterpret_cast<char*>(&partner_),
          reinterpret_cast<char*>(&other->partner_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxns::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[77]);
}

// ===================================================================

class CMsgDPPartnerMicroTxnsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CMsgDPPartnerMicroTxnsResponse>()._has_bits_);
  static void set_has_eresult(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_eerrorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CMsgDPPartnerMicroTxnsResponse)
}
CMsgDPPartnerMicroTxnsResponse::CMsgDPPartnerMicroTxnsResponse(const CMsgDPPartnerMicroTxnsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&eerrorcode_, &from.eerrorcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&eresult_) -
    reinterpret_cast<char*>(&eerrorcode_)) + sizeof(eresult_));
  // @@protoc_insertion_point(copy_constructor:CMsgDPPartnerMicroTxnsResponse)
}

inline void CMsgDPPartnerMicroTxnsResponse::SharedCtor() {
eerrorcode_ = 0;
eresult_ = 2u;
}

CMsgDPPartnerMicroTxnsResponse::~CMsgDPPartnerMicroTxnsResponse() {
  // @@protoc_insertion_point(destructor:CMsgDPPartnerMicroTxnsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CMsgDPPartnerMicroTxnsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CMsgDPPartnerMicroTxnsResponse::ArenaDtor(void* object) {
  CMsgDPPartnerMicroTxnsResponse* _this = reinterpret_cast< CMsgDPPartnerMicroTxnsResponse* >(object);
  (void)_this;
}
void CMsgDPPartnerMicroTxnsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CMsgDPPartnerMicroTxnsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CMsgDPPartnerMicroTxnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgDPPartnerMicroTxnsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    eerrorcode_ = 0;
    eresult_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CMsgDPPartnerMicroTxnsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 eresult = 1 [default = 2];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_eresult(&has_bits);
          eresult_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgDPPartnerMicroTxnsResponse_EErrorCode_IsValid(val))) {
            _internal_set_eerrorcode(static_cast<::CMsgDPPartnerMicroTxnsResponse_EErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CMsgDPPartnerMicroTxnsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgDPPartnerMicroTxnsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 eresult = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_eresult(), target);
  }

  // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_eerrorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgDPPartnerMicroTxnsResponse)
  return target;
}

size_t CMsgDPPartnerMicroTxnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgDPPartnerMicroTxnsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .CMsgDPPartnerMicroTxnsResponse.EErrorCode eerrorcode = 2 [default = k_MsgValid];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_eerrorcode());
    }

    // optional uint32 eresult = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_eresult());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CMsgDPPartnerMicroTxnsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CMsgDPPartnerMicroTxnsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CMsgDPPartnerMicroTxnsResponse::GetClassData() const { return &_class_data_; }

void CMsgDPPartnerMicroTxnsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CMsgDPPartnerMicroTxnsResponse *>(to)->MergeFrom(
      static_cast<const CMsgDPPartnerMicroTxnsResponse &>(from));
}


void CMsgDPPartnerMicroTxnsResponse::MergeFrom(const CMsgDPPartnerMicroTxnsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgDPPartnerMicroTxnsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      eerrorcode_ = from.eerrorcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      eresult_ = from.eresult_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgDPPartnerMicroTxnsResponse::CopyFrom(const CMsgDPPartnerMicroTxnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgDPPartnerMicroTxnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDPPartnerMicroTxnsResponse::IsInitialized() const {
  return true;
}

void CMsgDPPartnerMicroTxnsResponse::InternalSwap(CMsgDPPartnerMicroTxnsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eerrorcode_, other->eerrorcode_);
  swap(eresult_, other->eresult_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgDPPartnerMicroTxnsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[78]);
}

// ===================================================================

class CChinaAgreementSessions_StartAgreementSessionInGame_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<CChinaAgreementSessions_StartAgreementSessionInGame_Request>()._has_bits_);
  static void set_has_appid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_steamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_ipaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChinaAgreementSessions_StartAgreementSessionInGame_Request::CChinaAgreementSessions_StartAgreementSessionInGame_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
}
CChinaAgreementSessions_StartAgreementSessionInGame_Request::CChinaAgreementSessions_StartAgreementSessionInGame_Request(const CChinaAgreementSessions_StartAgreementSessionInGame_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  client_ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_ipaddress()) {
    client_ipaddress_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_client_ipaddress(), 
      GetArenaForAllocation());
  }
  ::memcpy(&steamid_, &from.steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  // @@protoc_insertion_point(copy_constructor:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
}

inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::SharedCtor() {
client_ipaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_ipaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steamid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&appid_) -
    reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
}

CChinaAgreementSessions_StartAgreementSessionInGame_Request::~CChinaAgreementSessions_StartAgreementSessionInGame_Request() {
  // @@protoc_insertion_point(destructor:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChinaAgreementSessions_StartAgreementSessionInGame_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_ipaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Request::ArenaDtor(void* object) {
  CChinaAgreementSessions_StartAgreementSessionInGame_Request* _this = reinterpret_cast< CChinaAgreementSessions_StartAgreementSessionInGame_Request* >(object);
  (void)_this;
}
void CChinaAgreementSessions_StartAgreementSessionInGame_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChinaAgreementSessions_StartAgreementSessionInGame_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_ipaddress_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&appid_) -
        reinterpret_cast<char*>(&steamid_)) + sizeof(appid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChinaAgreementSessions_StartAgreementSessionInGame_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 appid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_appid(&has_bits);
          appid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional fixed64 steamid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_steamid(&has_bits);
          steamid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string client_ipaddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_client_ipaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChinaAgreementSessions_StartAgreementSessionInGame_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 appid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_appid(), target);
  }

  // optional fixed64 steamid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(2, this->_internal_steamid(), target);
  }

  // optional string client_ipaddress = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_ipaddress().data(), static_cast<int>(this->_internal_client_ipaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChinaAgreementSessions_StartAgreementSessionInGame_Request.client_ipaddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_client_ipaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
  return target;
}

size_t CChinaAgreementSessions_StartAgreementSessionInGame_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string client_ipaddress = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_client_ipaddress());
    }

    // optional fixed64 steamid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 appid = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_appid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChinaAgreementSessions_StartAgreementSessionInGame_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChinaAgreementSessions_StartAgreementSessionInGame_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChinaAgreementSessions_StartAgreementSessionInGame_Request::GetClassData() const { return &_class_data_; }

void CChinaAgreementSessions_StartAgreementSessionInGame_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChinaAgreementSessions_StartAgreementSessionInGame_Request *>(to)->MergeFrom(
      static_cast<const CChinaAgreementSessions_StartAgreementSessionInGame_Request &>(from));
}


void CChinaAgreementSessions_StartAgreementSessionInGame_Request::MergeFrom(const CChinaAgreementSessions_StartAgreementSessionInGame_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_client_ipaddress(from._internal_client_ipaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      steamid_ = from.steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      appid_ = from.appid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Request::CopyFrom(const CChinaAgreementSessions_StartAgreementSessionInGame_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChinaAgreementSessions_StartAgreementSessionInGame_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChinaAgreementSessions_StartAgreementSessionInGame_Request::IsInitialized() const {
  return true;
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Request::InternalSwap(CChinaAgreementSessions_StartAgreementSessionInGame_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &client_ipaddress_, lhs_arena,
      &other->client_ipaddress_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CChinaAgreementSessions_StartAgreementSessionInGame_Request, appid_)
      + sizeof(CChinaAgreementSessions_StartAgreementSessionInGame_Request::appid_)
      - PROTOBUF_FIELD_OFFSET(CChinaAgreementSessions_StartAgreementSessionInGame_Request, steamid_)>(
          reinterpret_cast<char*>(&steamid_),
          reinterpret_cast<char*>(&other->steamid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CChinaAgreementSessions_StartAgreementSessionInGame_Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[79]);
}

// ===================================================================

class CChinaAgreementSessions_StartAgreementSessionInGame_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<CChinaAgreementSessions_StartAgreementSessionInGame_Response>()._has_bits_);
  static void set_has_agreement_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CChinaAgreementSessions_StartAgreementSessionInGame_Response::CChinaAgreementSessions_StartAgreementSessionInGame_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
}
CChinaAgreementSessions_StartAgreementSessionInGame_Response::CChinaAgreementSessions_StartAgreementSessionInGame_Response(const CChinaAgreementSessions_StartAgreementSessionInGame_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agreement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agreement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_agreement_url()) {
    agreement_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agreement_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
}

inline void CChinaAgreementSessions_StartAgreementSessionInGame_Response::SharedCtor() {
agreement_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agreement_url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CChinaAgreementSessions_StartAgreementSessionInGame_Response::~CChinaAgreementSessions_StartAgreementSessionInGame_Response() {
  // @@protoc_insertion_point(destructor:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CChinaAgreementSessions_StartAgreementSessionInGame_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agreement_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Response::ArenaDtor(void* object) {
  CChinaAgreementSessions_StartAgreementSessionInGame_Response* _this = reinterpret_cast< CChinaAgreementSessions_StartAgreementSessionInGame_Response* >(object);
  (void)_this;
}
void CChinaAgreementSessions_StartAgreementSessionInGame_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CChinaAgreementSessions_StartAgreementSessionInGame_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    agreement_url_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CChinaAgreementSessions_StartAgreementSessionInGame_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string agreement_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agreement_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CChinaAgreementSessions_StartAgreementSessionInGame_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string agreement_url = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_agreement_url().data(), static_cast<int>(this->_internal_agreement_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CChinaAgreementSessions_StartAgreementSessionInGame_Response.agreement_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agreement_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
  return target;
}

size_t CChinaAgreementSessions_StartAgreementSessionInGame_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string agreement_url = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agreement_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CChinaAgreementSessions_StartAgreementSessionInGame_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CChinaAgreementSessions_StartAgreementSessionInGame_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CChinaAgreementSessions_StartAgreementSessionInGame_Response::GetClassData() const { return &_class_data_; }

void CChinaAgreementSessions_StartAgreementSessionInGame_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CChinaAgreementSessions_StartAgreementSessionInGame_Response *>(to)->MergeFrom(
      static_cast<const CChinaAgreementSessions_StartAgreementSessionInGame_Response &>(from));
}


void CChinaAgreementSessions_StartAgreementSessionInGame_Response::MergeFrom(const CChinaAgreementSessions_StartAgreementSessionInGame_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_agreement_url()) {
    _internal_set_agreement_url(from._internal_agreement_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Response::CopyFrom(const CChinaAgreementSessions_StartAgreementSessionInGame_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CChinaAgreementSessions_StartAgreementSessionInGame_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CChinaAgreementSessions_StartAgreementSessionInGame_Response::IsInitialized() const {
  return true;
}

void CChinaAgreementSessions_StartAgreementSessionInGame_Response::InternalSwap(CChinaAgreementSessions_StartAgreementSessionInGame_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agreement_url_, lhs_arena,
      &other->agreement_url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CChinaAgreementSessions_StartAgreementSessionInGame_Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_steammessages_2eproto_getter, &descriptor_table_steammessages_2eproto_once,
      file_level_metadata_steammessages_2eproto[80]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  key_field(kKeyFieldFieldNumber, false);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_soft_limit(kMsgpoolSoftLimitFieldNumber, 32);
PROTOBUF_ATTRIBUTE_INIT_PRIORITY ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< int32_t >, 5, false >
  msgpool_hard_limit(kMsgpoolHardLimitFieldNumber, 384);

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgProtoBufHeader* Arena::CreateMaybeMessage< ::CMsgProtoBufHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgProtoBufHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWebAPIKey* Arena::CreateMaybeMessage< ::CMsgWebAPIKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWebAPIKey >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpRequest_RequestHeader* Arena::CreateMaybeMessage< ::CMsgHttpRequest_RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpRequest_RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpRequest_QueryParam* Arena::CreateMaybeMessage< ::CMsgHttpRequest_QueryParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpRequest_QueryParam >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpRequest* Arena::CreateMaybeMessage< ::CMsgHttpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgWebAPIRequest* Arena::CreateMaybeMessage< ::CMsgWebAPIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgWebAPIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpResponse_ResponseHeader* Arena::CreateMaybeMessage< ::CMsgHttpResponse_ResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpResponse_ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgHttpResponse* Arena::CreateMaybeMessage< ::CMsgHttpResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgHttpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMFindAccounts* Arena::CreateMaybeMessage< ::CMsgAMFindAccounts >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMFindAccounts >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMFindAccountsResponse* Arena::CreateMaybeMessage< ::CMsgAMFindAccountsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMFindAccountsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotifyWatchdog* Arena::CreateMaybeMessage< ::CMsgNotifyWatchdog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotifyWatchdog >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetLicenses* Arena::CreateMaybeMessage< ::CMsgAMGetLicenses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetLicenses >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgPackageLicense* Arena::CreateMaybeMessage< ::CMsgPackageLicense >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgPackageLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetLicensesResponse* Arena::CreateMaybeMessage< ::CMsgAMGetLicensesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetLicensesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStats* Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStatsResponse_Stats* Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStatsResponse_Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStatsResponse_Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks* Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStatsResponse_Achievement_Blocks >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGetUserGameStatsResponse* Arena::CreateMaybeMessage< ::CMsgAMGetUserGameStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGetUserGameStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetCommandList* Arena::CreateMaybeMessage< ::CMsgGCGetCommandList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetCommandList >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetCommandListResponse* Arena::CreateMaybeMessage< ::CMsgGCGetCommandListResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetCommandListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedGet* Arena::CreateMaybeMessage< ::CGCMsgMemCachedGet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedGet >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedGetResponse_ValueTag* Arena::CreateMaybeMessage< ::CGCMsgMemCachedGetResponse_ValueTag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedGetResponse_ValueTag >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedGetResponse* Arena::CreateMaybeMessage< ::CGCMsgMemCachedGetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedGetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedSet_KeyPair* Arena::CreateMaybeMessage< ::CGCMsgMemCachedSet_KeyPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedSet_KeyPair >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedSet* Arena::CreateMaybeMessage< ::CGCMsgMemCachedSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedSet >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedDelete* Arena::CreateMaybeMessage< ::CGCMsgMemCachedDelete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedDelete >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedStats* Arena::CreateMaybeMessage< ::CGCMsgMemCachedStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgMemCachedStatsResponse* Arena::CreateMaybeMessage< ::CGCMsgMemCachedStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgMemCachedStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgSQLStats* Arena::CreateMaybeMessage< ::CGCMsgSQLStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgSQLStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgSQLStatsResponse* Arena::CreateMaybeMessage< ::CGCMsgSQLStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgSQLStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMAddFreeLicense* Arena::CreateMaybeMessage< ::CMsgAMAddFreeLicense >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMAddFreeLicense >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMAddFreeLicenseResponse* Arena::CreateMaybeMessage< ::CMsgAMAddFreeLicenseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMAddFreeLicenseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetIPLocation* Arena::CreateMaybeMessage< ::CGCMsgGetIPLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetIPLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::CIPLocationInfo* Arena::CreateMaybeMessage< ::CIPLocationInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CIPLocationInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetIPLocationResponse* Arena::CreateMaybeMessage< ::CGCMsgGetIPLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetIPLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgSystemStatsSchema* Arena::CreateMaybeMessage< ::CGCMsgSystemStatsSchema >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgSystemStatsSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetSystemStats* Arena::CreateMaybeMessage< ::CGCMsgGetSystemStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetSystemStats >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCMsgGetSystemStatsResponse* Arena::CreateMaybeMessage< ::CGCMsgGetSystemStatsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCMsgGetSystemStatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmail_ReplacementToken* Arena::CreateMaybeMessage< ::CMsgAMSendEmail_ReplacementToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmail_ReplacementToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmail_PersonaNameReplacementToken* Arena::CreateMaybeMessage< ::CMsgAMSendEmail_PersonaNameReplacementToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmail_PersonaNameReplacementToken >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmail* Arena::CreateMaybeMessage< ::CMsgAMSendEmail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmail >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMSendEmailResponse* Arena::CreateMaybeMessage< ::CMsgAMSendEmailResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMSendEmailResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetEmailTemplate* Arena::CreateMaybeMessage< ::CMsgGCGetEmailTemplate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetEmailTemplate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetEmailTemplateResponse* Arena::CreateMaybeMessage< ::CMsgGCGetEmailTemplateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetEmailTemplateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGrantGuestPasses2* Arena::CreateMaybeMessage< ::CMsgAMGrantGuestPasses2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGrantGuestPasses2 >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgAMGrantGuestPasses2Response* Arena::CreateMaybeMessage< ::CMsgAMGrantGuestPasses2Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgAMGrantGuestPasses2Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetAccountDetails* Arena::CreateMaybeMessage< ::CGCSystemMsg_GetAccountDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetAccountDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetAccountDetails_Response* Arena::CreateMaybeMessage< ::CGCSystemMsg_GetAccountDetails_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetAccountDetails_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPersonaNames* Arena::CreateMaybeMessage< ::CMsgGCGetPersonaNames >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPersonaNames >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPersonaNames_Response_PersonaName* Arena::CreateMaybeMessage< ::CMsgGCGetPersonaNames_Response_PersonaName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPersonaNames_Response_PersonaName >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPersonaNames_Response* Arena::CreateMaybeMessage< ::CMsgGCGetPersonaNames_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPersonaNames_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCheckFriendship* Arena::CreateMaybeMessage< ::CMsgGCCheckFriendship >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCheckFriendship >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCCheckFriendship_Response* Arena::CreateMaybeMessage< ::CMsgGCCheckFriendship_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCCheckFriendship_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetDirectory_SubGC* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetDirectory_SubGC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetDirectory_SubGC >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetDirectory* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetDirectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetDirectory >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetDirectory_Response* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetDirectory_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetDirectory_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgWebAPIJobRequestForwardResponse* Arena::CreateMaybeMessage< ::CMsgGCMsgWebAPIJobRequestForwardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgWebAPIJobRequestForwardResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetPurchaseTrust_Request* Arena::CreateMaybeMessage< ::CGCSystemMsg_GetPurchaseTrust_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetPurchaseTrust_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CGCSystemMsg_GetPurchaseTrust_Response* Arena::CreateMaybeMessage< ::CGCSystemMsg_GetPurchaseTrust_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CGCSystemMsg_GetPurchaseTrust_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHAccountVacStatusChange* Arena::CreateMaybeMessage< ::CMsgGCHAccountVacStatusChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHAccountVacStatusChange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPartnerAccountLink* Arena::CreateMaybeMessage< ::CMsgGCGetPartnerAccountLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPartnerAccountLink >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCGetPartnerAccountLink_Response* Arena::CreateMaybeMessage< ::CMsgGCGetPartnerAccountLink_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCGetPartnerAccountLink_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCRoutingInfo* Arena::CreateMaybeMessage< ::CMsgGCRoutingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCRoutingInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetWebAPIRouting_Entry* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetWebAPIRouting_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetWebAPIRouting* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetWebAPIRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetWebAPIRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetClientMsgRouting_Entry* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetClientMsgRouting_Entry >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetClientMsgRouting* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetClientMsgRouting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetClientMsgRouting >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetWebAPIRouting_Response* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetWebAPIRouting_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetWebAPIRouting_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgMasterSetClientMsgRouting_Response* Arena::CreateMaybeMessage< ::CMsgGCMsgMasterSetClientMsgRouting_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgMasterSetClientMsgRouting_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgSetOptions_MessageRange* Arena::CreateMaybeMessage< ::CMsgGCMsgSetOptions_MessageRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgSetOptions_MessageRange >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCMsgSetOptions* Arena::CreateMaybeMessage< ::CMsgGCMsgSetOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCMsgSetOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHUpdateSession_ExtraField* Arena::CreateMaybeMessage< ::CMsgGCHUpdateSession_ExtraField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHUpdateSession_ExtraField >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgGCHUpdateSession* Arena::CreateMaybeMessage< ::CMsgGCHUpdateSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgGCHUpdateSession >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances* Arena::CreateMaybeMessage< ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotificationOfSuspiciousActivity_MultipleGameInstances >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgNotificationOfSuspiciousActivity* Arena::CreateMaybeMessage< ::CMsgNotificationOfSuspiciousActivity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgNotificationOfSuspiciousActivity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxns_PartnerMicroTxn* Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxns_PartnerMicroTxn >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxns_PartnerInfo* Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxns_PartnerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxns_PartnerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxns* Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxns >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxns >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgDPPartnerMicroTxnsResponse* Arena::CreateMaybeMessage< ::CMsgDPPartnerMicroTxnsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CMsgDPPartnerMicroTxnsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::CChinaAgreementSessions_StartAgreementSessionInGame_Request* Arena::CreateMaybeMessage< ::CChinaAgreementSessions_StartAgreementSessionInGame_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChinaAgreementSessions_StartAgreementSessionInGame_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::CChinaAgreementSessions_StartAgreementSessionInGame_Response* Arena::CreateMaybeMessage< ::CChinaAgreementSessions_StartAgreementSessionInGame_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CChinaAgreementSessions_StartAgreementSessionInGame_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
