// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine_gcmessages.proto

#include "engine_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CEngineGotvSyncPacket::CEngineGotvSyncPacket(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : match_id_(uint64_t{0u})
  , instance_id_(0u)
  , signupfragment_(0u)
  , currentfragment_(0u)
  , tickrate_(0)
  , tick_(0u)
  , rtdelay_(0)
  , rcvage_(0)
  , keyframe_interval_(0)
  , cdndelay_(0u){}
struct CEngineGotvSyncPacketDefaultTypeInternal {
  constexpr CEngineGotvSyncPacketDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CEngineGotvSyncPacketDefaultTypeInternal() {}
  union {
    CEngineGotvSyncPacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CEngineGotvSyncPacketDefaultTypeInternal _CEngineGotvSyncPacket_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_engine_5fgcmessages_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_engine_5fgcmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_engine_5fgcmessages_2eproto = nullptr;

const uint32_t TableStruct_engine_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, match_id_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, instance_id_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, signupfragment_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, currentfragment_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, tickrate_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, tick_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, rtdelay_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, rcvage_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, keyframe_interval_),
  PROTOBUF_FIELD_OFFSET(::CEngineGotvSyncPacket, cdndelay_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::CEngineGotvSyncPacket)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CEngineGotvSyncPacket_default_instance_),
};

const char descriptor_table_protodef_engine_5fgcmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027engine_gcmessages.proto\032 google/protob"
  "uf/descriptor.proto\"\335\001\n\025CEngineGotvSyncP"
  "acket\022\020\n\010match_id\030\001 \001(\004\022\023\n\013instance_id\030\002"
  " \001(\r\022\026\n\016signupfragment\030\003 \001(\r\022\027\n\017currentf"
  "ragment\030\004 \001(\r\022\020\n\010tickrate\030\005 \001(\002\022\014\n\004tick\030"
  "\006 \001(\r\022\017\n\007rtdelay\030\010 \001(\002\022\016\n\006rcvage\030\t \001(\002\022\031"
  "\n\021keyframe_interval\030\n \001(\002\022\020\n\010cdndelay\030\013 "
  "\001(\rB\003\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_engine_5fgcmessages_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_engine_5fgcmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_engine_5fgcmessages_2eproto = {
  false, false, 288, descriptor_table_protodef_engine_5fgcmessages_2eproto, "engine_gcmessages.proto", 
  &descriptor_table_engine_5fgcmessages_2eproto_once, descriptor_table_engine_5fgcmessages_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_engine_5fgcmessages_2eproto::offsets,
  file_level_metadata_engine_5fgcmessages_2eproto, file_level_enum_descriptors_engine_5fgcmessages_2eproto, file_level_service_descriptors_engine_5fgcmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_engine_5fgcmessages_2eproto_getter() {
  return &descriptor_table_engine_5fgcmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_engine_5fgcmessages_2eproto(&descriptor_table_engine_5fgcmessages_2eproto);

// ===================================================================

class CEngineGotvSyncPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CEngineGotvSyncPacket>()._has_bits_);
  static void set_has_match_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_instance_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signupfragment(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_currentfragment(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tickrate(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tick(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rtdelay(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rcvage(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_keyframe_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cdndelay(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

CEngineGotvSyncPacket::CEngineGotvSyncPacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CEngineGotvSyncPacket)
}
CEngineGotvSyncPacket::CEngineGotvSyncPacket(const CEngineGotvSyncPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cdndelay_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(cdndelay_));
  // @@protoc_insertion_point(copy_constructor:CEngineGotvSyncPacket)
}

inline void CEngineGotvSyncPacket::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&match_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cdndelay_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(cdndelay_));
}

CEngineGotvSyncPacket::~CEngineGotvSyncPacket() {
  // @@protoc_insertion_point(destructor:CEngineGotvSyncPacket)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CEngineGotvSyncPacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CEngineGotvSyncPacket::ArenaDtor(void* object) {
  CEngineGotvSyncPacket* _this = reinterpret_cast< CEngineGotvSyncPacket* >(object);
  (void)_this;
}
void CEngineGotvSyncPacket::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CEngineGotvSyncPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CEngineGotvSyncPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:CEngineGotvSyncPacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rcvage_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(rcvage_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&keyframe_interval_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cdndelay_) -
        reinterpret_cast<char*>(&keyframe_interval_)) + sizeof(cdndelay_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CEngineGotvSyncPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_match_id(&has_bits);
          match_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 instance_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_instance_id(&has_bits);
          instance_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 signupfragment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_signupfragment(&has_bits);
          signupfragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 currentfragment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_currentfragment(&has_bits);
          currentfragment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tickrate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_tickrate(&has_bits);
          tickrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tick = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tick(&has_bits);
          tick_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float rtdelay = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_rtdelay(&has_bits);
          rtdelay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float rcvage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_rcvage(&has_bits);
          rcvage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float keyframe_interval = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_keyframe_interval(&has_bits);
          keyframe_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 cdndelay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_cdndelay(&has_bits);
          cdndelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CEngineGotvSyncPacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CEngineGotvSyncPacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_match_id(), target);
  }

  // optional uint32 instance_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_instance_id(), target);
  }

  // optional uint32 signupfragment = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_signupfragment(), target);
  }

  // optional uint32 currentfragment = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_currentfragment(), target);
  }

  // optional float tickrate = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_tickrate(), target);
  }

  // optional uint32 tick = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tick(), target);
  }

  // optional float rtdelay = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_rtdelay(), target);
  }

  // optional float rcvage = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_rcvage(), target);
  }

  // optional float keyframe_interval = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_keyframe_interval(), target);
  }

  // optional uint32 cdndelay = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cdndelay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CEngineGotvSyncPacket)
  return target;
}

size_t CEngineGotvSyncPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CEngineGotvSyncPacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_match_id());
    }

    // optional uint32 instance_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_instance_id());
    }

    // optional uint32 signupfragment = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_signupfragment());
    }

    // optional uint32 currentfragment = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_currentfragment());
    }

    // optional float tickrate = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 tick = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_tick());
    }

    // optional float rtdelay = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float rcvage = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional float keyframe_interval = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional uint32 cdndelay = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_cdndelay());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CEngineGotvSyncPacket::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CEngineGotvSyncPacket::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CEngineGotvSyncPacket::GetClassData() const { return &_class_data_; }

void CEngineGotvSyncPacket::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CEngineGotvSyncPacket *>(to)->MergeFrom(
      static_cast<const CEngineGotvSyncPacket &>(from));
}


void CEngineGotvSyncPacket::MergeFrom(const CEngineGotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CEngineGotvSyncPacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      instance_id_ = from.instance_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      signupfragment_ = from.signupfragment_;
    }
    if (cached_has_bits & 0x00000008u) {
      currentfragment_ = from.currentfragment_;
    }
    if (cached_has_bits & 0x00000010u) {
      tickrate_ = from.tickrate_;
    }
    if (cached_has_bits & 0x00000020u) {
      tick_ = from.tick_;
    }
    if (cached_has_bits & 0x00000040u) {
      rtdelay_ = from.rtdelay_;
    }
    if (cached_has_bits & 0x00000080u) {
      rcvage_ = from.rcvage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      keyframe_interval_ = from.keyframe_interval_;
    }
    if (cached_has_bits & 0x00000200u) {
      cdndelay_ = from.cdndelay_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CEngineGotvSyncPacket::CopyFrom(const CEngineGotvSyncPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CEngineGotvSyncPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEngineGotvSyncPacket::IsInitialized() const {
  return true;
}

void CEngineGotvSyncPacket::InternalSwap(CEngineGotvSyncPacket* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CEngineGotvSyncPacket, cdndelay_)
      + sizeof(CEngineGotvSyncPacket::cdndelay_)
      - PROTOBUF_FIELD_OFFSET(CEngineGotvSyncPacket, match_id_)>(
          reinterpret_cast<char*>(&match_id_),
          reinterpret_cast<char*>(&other->match_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CEngineGotvSyncPacket::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_engine_5fgcmessages_2eproto_getter, &descriptor_table_engine_5fgcmessages_2eproto_once,
      file_level_metadata_engine_5fgcmessages_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CEngineGotvSyncPacket* Arena::CreateMaybeMessage< ::CEngineGotvSyncPacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CEngineGotvSyncPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
